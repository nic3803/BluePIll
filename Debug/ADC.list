
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002eec  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d06c  0800d06c  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d06c  0800d06c  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d06c  0800d06c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d06c  0800d06c  0001d06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d070  0800d070  0001d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800d074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029cc  200000a8  0800d11c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a74  0800d11c  00022a74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138f8  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003218  00000000  00000000  00033a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00036c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001002  00000000  00000000  000380a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a46b  00000000  00000000  000390aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b5e  00000000  00000000  00053515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009324e  00000000  00000000  0006d073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005af8  00000000  00000000  001002c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00105dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a168 	.word	0x0800a168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	0800a168 	.word	0x0800a168

0800014c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4803      	ldr	r0, [pc, #12]	; (8000164 <SELECT+0x18>)
 8000156:	f002 fd11 	bl	8002b7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800015a:	2001      	movs	r0, #1
 800015c:	f002 f846 	bl	80021ec <HAL_Delay>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40010800 	.word	0x40010800

08000168 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2110      	movs	r1, #16
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <DESELECT+0x18>)
 8000172:	f002 fd03 	bl	8002b7c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000176:	2001      	movs	r0, #1
 8000178:	f002 f838 	bl	80021ec <HAL_Delay>
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40010800 	.word	0x40010800

08000184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800018e:	bf00      	nop
 8000190:	4b08      	ldr	r3, [pc, #32]	; (80001b4 <SPI_TxByte+0x30>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	f003 0302 	and.w	r3, r3, #2
 800019a:	2b02      	cmp	r3, #2
 800019c:	d1f8      	bne.n	8000190 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	2201      	movs	r2, #1
 80001a4:	4803      	ldr	r0, [pc, #12]	; (80001b4 <SPI_TxByte+0x30>)
 80001a6:	f004 f819 	bl	80041dc <HAL_SPI_Transmit>
}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000150 	.word	0x20000150

080001b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
 80001c0:	460b      	mov	r3, r1
 80001c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001c4:	bf00      	nop
 80001c6:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <SPI_TxBuffer+0x30>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	f003 0302 	and.w	r3, r3, #2
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d1f8      	bne.n	80001c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80001d4:	887a      	ldrh	r2, [r7, #2]
 80001d6:	2364      	movs	r3, #100	; 0x64
 80001d8:	6879      	ldr	r1, [r7, #4]
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_TxBuffer+0x30>)
 80001dc:	f003 fffe 	bl	80041dc <HAL_SPI_Transmit>
}
 80001e0:	bf00      	nop
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000150 	.word	0x20000150

080001ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80001f2:	23ff      	movs	r3, #255	; 0xff
 80001f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001f6:	bf00      	nop
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <SPI_RxByte+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b02      	cmp	r3, #2
 8000204:	d1f8      	bne.n	80001f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000206:	1dba      	adds	r2, r7, #6
 8000208:	1df9      	adds	r1, r7, #7
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <SPI_RxByte+0x34>)
 8000212:	f004 f926 	bl	8004462 <HAL_SPI_TransmitReceive>

	return data;
 8000216:	79bb      	ldrb	r3, [r7, #6]
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000150 	.word	0x20000150

08000224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800022c:	f7ff ffde 	bl	80001ec <SPI_RxByte>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	701a      	strb	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <SD_ReadyWait+0x30>)
 8000248:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800024c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800024e:	f7ff ffcd 	bl	80001ec <SPI_RxByte>
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2bff      	cmp	r3, #255	; 0xff
 800025a:	d003      	beq.n	8000264 <SD_ReadyWait+0x24>
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <SD_ReadyWait+0x30>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1f4      	bne.n	800024e <SD_ReadyWait+0xe>

	return res;
 8000264:	79fb      	ldrb	r3, [r7, #7]
}
 8000266:	4618      	mov	r0, r3
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	200000c6 	.word	0x200000c6

08000274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800027a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800027e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000280:	f7ff ff72 	bl	8000168 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60bb      	str	r3, [r7, #8]
 8000288:	e005      	b.n	8000296 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800028a:	20ff      	movs	r0, #255	; 0xff
 800028c:	f7ff ff7a 	bl	8000184 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	3301      	adds	r3, #1
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	2b09      	cmp	r3, #9
 800029a:	ddf6      	ble.n	800028a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800029c:	f7ff ff56 	bl	800014c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80002a0:	2340      	movs	r3, #64	; 0x40
 80002a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80002b4:	2395      	movs	r3, #149	; 0x95
 80002b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80002b8:	463b      	mov	r3, r7
 80002ba:	2106      	movs	r1, #6
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff7b 	bl	80001b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80002c2:	e002      	b.n	80002ca <SD_PowerOn+0x56>
	{
		cnt--;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3b01      	subs	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80002ca:	f7ff ff8f 	bl	80001ec <SPI_RxByte>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d002      	beq.n	80002da <SD_PowerOn+0x66>
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f4      	bne.n	80002c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80002da:	f7ff ff45 	bl	8000168 <DESELECT>
	SPI_TxByte(0XFF);
 80002de:	20ff      	movs	r0, #255	; 0xff
 80002e0:	f7ff ff50 	bl	8000184 <SPI_TxByte>

	PowerFlag = 1;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <SD_PowerOn+0x80>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]
}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	200000c9 	.word	0x200000c9

080002f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <SD_PowerOff+0x14>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	200000c9 	.word	0x200000c9

08000310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000314:	4b02      	ldr	r3, [pc, #8]	; (8000320 <SD_CheckPower+0x10>)
 8000316:	781b      	ldrb	r3, [r3, #0]
}
 8000318:	4618      	mov	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	200000c9 	.word	0x200000c9

08000324 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <SD_RxDataBlock+0x58>)
 8000330:	22c8      	movs	r2, #200	; 0xc8
 8000332:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000334:	f7ff ff5a 	bl	80001ec <SPI_RxByte>
 8000338:	4603      	mov	r3, r0
 800033a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	2bff      	cmp	r3, #255	; 0xff
 8000340:	d103      	bne.n	800034a <SD_RxDataBlock+0x26>
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <SD_RxDataBlock+0x58>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f4      	bne.n	8000334 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	2bfe      	cmp	r3, #254	; 0xfe
 800034e:	d001      	beq.n	8000354 <SD_RxDataBlock+0x30>
 8000350:	2300      	movs	r3, #0
 8000352:	e00f      	b.n	8000374 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff62 	bl	8000224 <SPI_RxBytePtr>
	} while(len--);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	603a      	str	r2, [r7, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f4      	bne.n	8000354 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800036a:	f7ff ff3f 	bl	80001ec <SPI_RxByte>
	SPI_RxByte();
 800036e:	f7ff ff3d 	bl	80001ec <SPI_RxByte>

	return TRUE;
 8000372:	2301      	movs	r3, #1
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	200000c4 	.word	0x200000c4

08000380 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000390:	f7ff ff56 	bl	8000240 <SD_ReadyWait>
 8000394:	4603      	mov	r3, r0
 8000396:	2bff      	cmp	r3, #255	; 0xff
 8000398:	d001      	beq.n	800039e <SD_TxDataBlock+0x1e>
 800039a:	2300      	movs	r3, #0
 800039c:	e02f      	b.n	80003fe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800039e:	78fb      	ldrb	r3, [r7, #3]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff feef 	bl	8000184 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	2bfd      	cmp	r3, #253	; 0xfd
 80003aa:	d020      	beq.n	80003ee <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff01 	bl	80001b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80003b6:	f7ff ff19 	bl	80001ec <SPI_RxByte>
		SPI_RxByte();
 80003ba:	f7ff ff17 	bl	80001ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80003be:	e00b      	b.n	80003d8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80003c0:	f7ff ff14 	bl	80001ec <SPI_RxByte>
 80003c4:	4603      	mov	r3, r0
 80003c6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	f003 031f 	and.w	r3, r3, #31
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	d006      	beq.n	80003e0 <SD_TxDataBlock+0x60>
			i++;
 80003d2:	7bbb      	ldrb	r3, [r7, #14]
 80003d4:	3301      	adds	r3, #1
 80003d6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	2b40      	cmp	r3, #64	; 0x40
 80003dc:	d9f0      	bls.n	80003c0 <SD_TxDataBlock+0x40>
 80003de:	e000      	b.n	80003e2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80003e0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80003e2:	bf00      	nop
 80003e4:	f7ff ff02 	bl	80001ec <SPI_RxByte>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0fa      	beq.n	80003e4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f003 031f 	and.w	r3, r3, #31
 80003f4:	2b05      	cmp	r3, #5
 80003f6:	d101      	bne.n	80003fc <SD_TxDataBlock+0x7c>
 80003f8:	2301      	movs	r3, #1
 80003fa:	e000      	b.n	80003fe <SD_TxDataBlock+0x7e>

	return FALSE;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	6039      	str	r1, [r7, #0]
 8000410:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000412:	f7ff ff15 	bl	8000240 <SD_ReadyWait>
 8000416:	4603      	mov	r3, r0
 8000418:	2bff      	cmp	r3, #255	; 0xff
 800041a:	d001      	beq.n	8000420 <SD_SendCmd+0x1a>
 800041c:	23ff      	movs	r3, #255	; 0xff
 800041e:	e042      	b.n	80004a6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff feae 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	0e1b      	lsrs	r3, r3, #24
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fea8 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	b2db      	uxtb	r3, r3
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fea2 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	b2db      	uxtb	r3, r3
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff fe9c 	bl	8000184 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe97 	bl	8000184 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b40      	cmp	r3, #64	; 0x40
 800045a:	d102      	bne.n	8000462 <SD_SendCmd+0x5c>
 800045c:	2395      	movs	r3, #149	; 0x95
 800045e:	73fb      	strb	r3, [r7, #15]
 8000460:	e007      	b.n	8000472 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b48      	cmp	r3, #72	; 0x48
 8000466:	d102      	bne.n	800046e <SD_SendCmd+0x68>
 8000468:	2387      	movs	r3, #135	; 0x87
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	e001      	b.n	8000472 <SD_SendCmd+0x6c>
	else crc = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fe85 	bl	8000184 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b4c      	cmp	r3, #76	; 0x4c
 800047e:	d101      	bne.n	8000484 <SD_SendCmd+0x7e>
 8000480:	f7ff feb4 	bl	80001ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000484:	230a      	movs	r3, #10
 8000486:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000488:	f7ff feb0 	bl	80001ec <SPI_RxByte>
 800048c:	4603      	mov	r3, r0
 800048e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000490:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000494:	2b00      	cmp	r3, #0
 8000496:	da05      	bge.n	80004a4 <SD_SendCmd+0x9e>
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	3b01      	subs	r3, #1
 800049c:	73bb      	strb	r3, [r7, #14]
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1f1      	bne.n	8000488 <SD_SendCmd+0x82>

	return res;
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SD_disk_initialize+0x14>
 80004c0:	2301      	movs	r3, #1
 80004c2:	e0d1      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80004c4:	4b6a      	ldr	r3, [pc, #424]	; (8000670 <SD_disk_initialize+0x1c0>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <SD_disk_initialize+0x2a>
 80004d2:	4b67      	ldr	r3, [pc, #412]	; (8000670 <SD_disk_initialize+0x1c0>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	e0c6      	b.n	8000668 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80004da:	f7ff fecb 	bl	8000274 <SD_PowerOn>

	/* slave select */
	SELECT();
 80004de:	f7ff fe35 	bl	800014c <SELECT>

	/* check disk type */
	type = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80004e6:	2100      	movs	r1, #0
 80004e8:	2040      	movs	r0, #64	; 0x40
 80004ea:	f7ff ff8c 	bl	8000406 <SD_SendCmd>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 80a1 	bne.w	8000638 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80004f6:	4b5f      	ldr	r3, [pc, #380]	; (8000674 <SD_disk_initialize+0x1c4>)
 80004f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80004fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000502:	2048      	movs	r0, #72	; 0x48
 8000504:	f7ff ff7f 	bl	8000406 <SD_SendCmd>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d155      	bne.n	80005ba <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	e00c      	b.n	800052e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000514:	7bfc      	ldrb	r4, [r7, #15]
 8000516:	f7ff fe69 	bl	80001ec <SPI_RxByte>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	f104 0310 	add.w	r3, r4, #16
 8000522:	443b      	add	r3, r7
 8000524:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	3301      	adds	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d9ef      	bls.n	8000514 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000534:	7abb      	ldrb	r3, [r7, #10]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d17e      	bne.n	8000638 <SD_disk_initialize+0x188>
 800053a:	7afb      	ldrb	r3, [r7, #11]
 800053c:	2baa      	cmp	r3, #170	; 0xaa
 800053e:	d17b      	bne.n	8000638 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000540:	2100      	movs	r1, #0
 8000542:	2077      	movs	r0, #119	; 0x77
 8000544:	f7ff ff5f 	bl	8000406 <SD_SendCmd>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d807      	bhi.n	800055e <SD_disk_initialize+0xae>
 800054e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000552:	2069      	movs	r0, #105	; 0x69
 8000554:	f7ff ff57 	bl	8000406 <SD_SendCmd>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d004      	beq.n	8000568 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800055e:	4b45      	ldr	r3, [pc, #276]	; (8000674 <SD_disk_initialize+0x1c4>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1ec      	bne.n	8000540 <SD_disk_initialize+0x90>
 8000566:	e000      	b.n	800056a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000568:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <SD_disk_initialize+0x1c4>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d062      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000572:	2100      	movs	r1, #0
 8000574:	207a      	movs	r0, #122	; 0x7a
 8000576:	f7ff ff46 	bl	8000406 <SD_SendCmd>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d15b      	bne.n	8000638 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e00c      	b.n	80005a0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000586:	7bfc      	ldrb	r4, [r7, #15]
 8000588:	f7ff fe30 	bl	80001ec <SPI_RxByte>
 800058c:	4603      	mov	r3, r0
 800058e:	461a      	mov	r2, r3
 8000590:	f104 0310 	add.w	r3, r4, #16
 8000594:	443b      	add	r3, r7
 8000596:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	3301      	adds	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d9ef      	bls.n	8000586 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80005a6:	7a3b      	ldrb	r3, [r7, #8]
 80005a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SD_disk_initialize+0x104>
 80005b0:	230c      	movs	r3, #12
 80005b2:	e000      	b.n	80005b6 <SD_disk_initialize+0x106>
 80005b4:	2304      	movs	r3, #4
 80005b6:	73bb      	strb	r3, [r7, #14]
 80005b8:	e03e      	b.n	8000638 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80005ba:	2100      	movs	r1, #0
 80005bc:	2077      	movs	r0, #119	; 0x77
 80005be:	f7ff ff22 	bl	8000406 <SD_SendCmd>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d808      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005c8:	2100      	movs	r1, #0
 80005ca:	2069      	movs	r0, #105	; 0x69
 80005cc:	f7ff ff1b 	bl	8000406 <SD_SendCmd>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d801      	bhi.n	80005da <SD_disk_initialize+0x12a>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e000      	b.n	80005dc <SD_disk_initialize+0x12c>
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	d10e      	bne.n	8000602 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80005e4:	2100      	movs	r1, #0
 80005e6:	2077      	movs	r0, #119	; 0x77
 80005e8:	f7ff ff0d 	bl	8000406 <SD_SendCmd>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d80e      	bhi.n	8000610 <SD_disk_initialize+0x160>
 80005f2:	2100      	movs	r1, #0
 80005f4:	2069      	movs	r0, #105	; 0x69
 80005f6:	f7ff ff06 	bl	8000406 <SD_SendCmd>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <SD_disk_initialize+0x160>
 8000600:	e00c      	b.n	800061c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000602:	2100      	movs	r1, #0
 8000604:	2041      	movs	r0, #65	; 0x41
 8000606:	f7ff fefe 	bl	8000406 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d004      	beq.n	800061a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <SD_disk_initialize+0x1c4>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1e2      	bne.n	80005de <SD_disk_initialize+0x12e>
 8000618:	e000      	b.n	800061c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800061a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <SD_disk_initialize+0x1c4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d007      	beq.n	8000634 <SD_disk_initialize+0x184>
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	2050      	movs	r0, #80	; 0x50
 800062a:	f7ff feec 	bl	8000406 <SD_SendCmd>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SD_disk_initialize+0x188>
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <SD_disk_initialize+0x1c8>)
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800063e:	f7ff fd93 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000642:	f7ff fdd3 	bl	80001ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <SD_disk_initialize+0x1c0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SD_disk_initialize+0x1c0>)
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e001      	b.n	8000662 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800065e:	f7ff fe4b 	bl	80002f8 <SD_PowerOff>
	}

	return Stat;
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <SD_disk_initialize+0x1c0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	200000c4 	.word	0x200000c4
 8000678:	200000c8 	.word	0x200000c8

0800067c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SD_disk_status+0x14>
 800068c:	2301      	movs	r3, #1
 800068e:	e002      	b.n	8000696 <SD_disk_status+0x1a>
	return Stat;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <SD_disk_status+0x24>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000000 	.word	0x20000000

080006a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <SD_disk_read+0x1c>
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <SD_disk_read+0x20>
 80006c0:	2304      	movs	r3, #4
 80006c2:	e051      	b.n	8000768 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <SD_disk_read+0xcc>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SD_disk_read+0x32>
 80006d2:	2303      	movs	r3, #3
 80006d4:	e048      	b.n	8000768 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SD_disk_read+0xd0>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d102      	bne.n	80006e8 <SD_disk_read+0x44>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	025b      	lsls	r3, r3, #9
 80006e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80006e8:	f7ff fd30 	bl	800014c <SELECT>

	if (count == 1)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d111      	bne.n	8000716 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	2051      	movs	r0, #81	; 0x51
 80006f6:	f7ff fe86 	bl	8000406 <SD_SendCmd>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d129      	bne.n	8000754 <SD_disk_read+0xb0>
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	68b8      	ldr	r0, [r7, #8]
 8000706:	f7ff fe0d 	bl	8000324 <SD_RxDataBlock>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d021      	beq.n	8000754 <SD_disk_read+0xb0>
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	e01e      	b.n	8000754 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2052      	movs	r0, #82	; 0x52
 800071a:	f7ff fe74 	bl	8000406 <SD_SendCmd>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d117      	bne.n	8000754 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f7ff fdfb 	bl	8000324 <SD_RxDataBlock>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00a      	beq.n	800074a <SD_disk_read+0xa6>
				buff += 512;
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800073a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1ed      	bne.n	8000724 <SD_disk_read+0x80>
 8000748:	e000      	b.n	800074c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800074a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	204c      	movs	r0, #76	; 0x4c
 8000750:	f7ff fe59 	bl	8000406 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000754:	f7ff fd08 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000758:	f7ff fd48 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	200000c8 	.word	0x200000c8

08000778 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <SD_disk_write+0x1c>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <SD_disk_write+0x20>
 8000794:	2304      	movs	r3, #4
 8000796:	e06b      	b.n	8000870 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000798:	4b37      	ldr	r3, [pc, #220]	; (8000878 <SD_disk_write+0x100>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SD_disk_write+0x32>
 80007a6:	2303      	movs	r3, #3
 80007a8:	e062      	b.n	8000870 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <SD_disk_write+0x100>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SD_disk_write+0x44>
 80007b8:	2302      	movs	r3, #2
 80007ba:	e059      	b.n	8000870 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <SD_disk_write+0x104>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <SD_disk_write+0x56>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	025b      	lsls	r3, r3, #9
 80007cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80007ce:	f7ff fcbd 	bl	800014c <SELECT>

	if (count == 1)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d110      	bne.n	80007fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	2058      	movs	r0, #88	; 0x58
 80007dc:	f7ff fe13 	bl	8000406 <SD_SendCmd>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d13a      	bne.n	800085c <SD_disk_write+0xe4>
 80007e6:	21fe      	movs	r1, #254	; 0xfe
 80007e8:	68b8      	ldr	r0, [r7, #8]
 80007ea:	f7ff fdc9 	bl	8000380 <SD_TxDataBlock>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d033      	beq.n	800085c <SD_disk_write+0xe4>
			count = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	e030      	b.n	800085c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80007fa:	4b20      	ldr	r3, [pc, #128]	; (800087c <SD_disk_write+0x104>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d007      	beq.n	8000816 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000806:	2100      	movs	r1, #0
 8000808:	2077      	movs	r0, #119	; 0x77
 800080a:	f7ff fdfc 	bl	8000406 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	2057      	movs	r0, #87	; 0x57
 8000812:	f7ff fdf8 	bl	8000406 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	2059      	movs	r0, #89	; 0x59
 800081a:	f7ff fdf4 	bl	8000406 <SD_SendCmd>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d11b      	bne.n	800085c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000824:	21fc      	movs	r1, #252	; 0xfc
 8000826:	68b8      	ldr	r0, [r7, #8]
 8000828:	f7ff fdaa 	bl	8000380 <SD_TxDataBlock>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00a      	beq.n	8000848 <SD_disk_write+0xd0>
				buff += 512;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000838:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ee      	bne.n	8000824 <SD_disk_write+0xac>
 8000846:	e000      	b.n	800084a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000848:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800084a:	21fd      	movs	r1, #253	; 0xfd
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fd97 	bl	8000380 <SD_TxDataBlock>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <SD_disk_write+0xe4>
			{
				count = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800085c:	f7ff fc84 	bl	8000168 <DESELECT>
	SPI_RxByte();
 8000860:	f7ff fcc4 	bl	80001ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bf14      	ite	ne
 800086a:	2301      	movne	r3, #1
 800086c:	2300      	moveq	r3, #0
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	200000c8 	.word	0x200000c8

08000880 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	603a      	str	r2, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	460b      	mov	r3, r1
 800088e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SD_disk_ioctl+0x1e>
 800089a:	2304      	movs	r3, #4
 800089c:	e115      	b.n	8000aca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b05      	cmp	r3, #5
 80008a8:	d124      	bne.n	80008f4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d012      	beq.n	80008d8 <SD_disk_ioctl+0x58>
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dc1a      	bgt.n	80008ec <SD_disk_ioctl+0x6c>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <SD_disk_ioctl+0x40>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d006      	beq.n	80008cc <SD_disk_ioctl+0x4c>
 80008be:	e015      	b.n	80008ec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80008c0:	f7ff fd1a 	bl	80002f8 <SD_PowerOff>
			res = RES_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ca:	e0fc      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80008cc:	f7ff fcd2 	bl	8000274 <SD_PowerOn>
			res = RES_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008d6:	e0f6      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	1c5c      	adds	r4, r3, #1
 80008dc:	f7ff fd18 	bl	8000310 <SD_CheckPower>
 80008e0:	4603      	mov	r3, r0
 80008e2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80008ea:	e0ec      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80008ec:	2304      	movs	r3, #4
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008f2:	e0e8      	b.n	8000ac6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <SD_disk_ioctl+0x254>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SD_disk_ioctl+0x86>
 8000902:	2303      	movs	r3, #3
 8000904:	e0e1      	b.n	8000aca <SD_disk_ioctl+0x24a>

		SELECT();
 8000906:	f7ff fc21 	bl	800014c <SELECT>

		switch (ctrl)
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	2b0d      	cmp	r3, #13
 800090e:	f200 80cb 	bhi.w	8000aa8 <SD_disk_ioctl+0x228>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <SD_disk_ioctl+0x98>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	08000a13 	.word	0x08000a13
 800091c:	08000951 	.word	0x08000951
 8000920:	08000a03 	.word	0x08000a03
 8000924:	08000aa9 	.word	0x08000aa9
 8000928:	08000aa9 	.word	0x08000aa9
 800092c:	08000aa9 	.word	0x08000aa9
 8000930:	08000aa9 	.word	0x08000aa9
 8000934:	08000aa9 	.word	0x08000aa9
 8000938:	08000aa9 	.word	0x08000aa9
 800093c:	08000aa9 	.word	0x08000aa9
 8000940:	08000aa9 	.word	0x08000aa9
 8000944:	08000a25 	.word	0x08000a25
 8000948:	08000a49 	.word	0x08000a49
 800094c:	08000a6d 	.word	0x08000a6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000950:	2100      	movs	r1, #0
 8000952:	2049      	movs	r0, #73	; 0x49
 8000954:	f7ff fd57 	bl	8000406 <SD_SendCmd>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	f040 80a8 	bne.w	8000ab0 <SD_disk_ioctl+0x230>
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2110      	movs	r1, #16
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fcdc 	bl	8000324 <SD_RxDataBlock>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 809e 	beq.w	8000ab0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	099b      	lsrs	r3, r3, #6
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10e      	bne.n	800099c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800097e:	7d7b      	ldrb	r3, [r7, #21]
 8000980:	b29a      	uxth	r2, r3
 8000982:	7d3b      	ldrb	r3, [r7, #20]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29b      	uxth	r3, r3
 800098a:	4413      	add	r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000992:	8bfb      	ldrh	r3, [r7, #30]
 8000994:	029a      	lsls	r2, r3, #10
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e02e      	b.n	80009fa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800099c:	7c7b      	ldrb	r3, [r7, #17]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	7dbb      	ldrb	r3, [r7, #22]
 80009a6:	09db      	lsrs	r3, r3, #7
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	7d7b      	ldrb	r3, [r7, #21]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 0306 	and.w	r3, r3, #6
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	4413      	add	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3302      	adds	r3, #2
 80009c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009c4:	7d3b      	ldrb	r3, [r7, #20]
 80009c6:	099b      	lsrs	r3, r3, #6
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	7cfb      	ldrb	r3, [r7, #19]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	7cbb      	ldrb	r3, [r7, #18]
 80009da:	029b      	lsls	r3, r3, #10
 80009dc:	b29b      	uxth	r3, r3
 80009de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3301      	adds	r3, #1
 80009ea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80009ec:	8bfa      	ldrh	r2, [r7, #30]
 80009ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009f2:	3b09      	subs	r3, #9
 80009f4:	409a      	lsls	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000a00:	e056      	b.n	8000ab0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a10:	e055      	b.n	8000abe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a12:	f7ff fc15 	bl	8000240 <SD_ReadyWait>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d14b      	bne.n	8000ab4 <SD_disk_ioctl+0x234>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a22:	e047      	b.n	8000ab4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a24:	2100      	movs	r1, #0
 8000a26:	2049      	movs	r0, #73	; 0x49
 8000a28:	f7ff fced 	bl	8000406 <SD_SendCmd>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d142      	bne.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a32:	2110      	movs	r1, #16
 8000a34:	6a38      	ldr	r0, [r7, #32]
 8000a36:	f7ff fc75 	bl	8000324 <SD_RxDataBlock>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d03b      	beq.n	8000ab8 <SD_disk_ioctl+0x238>
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a46:	e037      	b.n	8000ab8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a48:	2100      	movs	r1, #0
 8000a4a:	204a      	movs	r0, #74	; 0x4a
 8000a4c:	f7ff fcdb 	bl	8000406 <SD_SendCmd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d132      	bne.n	8000abc <SD_disk_ioctl+0x23c>
 8000a56:	2110      	movs	r1, #16
 8000a58:	6a38      	ldr	r0, [r7, #32]
 8000a5a:	f7ff fc63 	bl	8000324 <SD_RxDataBlock>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d02b      	beq.n	8000abc <SD_disk_ioctl+0x23c>
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a6a:	e027      	b.n	8000abc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	207a      	movs	r0, #122	; 0x7a
 8000a70:	f7ff fcc9 	bl	8000406 <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d116      	bne.n	8000aa8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a80:	e00b      	b.n	8000a9a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000a82:	6a3c      	ldr	r4, [r7, #32]
 8000a84:	1c63      	adds	r3, r4, #1
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	f7ff fbb0 	bl	80001ec <SPI_RxByte>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a94:	3301      	adds	r3, #1
 8000a96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d9ef      	bls.n	8000a82 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000aae:	e006      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab0:	bf00      	nop
 8000ab2:	e004      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab4:	bf00      	nop
 8000ab6:	e002      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e000      	b.n	8000abe <SD_disk_ioctl+0x23e>
			break;
 8000abc:	bf00      	nop
		}

		DESELECT();
 8000abe:	f7ff fb53 	bl	8000168 <DESELECT>
		SPI_RxByte();
 8000ac2:	f7ff fb93 	bl	80001ec <SPI_RxByte>
	}

	return res;
 8000ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	372c      	adds	r7, #44	; 0x2c
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000000 	.word	0x20000000

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f001 fb24 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f838 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 fa6c 	bl	8000fc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ae8:	f000 f890 	bl	8000c0c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000aec:	f000 f8cc 	bl	8000c88 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000af0:	f000 f9ce 	bl	8000e90 <MX_TIM2_Init>
  MX_FATFS_Init();
 8000af4:	f004 fef2 	bl	80058dc <MX_FATFS_Init>
  MX_SPI1_Init();
 8000af8:	f000 f8f4 	bl	8000ce4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000afc:	f000 fa14 	bl	8000f28 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b00:	f000 f926 	bl	8000d50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b04:	2104      	movs	r1, #4
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <main+0x74>)
 8000b08:	f004 f82a 	bl	8004b60 <HAL_TIM_PWM_Start>
  SSD1306_Init();
 8000b0c:	f000 fe14 	bl	8001738 <SSD1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* USER CODE END WHILE */
		  switch (opcion) {
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <main+0x78>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d816      	bhi.n	8000b48 <main+0x70>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <main+0x48>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000b37 	.word	0x08000b37
 8000b28:	08000b3d 	.word	0x08000b3d
 8000b2c:	08000b43 	.word	0x08000b43


				 case 1:
							   Show_Menu();
 8000b30:	f000 fb4e 	bl	80011d0 <Show_Menu>
							   break;
 8000b34:	e009      	b.n	8000b4a <main+0x72>
				 case 2:

					 	 	  Run_App();
 8000b36:	f000 fb75 	bl	8001224 <Run_App>

							   // instructions si val=val2
							   break;
 8000b3a:	e006      	b.n	8000b4a <main+0x72>
				 case 3:

					 	 	 DeleteSD();
 8000b3c:	f000 fd9a 	bl	8001674 <DeleteSD>
							 break;
 8000b40:	e003      	b.n	8000b4a <main+0x72>
				 case 4:

					 	 	 Final_Screen();
 8000b42:	f000 fcdf 	bl	8001504 <Final_Screen>
					 	 	 break;
 8000b46:	e000      	b.n	8000b4a <main+0x72>
				 default:


		       // instructions par défaut
		       break;
 8000b48:	bf00      	nop
		  switch (opcion) {
 8000b4a:	e7e1      	b.n	8000b10 <main+0x38>
 8000b4c:	200001a8 	.word	0x200001a8
 8000b50:	2000001e 	.word	0x2000001e

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	; 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	2228      	movs	r2, #40	; 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 fe6e 	bl	8009844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fde0 	bl	8003770 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bb6:	f000 fdb9 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 f84c 	bl	8003c74 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000be2:	f000 fda3 	bl	800172c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be6:	2302      	movs	r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 f9b8 	bl	8003f68 <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f000 fd95 	bl	800172c <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	; 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <MX_ADC1_Init+0x78>)
 8000c20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c4a:	f001 faf3 	bl	8002234 <HAL_ADC_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 fd6a 	bl	800172c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c58:	2309      	movs	r3, #9
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_ADC1_Init+0x74>)
 8000c6a:	f001 fbbb 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c74:	f000 fd5a 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000cc 	.word	0x200000cc
 8000c84:	40012400 	.word	0x40012400

08000c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MX_I2C1_Init+0x54>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <MX_I2C1_Init+0x58>)
 8000c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_I2C1_Init+0x50>)
 8000cc6:	f001 ff89 	bl	8002bdc <HAL_I2C_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f000 fd2c 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000fc 	.word	0x200000fc
 8000cdc:	40005400 	.word	0x40005400
 8000ce0:	00061a80 	.word	0x00061a80

08000ce4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <MX_SPI1_Init+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d30:	220a      	movs	r2, #10
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_SPI1_Init+0x64>)
 8000d36:	f003 f9cd 	bl	80040d4 <HAL_SPI_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d40:	f000 fcf4 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000150 	.word	0x20000150
 8000d4c:	40013000 	.word	0x40013000

08000d50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b096      	sub	sp, #88	; 0x58
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f008 fd5b 	bl	8009844 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000d90:	4a3e      	ldr	r2, [pc, #248]	; (8000e8c <MX_TIM1_Init+0x13c>)
 8000d92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000d94:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000d96:	227f      	movs	r2, #127	; 0x7f
 8000d98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20;
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000da2:	2214      	movs	r2, #20
 8000da4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db8:	4833      	ldr	r0, [pc, #204]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000dba:	f003 fda9 	bl	8004910 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000dc4:	f000 fcb2 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	482c      	ldr	r0, [pc, #176]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000dd6:	f004 f92f 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000de0:	f000 fca4 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000de6:	f003 fe63 	bl	8004ab0 <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000df0:	f000 fc9c 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e00:	4619      	mov	r1, r3
 8000e02:	4821      	ldr	r0, [pc, #132]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000e04:	f004 fca8 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e0e:	f000 fc8d 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2204      	movs	r2, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4814      	ldr	r0, [pc, #80]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000e38:	f004 f83c 	bl	8004eb4 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e42:	f000 fc73 	bl	800172c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000e6a:	f004 fcd3 	bl	8005814 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e74:	f000 fc5a 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <MX_TIM1_Init+0x138>)
 8000e7a:	f001 f863 	bl	8001f44 <HAL_TIM_MspPostInit>

}
 8000e7e:	bf00      	nop
 8000e80:	3758      	adds	r7, #88	; 0x58
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001a8 	.word	0x200001a8
 8000e8c:	40012c00 	.word	0x40012c00

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eb6:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ec4:	22c8      	movs	r2, #200	; 0xc8
 8000ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed6:	f003 fd1b 	bl	8004910 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee0:	f000 fc24 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ef2:	f004 f8a1 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fc16 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000f0e:	f004 fc23 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 fc08 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200001f0 	.word	0x200001f0

08000f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f46:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <MX_TIM3_Init+0x94>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 127;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f4c:	227f      	movs	r2, #127	; 0x7f
 8000f4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f58:	2214      	movs	r2, #20
 8000f5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f6a:	f003 fcd1 	bl	8004910 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000f74:	f000 fbda 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000f86:	f004 f857 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000f90:	f000 fbcc 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM3_Init+0x90>)
 8000fa2:	f004 fbd9 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000fac:	f000 fbbe 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000238 	.word	0x20000238
 8000fbc:	40000400 	.word	0x40000400

08000fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a35      	ldr	r2, [pc, #212]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000ff2:	f043 0320 	orr.w	r3, r3, #32
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <MX_GPIO_Init+0x108>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0320 	and.w	r3, r3, #32
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <MX_GPIO_Init+0x108>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <MX_GPIO_Init+0x108>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <MX_GPIO_Init+0x108>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <MX_GPIO_Init+0x108>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800103a:	4824      	ldr	r0, [pc, #144]	; (80010cc <MX_GPIO_Init+0x10c>)
 800103c:	f001 fd9e 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <MX_GPIO_Init+0x110>)
 8001046:	f001 fd99 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800104a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <MX_GPIO_Init+0x10c>)
 8001064:	f001 fc06 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001068:	2310      	movs	r3, #16
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <MX_GPIO_Init+0x110>)
 8001080:	f001 fbf8 	bl	8002874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8001084:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_GPIO_Init+0x114>)
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <MX_GPIO_Init+0x118>)
 800109a:	f001 fbeb 	bl	8002874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200a      	movs	r0, #10
 80010a4:	f001 fbaf 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f001 fbc8 	bl	800283e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2017      	movs	r0, #23
 80010b4:	f001 fba7 	bl	8002806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010b8:	2017      	movs	r0, #23
 80010ba:	f001 fbc0 	bl	800283e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40011000 	.word	0x40011000
 80010d0:	40010800 	.word	0x40010800
 80010d4:	10110000 	.word	0x10110000
 80010d8:	40010c00 	.word	0x40010c00

080010dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_8 && timeshoot != timerValue) { //MICROFONO
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010ec:	d114      	bne.n	8001118 <HAL_GPIO_EXTI_Callback+0x3c>
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_GPIO_EXTI_Callback+0xd0>)
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_GPIO_EXTI_Callback+0xd4>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d00e      	beq.n	8001118 <HAL_GPIO_EXTI_Callback+0x3c>
		timeshoot =timerValue;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_EXTI_Callback+0xd4>)
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_GPIO_EXTI_Callback+0xd0>)
 8001100:	801a      	strh	r2, [r3, #0]
		SavedTime = timerSecond;
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001108:	801a      	strh	r2, [r3, #0]
		shoot++;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_GPIO_EXTI_Callback+0xe0>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001114:	801a      	strh	r2, [r3, #0]
 8001116:	e045      	b.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>

	    }


	else if (GPIO_Pin == GPIO_PIN_5) {
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	2b20      	cmp	r3, #32
 800111c:	d12a      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0x98>


				if (opcion != 2 && opcion != 4)  { // BOTON DE VOLVER
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d009      	beq.n	800113a <HAL_GPIO_EXTI_Callback+0x5e>
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d005      	beq.n	800113a <HAL_GPIO_EXTI_Callback+0x5e>

							SSD1306_Clear();
 800112e:	f000 fd26 	bl	8001b7e <SSD1306_Clear>

							opcion = 2;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001134:	2202      	movs	r2, #2
 8001136:	801a      	strh	r2, [r3, #0]
 8001138:	e034      	b.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>
							 }


				else if(opcion !=1 && opcion ==2){
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d00c      	beq.n	800115c <HAL_GPIO_EXTI_Callback+0x80>
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	2b02      	cmp	r3, #2
 8001148:	d108      	bne.n	800115c <HAL_GPIO_EXTI_Callback+0x80>
					SSD1306_Clear();
 800114a:	f000 fd18 	bl	8001b7e <SSD1306_Clear>
					HAL_TIM_Base_Stop_IT(&htim2);
 800114e:	481d      	ldr	r0, [pc, #116]	; (80011c4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001150:	f003 fc80 	bl	8004a54 <HAL_TIM_Base_Stop_IT>

					opcion = 4;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001156:	2204      	movs	r2, #4
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	e023      	b.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>



				else {

							SSD1306_Clear();
 800115c:	f000 fd0f 	bl	8001b7e <SSD1306_Clear>
							opcion = 1;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001162:	2201      	movs	r2, #1
 8001164:	801a      	strh	r2, [r3, #0]
							shoot =0;
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_GPIO_EXTI_Callback+0xe0>)
 8001168:	2200      	movs	r2, #0
 800116a:	801a      	strh	r2, [r3, #0]
							FirstTime = true;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_GPIO_EXTI_Callback+0xec>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]



	    }

}
 8001172:	e017      	b.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>
	else if (GPIO_Pin == GPIO_PIN_4) { //BOTON
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	2b10      	cmp	r3, #16
 8001178:	d114      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>
		if(opcion == 3){
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d108      	bne.n	8001194 <HAL_GPIO_EXTI_Callback+0xb8>
			SSD1306_Clear();
 8001182:	f000 fcfc 	bl	8001b7e <SSD1306_Clear>
			opcion = 1;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001188:	2201      	movs	r2, #1
 800118a:	801a      	strh	r2, [r3, #0]
			FirstTimeDelete = true;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_GPIO_EXTI_Callback+0xf0>)
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	e007      	b.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>
		else if (opcion ==1){
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d103      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>
			opcion = 3;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800119e:	2203      	movs	r2, #3
 80011a0:	801a      	strh	r2, [r3, #0]
}
 80011a2:	e7ff      	b.n	80011a4 <HAL_GPIO_EXTI_Callback+0xc8>
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200022e4 	.word	0x200022e4
 80011b0:	200022dc 	.word	0x200022dc
 80011b4:	200022de 	.word	0x200022de
 80011b8:	200022e0 	.word	0x200022e0
 80011bc:	200022e2 	.word	0x200022e2
 80011c0:	2000001e 	.word	0x2000001e
 80011c4:	200001f0 	.word	0x200001f0
 80011c8:	2000001c 	.word	0x2000001c
 80011cc:	20000036 	.word	0x20000036

080011d0 <Show_Menu>:



void Show_Menu(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

	 	 	 	 	  SSD1306_GotoXY(3,5);
 80011d4:	2105      	movs	r1, #5
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 fc16 	bl	8001a08 <SSD1306_GotoXY>
	  	  	  	  	  SSD1306_Puts("TIMER IPSC", &Font_7x10, WHITE);
 80011dc:	2201      	movs	r2, #1
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <Show_Menu+0x44>)
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <Show_Menu+0x48>)
 80011e2:	f000 fca7 	bl	8001b34 <SSD1306_Puts>


	  	  	  	SSD1306_GotoXY(7,25);
 80011e6:	2119      	movs	r1, #25
 80011e8:	2007      	movs	r0, #7
 80011ea:	f000 fc0d 	bl	8001a08 <SSD1306_GotoXY>
	  	  	  		  	  	  	  	  SSD1306_Puts("1.INICIAR", &Font_7x10, WHITE);
 80011ee:	2201      	movs	r2, #1
 80011f0:	4908      	ldr	r1, [pc, #32]	; (8001214 <Show_Menu+0x44>)
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <Show_Menu+0x4c>)
 80011f4:	f000 fc9e 	bl	8001b34 <SSD1306_Puts>
	  	  	  	  	  SSD1306_GotoXY(7,45);
 80011f8:	212d      	movs	r1, #45	; 0x2d
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fc04 	bl	8001a08 <SSD1306_GotoXY>

	  	  	  		  SSD1306_Puts("2.Borrar Datos SD", &Font_7x10, WHITE);
 8001200:	2201      	movs	r2, #1
 8001202:	4904      	ldr	r1, [pc, #16]	; (8001214 <Show_Menu+0x44>)
 8001204:	4806      	ldr	r0, [pc, #24]	; (8001220 <Show_Menu+0x50>)
 8001206:	f000 fc95 	bl	8001b34 <SSD1306_Puts>



	  	  	  	  	  SSD1306_UpdateScreen();
 800120a:	f000 fb59 	bl	80018c0 <SSD1306_UpdateScreen>


}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000004 	.word	0x20000004
 8001218:	0800a180 	.word	0x0800a180
 800121c:	0800a18c 	.word	0x0800a18c
 8001220:	0800a198 	.word	0x0800a198

08001224 <Run_App>:

void Run_App(){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

			if(FirstTime == true){
 8001228:	4b48      	ldr	r3, [pc, #288]	; (800134c <Run_App+0x128>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05f      	beq.n	80012f0 <Run_App+0xcc>
						SSD1306_Clear();
 8001230:	f000 fca5 	bl	8001b7e <SSD1306_Clear>
						FirstTime = false;
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <Run_App+0x128>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
						  SSD1306_GotoXY(3,5);
 800123a:	2105      	movs	r1, #5
 800123c:	2003      	movs	r0, #3
 800123e:	f000 fbe3 	bl	8001a08 <SSD1306_GotoXY>
							SSD1306_Puts("TIMER IPSC", &Font_7x10, WHITE);
 8001242:	2201      	movs	r2, #1
 8001244:	4942      	ldr	r1, [pc, #264]	; (8001350 <Run_App+0x12c>)
 8001246:	4843      	ldr	r0, [pc, #268]	; (8001354 <Run_App+0x130>)
 8001248:	f000 fc74 	bl	8001b34 <SSD1306_Puts>
							HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001252:	4841      	ldr	r0, [pc, #260]	; (8001358 <Run_App+0x134>)
 8001254:	f001 fc92 	bl	8002b7c <HAL_GPIO_WritePin>
							SSD1306_GotoXY(13,30);
 8001258:	211e      	movs	r1, #30
 800125a:	200d      	movs	r0, #13
 800125c:	f000 fbd4 	bl	8001a08 <SSD1306_GotoXY>
							 SSD1306_Puts("Comenzara en 3s", &Font_7x10, BLACK);
 8001260:	2200      	movs	r2, #0
 8001262:	493b      	ldr	r1, [pc, #236]	; (8001350 <Run_App+0x12c>)
 8001264:	483d      	ldr	r0, [pc, #244]	; (800135c <Run_App+0x138>)
 8001266:	f000 fc65 	bl	8001b34 <SSD1306_Puts>

								SSD1306_UpdateScreen();
 800126a:	f000 fb29 	bl	80018c0 <SSD1306_UpdateScreen>
								HAL_TIM_Base_Start_IT(&htim2);
 800126e:	483c      	ldr	r0, [pc, #240]	; (8001360 <Run_App+0x13c>)
 8001270:	f003 fb9e 	bl	80049b0 <HAL_TIM_Base_Start_IT>
								Speaker();
 8001274:	f000 f892 	bl	800139c <Speaker>

								SSD1306_Clear();
 8001278:	f000 fc81 	bl	8001b7e <SSD1306_Clear>


								SSD1306_GotoXY(110,6);
 800127c:	2106      	movs	r1, #6
 800127e:	206e      	movs	r0, #110	; 0x6e
 8001280:	f000 fbc2 	bl	8001a08 <SSD1306_GotoXY>
								sprintf(buf_oled2,"%u",user); //EN BUF_OLED2 GUARDO EL N USUARIO
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <Run_App+0x140>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4937      	ldr	r1, [pc, #220]	; (8001368 <Run_App+0x144>)
 800128c:	4837      	ldr	r0, [pc, #220]	; (800136c <Run_App+0x148>)
 800128e:	f008 fab9 	bl	8009804 <siprintf>
								SSD1306_Puts(buf_oled2, &Font_7x10, BLACK);
 8001292:	2200      	movs	r2, #0
 8001294:	492e      	ldr	r1, [pc, #184]	; (8001350 <Run_App+0x12c>)
 8001296:	4835      	ldr	r0, [pc, #212]	; (800136c <Run_App+0x148>)
 8001298:	f000 fc4c 	bl	8001b34 <SSD1306_Puts>

								SSD1306_UpdateScreen();
 800129c:	f000 fb10 	bl	80018c0 <SSD1306_UpdateScreen>
								SSD1306_GotoXY(55,6);
 80012a0:	2106      	movs	r1, #6
 80012a2:	2037      	movs	r0, #55	; 0x37
 80012a4:	f000 fbb0 	bl	8001a08 <SSD1306_GotoXY>
								SSD1306_Puts("JUGADOR:", &Font_7x10, BLACK);
 80012a8:	2200      	movs	r2, #0
 80012aa:	4929      	ldr	r1, [pc, #164]	; (8001350 <Run_App+0x12c>)
 80012ac:	4830      	ldr	r0, [pc, #192]	; (8001370 <Run_App+0x14c>)
 80012ae:	f000 fc41 	bl	8001b34 <SSD1306_Puts>
								SSD1306_GotoXY(48,35);
 80012b2:	2123      	movs	r1, #35	; 0x23
 80012b4:	2030      	movs	r0, #48	; 0x30
 80012b6:	f000 fba7 	bl	8001a08 <SSD1306_GotoXY>
								SSD1306_Puts("DISPAROS: ", &Font_7x10, BLACK);
 80012ba:	2200      	movs	r2, #0
 80012bc:	4924      	ldr	r1, [pc, #144]	; (8001350 <Run_App+0x12c>)
 80012be:	482d      	ldr	r0, [pc, #180]	; (8001374 <Run_App+0x150>)
 80012c0:	f000 fc38 	bl	8001b34 <SSD1306_Puts>

								SSD1306_UpdateScreen();
 80012c4:	f000 fafc 	bl	80018c0 <SSD1306_UpdateScreen>

								UserSave();
 80012c8:	f000 f8e8 	bl	800149c <UserSave>

								user++;
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <Run_App+0x140>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <Run_App+0x140>)
 80012d6:	701a      	strb	r2, [r3, #0]

								SD = 0;
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <Run_App+0x154>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
								SavedTime = 0;
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <Run_App+0x158>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
								timerValue = 0;
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <Run_App+0x15c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	801a      	strh	r2, [r3, #0]
								shoot = 0;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <Run_App+0x160>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
			}



 timerSecond = timerValue/10;
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <Run_App+0x15c>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <Run_App+0x164>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <Run_App+0x168>)
 8001300:	801a      	strh	r2, [r3, #0]


	SSD1306_GotoXY(5,20);
 8001302:	2114      	movs	r1, #20
 8001304:	2005      	movs	r0, #5
 8001306:	f000 fb7f 	bl	8001a08 <SSD1306_GotoXY>
    sprintf(buf_oled,"%u",timerSecond);
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <Run_App+0x168>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4915      	ldr	r1, [pc, #84]	; (8001368 <Run_App+0x144>)
 8001312:	481f      	ldr	r0, [pc, #124]	; (8001390 <Run_App+0x16c>)
 8001314:	f008 fa76 	bl	8009804 <siprintf>
    SSD1306_Puts(buf_oled, &Font_16x26, WHITE);
 8001318:	2201      	movs	r2, #1
 800131a:	491e      	ldr	r1, [pc, #120]	; (8001394 <Run_App+0x170>)
 800131c:	481c      	ldr	r0, [pc, #112]	; (8001390 <Run_App+0x16c>)
 800131e:	f000 fc09 	bl	8001b34 <SSD1306_Puts>





    SSD1306_GotoXY(110,35);
 8001322:	2123      	movs	r1, #35	; 0x23
 8001324:	206e      	movs	r0, #110	; 0x6e
 8001326:	f000 fb6f 	bl	8001a08 <SSD1306_GotoXY>
    sprintf(buf_shoot,"%u",shoot);   //ACA GUARDO LOS DISPAROS
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <Run_App+0x160>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	490d      	ldr	r1, [pc, #52]	; (8001368 <Run_App+0x144>)
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <Run_App+0x174>)
 8001334:	f008 fa66 	bl	8009804 <siprintf>
    SSD1306_Puts(buf_shoot, &Font_7x10, BLACK);
 8001338:	2200      	movs	r2, #0
 800133a:	4905      	ldr	r1, [pc, #20]	; (8001350 <Run_App+0x12c>)
 800133c:	4816      	ldr	r0, [pc, #88]	; (8001398 <Run_App+0x174>)
 800133e:	f000 fbf9 	bl	8001b34 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001342:	f000 fabd 	bl	80018c0 <SSD1306_UpdateScreen>





}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000001c 	.word	0x2000001c
 8001350:	20000004 	.word	0x20000004
 8001354:	0800a180 	.word	0x0800a180
 8001358:	40011000 	.word	0x40011000
 800135c:	0800a1ac 	.word	0x0800a1ac
 8001360:	200001f0 	.word	0x200001f0
 8001364:	20000035 	.word	0x20000035
 8001368:	0800a1bc 	.word	0x0800a1bc
 800136c:	20000028 	.word	0x20000028
 8001370:	0800a1c0 	.word	0x0800a1c0
 8001374:	0800a1cc 	.word	0x0800a1cc
 8001378:	200022e6 	.word	0x200022e6
 800137c:	200022e0 	.word	0x200022e0
 8001380:	200022dc 	.word	0x200022dc
 8001384:	200022e2 	.word	0x200022e2
 8001388:	cccccccd 	.word	0xcccccccd
 800138c:	200022de 	.word	0x200022de
 8001390:	20000020 	.word	0x20000020
 8001394:	20000014 	.word	0x20000014
 8001398:	20000030 	.word	0x20000030

0800139c <Speaker>:

void Speaker(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0


	__HAL_TIM_SET_AUTORELOAD(&htim1, 600);
 80013a0:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <Speaker+0xf8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80013aa:	4b3a      	ldr	r3, [pc, #232]	; (8001494 <Speaker+0xf8>)
 80013ac:	f44f 7216 	mov.w	r2, #600	; 0x258
 80013b0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80); // Duty cycle al 25%
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <Speaker+0xf8>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2250      	movs	r2, #80	; 0x50
 80013b8:	639a      	str	r2, [r3, #56]	; 0x38



	 HAL_Delay(1000); // Espera durante 1 segundo
 80013ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013be:	f000 ff15 	bl	80021ec <HAL_Delay>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c8:	4833      	ldr	r0, [pc, #204]	; (8001498 <Speaker+0xfc>)
 80013ca:	f001 fbd7 	bl	8002b7c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_AUTORELOAD(&htim1, 1000);
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <Speaker+0xf8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <Speaker+0xf8>)
 80013da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013de:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <Speaker+0xf8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f000 fefe 	bl	80021ec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	4828      	ldr	r0, [pc, #160]	; (8001498 <Speaker+0xfc>)
 80013f8:	f001 fbc0 	bl	8002b7c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_AUTORELOAD(&htim1, 600);
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <Speaker+0xf8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <Speaker+0xf8>)
 8001408:	f44f 7216 	mov.w	r2, #600	; 0x258
 800140c:	60da      	str	r2, [r3, #12]
	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80); // Duty cycle al 25%
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <Speaker+0xf8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2250      	movs	r2, #80	; 0x50
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000); // Espera durante 1 segundo
 8001416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141a:	f000 fee7 	bl	80021ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001424:	481c      	ldr	r0, [pc, #112]	; (8001498 <Speaker+0xfc>)
 8001426:	f001 fba9 	bl	8002b7c <HAL_GPIO_WritePin>

	__HAL_TIM_SET_AUTORELOAD(&htim1, 1000);
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <Speaker+0xf8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <Speaker+0xf8>)
 8001436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800143a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <Speaker+0xf8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(1000);
 8001444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001448:	f000 fed0 	bl	80021ec <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <Speaker+0xfc>)
 8001454:	f001 fb92 	bl	8002b7c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 80); // Duty cycle al 25%
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <Speaker+0xf8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2250      	movs	r2, #80	; 0x50
 800145e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000); // Espera durante 1 segundo
 8001460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001464:	f000 fec2 	bl	80021ec <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <Speaker+0xfc>)
 8001470:	f001 fb84 	bl	8002b7c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_AUTORELOAD(&htim1, 1000);
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <Speaker+0xf8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <Speaker+0xf8>)
 8001480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001484:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <Speaker+0xf8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2200      	movs	r2, #0
 800148c:	639a      	str	r2, [r3, #56]	; 0x38



}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001a8 	.word	0x200001a8
 8001498:	40011000 	.word	0x40011000

0800149c <UserSave>:

void UserSave(){
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

											f_mount(&fs, "", 0);  //prepara la tarjeta de memoria o el dispositivo de almacenamiento para su uso.
 80014a0:	2200      	movs	r2, #0
 80014a2:	4911      	ldr	r1, [pc, #68]	; (80014e8 <UserSave+0x4c>)
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <UserSave+0x50>)
 80014a6:	f006 feef 	bl	8008288 <f_mount>
	  										 f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80014aa:	2213      	movs	r2, #19
 80014ac:	4910      	ldr	r1, [pc, #64]	; (80014f0 <UserSave+0x54>)
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <UserSave+0x58>)
 80014b0:	f006 ff34 	bl	800831c <f_open>
	  										 f_lseek(&fil, fil.fsize);  // // Esta línea de código ajusta la posición del puntero de lectura/escritura en el archivo al final del archivo actual.
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <UserSave+0x58>)
 80014b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <UserSave+0x58>)
 80014c0:	f007 fd76 	bl	8008fb0 <f_lseek>
	  										 f_puts("JUGARDOR NUM: ", &fil);
 80014c4:	490b      	ldr	r1, [pc, #44]	; (80014f4 <UserSave+0x58>)
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <UserSave+0x5c>)
 80014c8:	f008 f8a0 	bl	800960c <f_puts>
	  										f_puts(buf_oled2, &fil);
 80014cc:	4909      	ldr	r1, [pc, #36]	; (80014f4 <UserSave+0x58>)
 80014ce:	480b      	ldr	r0, [pc, #44]	; (80014fc <UserSave+0x60>)
 80014d0:	f008 f89c 	bl	800960c <f_puts>
	  										f_puts("-\n ", &fil);
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <UserSave+0x58>)
 80014d6:	480a      	ldr	r0, [pc, #40]	; (8001500 <UserSave+0x64>)
 80014d8:	f008 f898 	bl	800960c <f_puts>
	  										 f_close(&fil);
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <UserSave+0x58>)
 80014de:	f007 fd3c 	bl	8008f5a <f_close>


}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	0800a1d8 	.word	0x0800a1d8
 80014ec:	20000280 	.word	0x20000280
 80014f0:	0800a1dc 	.word	0x0800a1dc
 80014f4:	200012b0 	.word	0x200012b0
 80014f8:	0800a1e8 	.word	0x0800a1e8
 80014fc:	20000028 	.word	0x20000028
 8001500:	0800a1f8 	.word	0x0800a1f8

08001504 <Final_Screen>:

void Final_Screen(){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0




	   	SSD1306_GotoXY(2,5);
 8001508:	2105      	movs	r1, #5
 800150a:	2002      	movs	r0, #2
 800150c:	f000 fa7c 	bl	8001a08 <SSD1306_GotoXY>
	    SSD1306_Puts("Final_Juego", &Font_11x18, BLACK);
 8001510:	2200      	movs	r2, #0
 8001512:	4923      	ldr	r1, [pc, #140]	; (80015a0 <Final_Screen+0x9c>)
 8001514:	4823      	ldr	r0, [pc, #140]	; (80015a4 <Final_Screen+0xa0>)
 8001516:	f000 fb0d 	bl	8001b34 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 800151a:	f000 f9d1 	bl	80018c0 <SSD1306_UpdateScreen>


	    SSD1306_GotoXY(2,30);
 800151e:	211e      	movs	r1, #30
 8001520:	2002      	movs	r0, #2
 8001522:	f000 fa71 	bl	8001a08 <SSD1306_GotoXY>
	    SSD1306_Puts("TIEMPO", &Font_7x10, WHITE);
 8001526:	2201      	movs	r2, #1
 8001528:	491f      	ldr	r1, [pc, #124]	; (80015a8 <Final_Screen+0xa4>)
 800152a:	4820      	ldr	r0, [pc, #128]	; (80015ac <Final_Screen+0xa8>)
 800152c:	f000 fb02 	bl	8001b34 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 8001530:	f000 f9c6 	bl	80018c0 <SSD1306_UpdateScreen>

	    SSD1306_GotoXY(2,45);
 8001534:	212d      	movs	r1, #45	; 0x2d
 8001536:	2002      	movs	r0, #2
 8001538:	f000 fa66 	bl	8001a08 <SSD1306_GotoXY>
	 	SSD1306_Puts("DISPAROS:", &Font_7x10, WHITE);
 800153c:	2201      	movs	r2, #1
 800153e:	491a      	ldr	r1, [pc, #104]	; (80015a8 <Final_Screen+0xa4>)
 8001540:	481b      	ldr	r0, [pc, #108]	; (80015b0 <Final_Screen+0xac>)
 8001542:	f000 faf7 	bl	8001b34 <SSD1306_Puts>


	    SSD1306_GotoXY(59,45);
 8001546:	212d      	movs	r1, #45	; 0x2d
 8001548:	203b      	movs	r0, #59	; 0x3b
 800154a:	f000 fa5d 	bl	8001a08 <SSD1306_GotoXY>
	 	SSD1306_Puts(buf_shoot, &Font_7x10, WHITE);
 800154e:	2201      	movs	r2, #1
 8001550:	4915      	ldr	r1, [pc, #84]	; (80015a8 <Final_Screen+0xa4>)
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <Final_Screen+0xb0>)
 8001554:	f000 faee 	bl	8001b34 <SSD1306_Puts>


		SSD1306_GotoXY(60,30);
 8001558:	211e      	movs	r1, #30
 800155a:	203c      	movs	r0, #60	; 0x3c
 800155c:	f000 fa54 	bl	8001a08 <SSD1306_GotoXY>
		sprintf(buf_oled2,"%u",SavedTime); //EN BUF_OLED2 AHORA VOY A GUARDAR EL TIEMPO
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <Final_Screen+0xb4>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4915      	ldr	r1, [pc, #84]	; (80015bc <Final_Screen+0xb8>)
 8001568:	4815      	ldr	r0, [pc, #84]	; (80015c0 <Final_Screen+0xbc>)
 800156a:	f008 f94b 	bl	8009804 <siprintf>
		SSD1306_Puts(buf_oled2, &Font_7x10, WHITE);
 800156e:	2201      	movs	r2, #1
 8001570:	490d      	ldr	r1, [pc, #52]	; (80015a8 <Final_Screen+0xa4>)
 8001572:	4813      	ldr	r0, [pc, #76]	; (80015c0 <Final_Screen+0xbc>)
 8001574:	f000 fade 	bl	8001b34 <SSD1306_Puts>





	    SSD1306_UpdateScreen();
 8001578:	f000 f9a2 	bl	80018c0 <SSD1306_UpdateScreen>


		if(SD==0){
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <Final_Screen+0xc0>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d104      	bne.n	800158e <Final_Screen+0x8a>
			SD = 1;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <Final_Screen+0xc0>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
			SaveGameSD();
 800158a:	f000 f81f 	bl	80015cc <SaveGameSD>
		}


	    if(opcion ==1){
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <Final_Screen+0xc4>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d101      	bne.n	800159a <Final_Screen+0x96>

	    	SSD1306_Clear();
 8001596:	f000 faf2 	bl	8001b7e <SSD1306_Clear>
	    }




}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	0800a1fc 	.word	0x0800a1fc
 80015a8:	20000004 	.word	0x20000004
 80015ac:	0800a208 	.word	0x0800a208
 80015b0:	0800a210 	.word	0x0800a210
 80015b4:	20000030 	.word	0x20000030
 80015b8:	200022e0 	.word	0x200022e0
 80015bc:	0800a1bc 	.word	0x0800a1bc
 80015c0:	20000028 	.word	0x20000028
 80015c4:	200022e6 	.word	0x200022e6
 80015c8:	2000001e 	.word	0x2000001e

080015cc <SaveGameSD>:

void SaveGameSD(){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0



	f_mount(&fs, "", 0);  //prepara la tarjeta de memoria o el dispositivo de almacenamiento para su uso.
 80015d0:	2200      	movs	r2, #0
 80015d2:	491d      	ldr	r1, [pc, #116]	; (8001648 <SaveGameSD+0x7c>)
 80015d4:	481d      	ldr	r0, [pc, #116]	; (800164c <SaveGameSD+0x80>)
 80015d6:	f006 fe57 	bl	8008288 <f_mount>
	f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 80015da:	2213      	movs	r2, #19
 80015dc:	491c      	ldr	r1, [pc, #112]	; (8001650 <SaveGameSD+0x84>)
 80015de:	481d      	ldr	r0, [pc, #116]	; (8001654 <SaveGameSD+0x88>)
 80015e0:	f006 fe9c 	bl	800831c <f_open>
	f_lseek(&fil, fil.fsize);  // // Esta línea de código ajusta la posición del puntero de lectura/escritura en el archivo al final del archivo actual.
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <SaveGameSD+0x88>)
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4619      	mov	r1, r3
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <SaveGameSD+0x88>)
 80015f0:	f007 fcde 	bl	8008fb0 <f_lseek>
	f_puts("Tiempo ", &fil);
 80015f4:	4917      	ldr	r1, [pc, #92]	; (8001654 <SaveGameSD+0x88>)
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <SaveGameSD+0x8c>)
 80015f8:	f008 f808 	bl	800960c <f_puts>
	f_puts(buf_oled2, &fil);
 80015fc:	4915      	ldr	r1, [pc, #84]	; (8001654 <SaveGameSD+0x88>)
 80015fe:	4817      	ldr	r0, [pc, #92]	; (800165c <SaveGameSD+0x90>)
 8001600:	f008 f804 	bl	800960c <f_puts>
	f_puts(" Segundos ", &fil);
 8001604:	4913      	ldr	r1, [pc, #76]	; (8001654 <SaveGameSD+0x88>)
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <SaveGameSD+0x94>)
 8001608:	f008 f800 	bl	800960c <f_puts>

	f_puts("\n", &fil);
 800160c:	4911      	ldr	r1, [pc, #68]	; (8001654 <SaveGameSD+0x88>)
 800160e:	4815      	ldr	r0, [pc, #84]	; (8001664 <SaveGameSD+0x98>)
 8001610:	f007 fffc 	bl	800960c <f_puts>
	f_puts("Disparos ", &fil);
 8001614:	490f      	ldr	r1, [pc, #60]	; (8001654 <SaveGameSD+0x88>)
 8001616:	4814      	ldr	r0, [pc, #80]	; (8001668 <SaveGameSD+0x9c>)
 8001618:	f007 fff8 	bl	800960c <f_puts>
	f_puts(buf_shoot, &fil);
 800161c:	490d      	ldr	r1, [pc, #52]	; (8001654 <SaveGameSD+0x88>)
 800161e:	4813      	ldr	r0, [pc, #76]	; (800166c <SaveGameSD+0xa0>)
 8001620:	f007 fff4 	bl	800960c <f_puts>


	f_puts("\n", &fil);
 8001624:	490b      	ldr	r1, [pc, #44]	; (8001654 <SaveGameSD+0x88>)
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <SaveGameSD+0x98>)
 8001628:	f007 fff0 	bl	800960c <f_puts>
	f_puts("Puntaje ", &fil);
 800162c:	4909      	ldr	r1, [pc, #36]	; (8001654 <SaveGameSD+0x88>)
 800162e:	4810      	ldr	r0, [pc, #64]	; (8001670 <SaveGameSD+0xa4>)
 8001630:	f007 ffec 	bl	800960c <f_puts>

	f_puts("\n", &fil);
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <SaveGameSD+0x88>)
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <SaveGameSD+0x98>)
 8001638:	f007 ffe8 	bl	800960c <f_puts>
	f_close(&fil);
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <SaveGameSD+0x88>)
 800163e:	f007 fc8c 	bl	8008f5a <f_close>





}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	0800a1d8 	.word	0x0800a1d8
 800164c:	20000280 	.word	0x20000280
 8001650:	0800a1dc 	.word	0x0800a1dc
 8001654:	200012b0 	.word	0x200012b0
 8001658:	0800a21c 	.word	0x0800a21c
 800165c:	20000028 	.word	0x20000028
 8001660:	0800a224 	.word	0x0800a224
 8001664:	0800a230 	.word	0x0800a230
 8001668:	0800a234 	.word	0x0800a234
 800166c:	20000030 	.word	0x20000030
 8001670:	0800a240 	.word	0x0800a240

08001674 <DeleteSD>:

void DeleteSD(){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0


	if(FirstTimeDelete == true){
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <DeleteSD+0x68>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d011      	beq.n	80016a4 <DeleteSD+0x30>
		SSD1306_Clear();
 8001680:	f000 fa7d 	bl	8001b7e <SSD1306_Clear>
		f_mount(&fs, "", 0);
 8001684:	2200      	movs	r2, #0
 8001686:	4916      	ldr	r1, [pc, #88]	; (80016e0 <DeleteSD+0x6c>)
 8001688:	4816      	ldr	r0, [pc, #88]	; (80016e4 <DeleteSD+0x70>)
 800168a:	f006 fdfd 	bl	8008288 <f_mount>
		f_open(&fil, "write.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800168e:	220a      	movs	r2, #10
 8001690:	4915      	ldr	r1, [pc, #84]	; (80016e8 <DeleteSD+0x74>)
 8001692:	4816      	ldr	r0, [pc, #88]	; (80016ec <DeleteSD+0x78>)
 8001694:	f006 fe42 	bl	800831c <f_open>
		f_close(&fil);
 8001698:	4814      	ldr	r0, [pc, #80]	; (80016ec <DeleteSD+0x78>)
 800169a:	f007 fc5e 	bl	8008f5a <f_close>
		FirstTimeDelete = false;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <DeleteSD+0x68>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]


	}

	SSD1306_GotoXY(3,5);
 80016a4:	2105      	movs	r1, #5
 80016a6:	2003      	movs	r0, #3
 80016a8:	f000 f9ae 	bl	8001a08 <SSD1306_GotoXY>
	SSD1306_Puts("TIMER IPSC", &Font_7x10, WHITE);
 80016ac:	2201      	movs	r2, #1
 80016ae:	4910      	ldr	r1, [pc, #64]	; (80016f0 <DeleteSD+0x7c>)
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <DeleteSD+0x80>)
 80016b2:	f000 fa3f 	bl	8001b34 <SSD1306_Puts>

	SSD1306_GotoXY(8,35);
 80016b6:	2123      	movs	r1, #35	; 0x23
 80016b8:	2008      	movs	r0, #8
 80016ba:	f000 f9a5 	bl	8001a08 <SSD1306_GotoXY>
	SSD1306_Puts("DATOS ELIMINADOS: ", &Font_7x10, BLACK);
 80016be:	2200      	movs	r2, #0
 80016c0:	490b      	ldr	r1, [pc, #44]	; (80016f0 <DeleteSD+0x7c>)
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <DeleteSD+0x84>)
 80016c4:	f000 fa36 	bl	8001b34 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80016c8:	f000 f8fa 	bl	80018c0 <SSD1306_UpdateScreen>


	if(opcion ==1){
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <DeleteSD+0x88>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d101      	bne.n	80016d8 <DeleteSD+0x64>

		    	SSD1306_Clear();
 80016d4:	f000 fa53 	bl	8001b7e <SSD1306_Clear>
		    }

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000036 	.word	0x20000036
 80016e0:	0800a1d8 	.word	0x0800a1d8
 80016e4:	20000280 	.word	0x20000280
 80016e8:	0800a1dc 	.word	0x0800a1dc
 80016ec:	200012b0 	.word	0x200012b0
 80016f0:	20000004 	.word	0x20000004
 80016f4:	0800a180 	.word	0x0800a180
 80016f8:	0800a24c 	.word	0x0800a24c
 80016fc:	2000001e 	.word	0x2000001e

08001700 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001710:	d105      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x1e>
        timerValue++; // Incrementa el tiempo transcurrido cada vez que se llama esta función de callback.
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800171c:	801a      	strh	r2, [r3, #0]
    }
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	200022dc 	.word	0x200022dc

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 800173e:	f000 fa27 	bl	8001b90 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8001742:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001746:	2201      	movs	r2, #1
 8001748:	2178      	movs	r1, #120	; 0x78
 800174a:	485b      	ldr	r0, [pc, #364]	; (80018b8 <SSD1306_Init+0x180>)
 800174c:	f001 fc88 	bl	8003060 <HAL_I2C_IsDeviceReady>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SSD1306_Init+0x22>
		return 0;
 8001756:	2300      	movs	r3, #0
 8001758:	e0a9      	b.n	80018ae <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 800175a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800175e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001760:	e002      	b.n	8001768 <SSD1306_Init+0x30>
		p--;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3b01      	subs	r3, #1
 8001766:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f9      	bne.n	8001762 <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 800176e:	22ae      	movs	r2, #174	; 0xae
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fa86 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001778:	2220      	movs	r2, #32
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 fa81 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001782:	2210      	movs	r2, #16
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 fa7c 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 800178c:	22b0      	movs	r2, #176	; 0xb0
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	; 0x78
 8001792:	f000 fa77 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001796:	22c8      	movs	r2, #200	; 0xc8
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f000 fa72 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	; 0x78
 80017a6:	f000 fa6d 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80017aa:	2210      	movs	r2, #16
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fa68 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80017b4:	2240      	movs	r2, #64	; 0x40
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f000 fa63 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80017be:	2281      	movs	r2, #129	; 0x81
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f000 fa5e 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	; 0x78
 80017ce:	f000 fa59 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80017d2:	22a1      	movs	r2, #161	; 0xa1
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	; 0x78
 80017d8:	f000 fa54 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80017dc:	22a6      	movs	r2, #166	; 0xa6
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	; 0x78
 80017e2:	f000 fa4f 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 80017e6:	22a8      	movs	r2, #168	; 0xa8
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	; 0x78
 80017ec:	f000 fa4a 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80017f0:	223f      	movs	r2, #63	; 0x3f
 80017f2:	2100      	movs	r1, #0
 80017f4:	2078      	movs	r0, #120	; 0x78
 80017f6:	f000 fa45 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80017fa:	22a4      	movs	r2, #164	; 0xa4
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 fa40 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8001804:	22d3      	movs	r2, #211	; 0xd3
 8001806:	2100      	movs	r1, #0
 8001808:	2078      	movs	r0, #120	; 0x78
 800180a:	f000 fa3b 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	; 0x78
 8001814:	f000 fa36 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8001818:	22d5      	movs	r2, #213	; 0xd5
 800181a:	2100      	movs	r1, #0
 800181c:	2078      	movs	r0, #120	; 0x78
 800181e:	f000 fa31 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001822:	22f0      	movs	r2, #240	; 0xf0
 8001824:	2100      	movs	r1, #0
 8001826:	2078      	movs	r0, #120	; 0x78
 8001828:	f000 fa2c 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 800182c:	22d9      	movs	r2, #217	; 0xd9
 800182e:	2100      	movs	r1, #0
 8001830:	2078      	movs	r0, #120	; 0x78
 8001832:	f000 fa27 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001836:	2222      	movs	r2, #34	; 0x22
 8001838:	2100      	movs	r1, #0
 800183a:	2078      	movs	r0, #120	; 0x78
 800183c:	f000 fa22 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001840:	22da      	movs	r2, #218	; 0xda
 8001842:	2100      	movs	r1, #0
 8001844:	2078      	movs	r0, #120	; 0x78
 8001846:	f000 fa1d 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800184a:	2212      	movs	r2, #18
 800184c:	2100      	movs	r1, #0
 800184e:	2078      	movs	r0, #120	; 0x78
 8001850:	f000 fa18 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001854:	22db      	movs	r2, #219	; 0xdb
 8001856:	2100      	movs	r1, #0
 8001858:	2078      	movs	r0, #120	; 0x78
 800185a:	f000 fa13 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800185e:	2220      	movs	r2, #32
 8001860:	2100      	movs	r1, #0
 8001862:	2078      	movs	r0, #120	; 0x78
 8001864:	f000 fa0e 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001868:	228d      	movs	r2, #141	; 0x8d
 800186a:	2100      	movs	r1, #0
 800186c:	2078      	movs	r0, #120	; 0x78
 800186e:	f000 fa09 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001872:	2214      	movs	r2, #20
 8001874:	2100      	movs	r1, #0
 8001876:	2078      	movs	r0, #120	; 0x78
 8001878:	f000 fa04 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800187c:	22af      	movs	r2, #175	; 0xaf
 800187e:	2100      	movs	r1, #0
 8001880:	2078      	movs	r0, #120	; 0x78
 8001882:	f000 f9ff 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001886:	222e      	movs	r2, #46	; 0x2e
 8001888:	2100      	movs	r1, #0
 800188a:	2078      	movs	r0, #120	; 0x78
 800188c:	f000 f9fa 	bl	8001c84 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 f843 	bl	800191c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001896:	f000 f813 	bl	80018c0 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <SSD1306_Init+0x184>)
 800189c:	2200      	movs	r2, #0
 800189e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <SSD1306_Init+0x184>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <SSD1306_Init+0x184>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	715a      	strb	r2, [r3, #5]
	return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000fc 	.word	0x200000fc
 80018bc:	200026e8 	.word	0x200026e8

080018c0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	e01d      	b.n	8001908 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3b50      	subs	r3, #80	; 0x50
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	2078      	movs	r0, #120	; 0x78
 80018d8:	f000 f9d4 	bl	8001c84 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2078      	movs	r0, #120	; 0x78
 80018e2:	f000 f9cf 	bl	8001c84 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018e6:	2210      	movs	r2, #16
 80018e8:	2100      	movs	r1, #0
 80018ea:	2078      	movs	r0, #120	; 0x78
 80018ec:	f000 f9ca 	bl	8001c84 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	4a08      	ldr	r2, [pc, #32]	; (8001918 <SSD1306_UpdateScreen+0x58>)
 80018f6:	441a      	add	r2, r3
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	2078      	movs	r0, #120	; 0x78
 80018fe:	f000 f95b 	bl	8001bb8 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	3301      	adds	r3, #1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b07      	cmp	r3, #7
 800190c:	d9de      	bls.n	80018cc <SSD1306_UpdateScreen+0xc>
	}
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200022e8 	.word	0x200022e8

0800191c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <SSD1306_Fill+0x14>
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <SSD1306_Fill+0x16>
 8001930:	23ff      	movs	r3, #255	; 0xff
 8001932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001936:	4619      	mov	r1, r3
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <SSD1306_Fill+0x2c>)
 800193a:	f007 ff83 	bl	8009844 <memset>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200022e8 	.word	0x200022e8

0800194c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	460b      	mov	r3, r1
 8001958:	80bb      	strh	r3, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b7f      	cmp	r3, #127	; 0x7f
 8001962:	d848      	bhi.n	80019f6 <SSD1306_DrawPixel+0xaa>
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	2b3f      	cmp	r3, #63	; 0x3f
 8001968:	d845      	bhi.n	80019f6 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <SSD1306_DrawPixel+0xb4>)
 800196c:	791b      	ldrb	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d11a      	bne.n	80019bc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	08db      	lsrs	r3, r3, #3
 800198c:	b298      	uxth	r0, r3
 800198e:	4603      	mov	r3, r0
 8001990:	01db      	lsls	r3, r3, #7
 8001992:	4413      	add	r3, r2
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <SSD1306_DrawPixel+0xb8>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	b25a      	sxtb	r2, r3
 800199a:	88bb      	ldrh	r3, [r7, #4]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b259      	sxtb	r1, r3
 80019ac:	88fa      	ldrh	r2, [r7, #6]
 80019ae:	4603      	mov	r3, r0
 80019b0:	01db      	lsls	r3, r3, #7
 80019b2:	4413      	add	r3, r2
 80019b4:	b2c9      	uxtb	r1, r1
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <SSD1306_DrawPixel+0xb8>)
 80019b8:	54d1      	strb	r1, [r2, r3]
 80019ba:	e01d      	b.n	80019f8 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019bc:	88fa      	ldrh	r2, [r7, #6]
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	08db      	lsrs	r3, r3, #3
 80019c2:	b298      	uxth	r0, r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	01db      	lsls	r3, r3, #7
 80019c8:	4413      	add	r3, r2
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <SSD1306_DrawPixel+0xb8>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	b25a      	sxtb	r2, r3
 80019d0:	88bb      	ldrh	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	2101      	movs	r1, #1
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	4013      	ands	r3, r2
 80019e4:	b259      	sxtb	r1, r3
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	4603      	mov	r3, r0
 80019ea:	01db      	lsls	r3, r3, #7
 80019ec:	4413      	add	r3, r2
 80019ee:	b2c9      	uxtb	r1, r1
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <SSD1306_DrawPixel+0xb8>)
 80019f2:	54d1      	strb	r1, [r2, r3]
 80019f4:	e000      	b.n	80019f8 <SSD1306_DrawPixel+0xac>
		return;
 80019f6:	bf00      	nop
	}
}
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	200026e8 	.word	0x200026e8
 8001a04:	200022e8 	.word	0x200022e8

08001a08 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	460a      	mov	r2, r1
 8001a12:	80fb      	strh	r3, [r7, #6]
 8001a14:	4613      	mov	r3, r2
 8001a16:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SSD1306_GotoXY+0x28>)
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <SSD1306_GotoXY+0x28>)
 8001a20:	88bb      	ldrh	r3, [r7, #4]
 8001a22:	8053      	strh	r3, [r2, #2]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200026e8 	.word	0x200026e8

08001a34 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8001a44:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	2b7f      	cmp	r3, #127	; 0x7f
 8001a52:	dc07      	bgt.n	8001a64 <SSD1306_Putc+0x30>
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001a56:	885b      	ldrh	r3, [r3, #2]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	785b      	ldrb	r3, [r3, #1]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2b3f      	cmp	r3, #63	; 0x3f
 8001a62:	dd01      	ble.n	8001a68 <SSD1306_Putc+0x34>
		return 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e05e      	b.n	8001b26 <SSD1306_Putc+0xf2>
	}

	for(i=0; i<Font->FontHeight; i++){
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e04b      	b.n	8001b06 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	3b20      	subs	r3, #32
 8001a76:	6839      	ldr	r1, [r7, #0]
 8001a78:	7849      	ldrb	r1, [r1, #1]
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	440b      	add	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e030      	b.n	8001af4 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d010      	beq.n	8001ac4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001aa2:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	b298      	uxth	r0, r3
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001ab0:	885a      	ldrh	r2, [r3, #2]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	79ba      	ldrb	r2, [r7, #6]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff ff45 	bl	800194c <SSD1306_DrawPixel>
 8001ac2:	e014      	b.n	8001aee <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	b298      	uxth	r0, r3
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001ad2:	885a      	ldrh	r2, [r3, #2]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	b299      	uxth	r1, r3
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f7ff ff2f 	bl	800194c <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	3301      	adds	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d3c8      	bcc.n	8001a92 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	785b      	ldrb	r3, [r3, #1]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d3ad      	bcc.n	8001a6e <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <SSD1306_Putc+0xfc>)
 8001b22:	801a      	strh	r2, [r3, #0]
	return ch;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200026e8 	.word	0x200026e8

08001b34 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8001b42:	e012      	b.n	8001b6a <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff71 	bl	8001a34 <SSD1306_Putc>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d002      	beq.n	8001b64 <SSD1306_Puts+0x30>
			return *str;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	e008      	b.n	8001b76 <SSD1306_Puts+0x42>
		}
		str++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
	while(*str)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1e8      	bne.n	8001b44 <SSD1306_Puts+0x10>
	}
	return *str;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	781b      	ldrb	r3, [r3, #0]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <SSD1306_Clear>:
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}

void SSD1306_Clear(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff feca 	bl	800191c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b88:	f7ff fe9a 	bl	80018c0 <SSD1306_UpdateScreen>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <SSD1306_I2C_Init+0x24>)
 8001b98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b9a:	e002      	b.n	8001ba2 <SSD1306_I2C_Init+0x12>
		p--;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <SSD1306_I2C_Init+0xc>
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	0003d090 	.word	0x0003d090

08001bb8 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b0c7      	sub	sp, #284	; 0x11c
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001bc6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001bca:	600a      	str	r2, [r1, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bde:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001be2:	4602      	mov	r2, r0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bee:	460a      	mov	r2, r1
 8001bf0:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001bf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bfe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001c02:	7812      	ldrb	r2, [r2, #0]
 8001c04:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c0c:	e015      	b.n	8001c3a <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8001c0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c16:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c22:	3301      	adds	r3, #1
 8001c24:	7811      	ldrb	r1, [r2, #0]
 8001c26:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c2a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001c2e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001c30:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c34:	3301      	adds	r3, #1
 8001c36:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c44:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d8df      	bhi.n	8001c0e <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c52:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	9000      	str	r0, [sp, #0]
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <SSD1306_I2C_WriteMulti+0xc8>)
 8001c72:	f001 f8f7 	bl	8002e64 <HAL_I2C_Master_Transmit>
}
 8001c76:	bf00      	nop
 8001c78:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	200000fc 	.word	0x200000fc

08001c84 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c9a:	797b      	ldrb	r3, [r7, #5]
 8001c9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2302      	movs	r3, #2
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <SSD1306_I2C_Write+0x38>)
 8001cae:	f001 f8d9 	bl	8002e64 <HAL_I2C_Master_Transmit>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200000fc 	.word	0x200000fc

08001cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_MspInit+0x5c>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <HAL_MspInit+0x5c>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6193      	str	r3, [r2, #24]
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_MspInit+0x5c>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <HAL_MspInit+0x5c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_MspInit+0x5c>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_MspInit+0x5c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_MspInit+0x60>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_MspInit+0x60>)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000

08001d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_ADC_MspInit+0x6c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d121      	bne.n	8001d88 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_ADC_MspInit+0x70>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_ADC_MspInit+0x70>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6193      	str	r3, [r2, #24]
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_ADC_MspInit+0x70>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_ADC_MspInit+0x70>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4a0c      	ldr	r2, [pc, #48]	; (8001d94 <HAL_ADC_MspInit+0x70>)
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6193      	str	r3, [r2, #24]
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_ADC_MspInit+0x70>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d74:	2302      	movs	r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_ADC_MspInit+0x74>)
 8001d84:	f000 fd76 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40012400 	.word	0x40012400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010c00 	.word	0x40010c00

08001d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_I2C_MspInit+0x70>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d123      	bne.n	8001e04 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dd4:	23c0      	movs	r3, #192	; 0xc0
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <HAL_I2C_MspInit+0x78>)
 8001de8:	f000 fd44 	bl	8002874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001df2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df6:	61d3      	str	r3, [r2, #28]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_I2C_MspInit+0x74>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010c00 	.word	0x40010c00

08001e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_SPI_MspInit+0x88>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12f      	bne.n	8001e98 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e68:	23a0      	movs	r3, #160	; 0xa0
 8001e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_SPI_MspInit+0x90>)
 8001e7c:	f000 fcfa 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_SPI_MspInit+0x90>)
 8001e94:	f000 fcee 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800

08001eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_TIM_Base_MspInit+0x8c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ec8:	6193      	str	r3, [r2, #24]
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ed6:	e02a      	b.n	8001f2e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d114      	bne.n	8001f0c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	201c      	movs	r0, #28
 8001f00:	f000 fc81 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f04:	201c      	movs	r0, #28
 8001f06:	f000 fc9a 	bl	800283e <HAL_NVIC_EnableIRQ>
}
 8001f0a:	e010      	b.n	8001f2e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <HAL_TIM_Base_MspInit+0x94>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10b      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_TIM_Base_MspInit+0x90>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40000400 	.word	0x40000400

08001f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIM_MspPostInit+0x5c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d118      	bne.n	8001f96 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_TIM_MspPostInit+0x60>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_TIM_MspPostInit+0x60>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_TIM_MspPostInit+0x60>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_TIM_MspPostInit+0x64>)
 8001f92:	f000 fc6f 	bl	8002874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010800 	.word	0x40010800

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <SysTick_Handler+0x34>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <SysTick_Handler+0x18>
			Timer1--;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <SysTick_Handler+0x34>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <SysTick_Handler+0x34>)
 8002006:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <SysTick_Handler+0x38>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <SysTick_Handler+0x2c>
			Timer2--;
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Handler+0x38>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <SysTick_Handler+0x38>)
 800201a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f000 f8ca 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200000c4 	.word	0x200000c4
 8002028:	200000c6 	.word	0x200000c6

0800202c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002030:	2010      	movs	r0, #16
 8002032:	f000 fdbb 	bl	8002bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}

0800203a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800203e:	2020      	movs	r0, #32
 8002040:	f000 fdb4 	bl	8002bac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002044:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002048:	f000 fdb0 	bl	8002bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM2_IRQHandler+0x10>)
 8002056:	f002 fe25 	bl	8004ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200001f0 	.word	0x200001f0

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f007 fbde 	bl	8009854 <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20005000 	.word	0x20005000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	200026f0 	.word	0x200026f0
 80020cc:	20002a78 	.word	0x20002a78

080020d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020dc:	f7ff fff8 	bl	80020d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e0:	480b      	ldr	r0, [pc, #44]	; (8002110 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020e2:	490c      	ldr	r1, [pc, #48]	; (8002114 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020f8:	4c09      	ldr	r4, [pc, #36]	; (8002120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f007 fbab 	bl	8009860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210a:	f7fe fce5 	bl	8000ad8 <main>
  bx lr
 800210e:	4770      	bx	lr
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002118:	0800d074 	.word	0x0800d074
  ldr r2, =_sbss
 800211c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002120:	20002a74 	.word	0x20002a74

08002124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC1_2_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_Init+0x28>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_Init+0x28>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 fb59 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fdbc 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fb71 	bl	800285a <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002190:	f000 fb39 	bl	8002806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000038 	.word	0x20000038
 80021ac:	20000040 	.word	0x20000040
 80021b0:	2000003c 	.word	0x2000003c

080021b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x1c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_IncTick+0x20>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <HAL_IncTick+0x20>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000040 	.word	0x20000040
 80021d4:	200026f4 	.word	0x200026f4

080021d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_GetTick+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	200026f4 	.word	0x200026f4

080021ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002204:	d005      	beq.n	8002212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_Delay+0x44>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002212:	bf00      	nop
 8002214:	f7ff ffe0 	bl	80021d8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f7      	bhi.n	8002214 <HAL_Delay+0x28>
  {
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000040 	.word	0x20000040

08002234 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0be      	b.n	80023d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fd56 	bl	8001d24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f9ab 	bl	80025d4 <ADC_ConversionStop_Disable>
 800227e:	4603      	mov	r3, r0
 8002280:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 8099 	bne.w	80023c2 <HAL_ADC_Init+0x18e>
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 8095 	bne.w	80023c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022a0:	f023 0302 	bic.w	r3, r3, #2
 80022a4:	f043 0202 	orr.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_Init+0xa2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_ADC_Init+0xa8>
 80022d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022da:	e000      	b.n	80022de <HAL_ADC_Init+0xaa>
 80022dc:	2300      	movs	r3, #0
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7d1b      	ldrb	r3, [r3, #20]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d119      	bne.n	8002320 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7b1b      	ldrb	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d109      	bne.n	8002308 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	035a      	lsls	r2, r3, #13
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e00b      	b.n	8002320 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f043 0220 	orr.w	r2, r3, #32
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_ADC_Init+0x1a8>)
 800233c:	4013      	ands	r3, r2
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	430b      	orrs	r3, r1
 8002346:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002350:	d003      	beq.n	800235a <HAL_ADC_Init+0x126>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d104      	bne.n	8002364 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	3b01      	subs	r3, #1
 8002360:	051b      	lsls	r3, r3, #20
 8002362:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	430a      	orrs	r2, r1
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_ADC_Init+0x1ac>)
 8002380:	4013      	ands	r3, r2
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d10b      	bne.n	80023a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800239e:	e018      	b.n	80023d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f023 0312 	bic.w	r3, r3, #18
 80023a8:	f043 0210 	orr.w	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023c0:	e007      	b.n	80023d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	ffe1f7fd 	.word	0xffe1f7fd
 80023e0:	ff1f0efe 	.word	0xff1f0efe

080023e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x20>
 8002400:	2302      	movs	r3, #2
 8002402:	e0dc      	b.n	80025be <HAL_ADC_ConfigChannel+0x1da>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b06      	cmp	r3, #6
 8002412:	d81c      	bhi.n	800244e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	3b05      	subs	r3, #5
 8002426:	221f      	movs	r2, #31
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	4019      	ands	r1, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	3b05      	subs	r3, #5
 8002440:	fa00 f203 	lsl.w	r2, r0, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	635a      	str	r2, [r3, #52]	; 0x34
 800244c:	e03c      	b.n	80024c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d81c      	bhi.n	8002490 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	3b23      	subs	r3, #35	; 0x23
 8002468:	221f      	movs	r2, #31
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	4019      	ands	r1, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b23      	subs	r3, #35	; 0x23
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
 800248e:	e01b      	b.n	80024c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b41      	subs	r3, #65	; 0x41
 80024a2:	221f      	movs	r2, #31
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4019      	ands	r1, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	3b41      	subs	r3, #65	; 0x41
 80024bc:	fa00 f203 	lsl.w	r2, r0, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b09      	cmp	r3, #9
 80024ce:	d91c      	bls.n	800250a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68d9      	ldr	r1, [r3, #12]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	3b1e      	subs	r3, #30
 80024e2:	2207      	movs	r2, #7
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4019      	ands	r1, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6898      	ldr	r0, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	3b1e      	subs	r3, #30
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	e019      	b.n	800253e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6919      	ldr	r1, [r3, #16]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	2207      	movs	r2, #7
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	4019      	ands	r1, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6898      	ldr	r0, [r3, #8]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	fa00 f203 	lsl.w	r2, r0, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b10      	cmp	r3, #16
 8002544:	d003      	beq.n	800254e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800254a:	2b11      	cmp	r3, #17
 800254c:	d132      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d125      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d126      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002574:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b10      	cmp	r3, #16
 800257c:	d11a      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	0c9a      	lsrs	r2, r3, #18
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002594:	e002      	b.n	800259c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3b01      	subs	r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f9      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x1b2>
 80025a2:	e007      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012400 	.word	0x40012400
 80025cc:	20000038 	.word	0x20000038
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d12e      	bne.n	800264c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025fe:	f7ff fdeb 	bl	80021d8 <HAL_GetTick>
 8002602:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002604:	e01b      	b.n	800263e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002606:	f7ff fde7 	bl	80021d8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d914      	bls.n	800263e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10d      	bne.n	800263e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d0dc      	beq.n	8002606 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <__NVIC_SetPriorityGrouping+0x44>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002674:	4013      	ands	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <__NVIC_SetPriorityGrouping+0x44>)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	60d3      	str	r3, [r2, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <__NVIC_GetPriorityGrouping+0x18>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	f003 0307 	and.w	r3, r3, #7
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	db0b      	blt.n	80026e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	f003 021f 	and.w	r2, r3, #31
 80026d4:	4906      	ldr	r1, [pc, #24]	; (80026f0 <__NVIC_EnableIRQ+0x34>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	095b      	lsrs	r3, r3, #5
 80026dc:	2001      	movs	r0, #1
 80026de:	fa00 f202 	lsl.w	r2, r0, r2
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
         );
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d301      	bcc.n	80027c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027be:	2301      	movs	r3, #1
 80027c0:	e00f      	b.n	80027e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <SysTick_Config+0x40>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ca:	210f      	movs	r1, #15
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d0:	f7ff ff90 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <SysTick_Config+0x40>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <SysTick_Config+0x40>)
 80027dc:	2207      	movs	r2, #7
 80027de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff2d 	bl	8002658 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff42 	bl	80026a0 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff90 	bl	8002748 <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff5f 	bl	80026f4 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff35 	bl	80026bc <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffa2 	bl	80027ac <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b08b      	sub	sp, #44	; 0x2c
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002886:	e169      	b.n	8002b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002888:	2201      	movs	r2, #1
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 8158 	bne.w	8002b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a9a      	ldr	r2, [pc, #616]	; (8002b14 <HAL_GPIO_Init+0x2a0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d05e      	beq.n	800296e <HAL_GPIO_Init+0xfa>
 80028b0:	4a98      	ldr	r2, [pc, #608]	; (8002b14 <HAL_GPIO_Init+0x2a0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d875      	bhi.n	80029a2 <HAL_GPIO_Init+0x12e>
 80028b6:	4a98      	ldr	r2, [pc, #608]	; (8002b18 <HAL_GPIO_Init+0x2a4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d058      	beq.n	800296e <HAL_GPIO_Init+0xfa>
 80028bc:	4a96      	ldr	r2, [pc, #600]	; (8002b18 <HAL_GPIO_Init+0x2a4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d86f      	bhi.n	80029a2 <HAL_GPIO_Init+0x12e>
 80028c2:	4a96      	ldr	r2, [pc, #600]	; (8002b1c <HAL_GPIO_Init+0x2a8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d052      	beq.n	800296e <HAL_GPIO_Init+0xfa>
 80028c8:	4a94      	ldr	r2, [pc, #592]	; (8002b1c <HAL_GPIO_Init+0x2a8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d869      	bhi.n	80029a2 <HAL_GPIO_Init+0x12e>
 80028ce:	4a94      	ldr	r2, [pc, #592]	; (8002b20 <HAL_GPIO_Init+0x2ac>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d04c      	beq.n	800296e <HAL_GPIO_Init+0xfa>
 80028d4:	4a92      	ldr	r2, [pc, #584]	; (8002b20 <HAL_GPIO_Init+0x2ac>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d863      	bhi.n	80029a2 <HAL_GPIO_Init+0x12e>
 80028da:	4a92      	ldr	r2, [pc, #584]	; (8002b24 <HAL_GPIO_Init+0x2b0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d046      	beq.n	800296e <HAL_GPIO_Init+0xfa>
 80028e0:	4a90      	ldr	r2, [pc, #576]	; (8002b24 <HAL_GPIO_Init+0x2b0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d85d      	bhi.n	80029a2 <HAL_GPIO_Init+0x12e>
 80028e6:	2b12      	cmp	r3, #18
 80028e8:	d82a      	bhi.n	8002940 <HAL_GPIO_Init+0xcc>
 80028ea:	2b12      	cmp	r3, #18
 80028ec:	d859      	bhi.n	80029a2 <HAL_GPIO_Init+0x12e>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_GPIO_Init+0x80>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	0800296f 	.word	0x0800296f
 80028f8:	08002949 	.word	0x08002949
 80028fc:	0800295b 	.word	0x0800295b
 8002900:	0800299d 	.word	0x0800299d
 8002904:	080029a3 	.word	0x080029a3
 8002908:	080029a3 	.word	0x080029a3
 800290c:	080029a3 	.word	0x080029a3
 8002910:	080029a3 	.word	0x080029a3
 8002914:	080029a3 	.word	0x080029a3
 8002918:	080029a3 	.word	0x080029a3
 800291c:	080029a3 	.word	0x080029a3
 8002920:	080029a3 	.word	0x080029a3
 8002924:	080029a3 	.word	0x080029a3
 8002928:	080029a3 	.word	0x080029a3
 800292c:	080029a3 	.word	0x080029a3
 8002930:	080029a3 	.word	0x080029a3
 8002934:	080029a3 	.word	0x080029a3
 8002938:	08002951 	.word	0x08002951
 800293c:	08002965 	.word	0x08002965
 8002940:	4a79      	ldr	r2, [pc, #484]	; (8002b28 <HAL_GPIO_Init+0x2b4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002946:	e02c      	b.n	80029a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	623b      	str	r3, [r7, #32]
          break;
 800294e:	e029      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	3304      	adds	r3, #4
 8002956:	623b      	str	r3, [r7, #32]
          break;
 8002958:	e024      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	3308      	adds	r3, #8
 8002960:	623b      	str	r3, [r7, #32]
          break;
 8002962:	e01f      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	330c      	adds	r3, #12
 800296a:	623b      	str	r3, [r7, #32]
          break;
 800296c:	e01a      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002976:	2304      	movs	r3, #4
 8002978:	623b      	str	r3, [r7, #32]
          break;
 800297a:	e013      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d105      	bne.n	8002990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002984:	2308      	movs	r3, #8
 8002986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	611a      	str	r2, [r3, #16]
          break;
 800298e:	e009      	b.n	80029a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002990:	2308      	movs	r3, #8
 8002992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	615a      	str	r2, [r3, #20]
          break;
 800299a:	e003      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
          break;
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x130>
          break;
 80029a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d801      	bhi.n	80029ae <HAL_GPIO_Init+0x13a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	e001      	b.n	80029b2 <HAL_GPIO_Init+0x13e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3304      	adds	r3, #4
 80029b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2bff      	cmp	r3, #255	; 0xff
 80029b8:	d802      	bhi.n	80029c0 <HAL_GPIO_Init+0x14c>
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x152>
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	3b08      	subs	r3, #8
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	210f      	movs	r1, #15
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	401a      	ands	r2, r3
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80b1 	beq.w	8002b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029f4:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_GPIO_Init+0x2b8>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4a4c      	ldr	r2, [pc, #304]	; (8002b2c <HAL_GPIO_Init+0x2b8>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6193      	str	r3, [r2, #24]
 8002a00:	4b4a      	ldr	r3, [pc, #296]	; (8002b2c <HAL_GPIO_Init+0x2b8>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a0c:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <HAL_GPIO_Init+0x2bc>)
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3302      	adds	r3, #2
 8002a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	220f      	movs	r2, #15
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <HAL_GPIO_Init+0x2c0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d013      	beq.n	8002a60 <HAL_GPIO_Init+0x1ec>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3f      	ldr	r2, [pc, #252]	; (8002b38 <HAL_GPIO_Init+0x2c4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00d      	beq.n	8002a5c <HAL_GPIO_Init+0x1e8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3e      	ldr	r2, [pc, #248]	; (8002b3c <HAL_GPIO_Init+0x2c8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <HAL_GPIO_Init+0x1e4>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3d      	ldr	r2, [pc, #244]	; (8002b40 <HAL_GPIO_Init+0x2cc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d101      	bne.n	8002a54 <HAL_GPIO_Init+0x1e0>
 8002a50:	2303      	movs	r3, #3
 8002a52:	e006      	b.n	8002a62 <HAL_GPIO_Init+0x1ee>
 8002a54:	2304      	movs	r3, #4
 8002a56:	e004      	b.n	8002a62 <HAL_GPIO_Init+0x1ee>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e002      	b.n	8002a62 <HAL_GPIO_Init+0x1ee>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_GPIO_Init+0x1ee>
 8002a60:	2300      	movs	r3, #0
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	f002 0203 	and.w	r2, r2, #3
 8002a68:	0092      	lsls	r2, r2, #2
 8002a6a:	4093      	lsls	r3, r2
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a72:	492f      	ldr	r1, [pc, #188]	; (8002b30 <HAL_GPIO_Init+0x2bc>)
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a8c:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	492c      	ldr	r1, [pc, #176]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	4928      	ldr	r1, [pc, #160]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d006      	beq.n	8002ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ab4:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	491e      	ldr	r1, [pc, #120]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4918      	ldr	r1, [pc, #96]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	4914      	ldr	r1, [pc, #80]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d021      	beq.n	8002b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b04:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_GPIO_Init+0x2d0>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e021      	b.n	8002b56 <HAL_GPIO_Init+0x2e2>
 8002b12:	bf00      	nop
 8002b14:	10320000 	.word	0x10320000
 8002b18:	10310000 	.word	0x10310000
 8002b1c:	10220000 	.word	0x10220000
 8002b20:	10210000 	.word	0x10210000
 8002b24:	10120000 	.word	0x10120000
 8002b28:	10110000 	.word	0x10110000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010000 	.word	0x40010000
 8002b34:	40010800 	.word	0x40010800
 8002b38:	40010c00 	.word	0x40010c00
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	40011400 	.word	0x40011400
 8002b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	4909      	ldr	r1, [pc, #36]	; (8002b78 <HAL_GPIO_Init+0x304>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f47f ae8e 	bne.w	8002888 <HAL_GPIO_Init+0x14>
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	372c      	adds	r7, #44	; 0x2c
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40010400 	.word	0x40010400

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe fa86 	bl	80010dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010400 	.word	0x40010400

08002bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e12b      	b.n	8002e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff f8ca 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c40:	f001 f960 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8002c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4a81      	ldr	r2, [pc, #516]	; (8002e50 <HAL_I2C_Init+0x274>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d807      	bhi.n	8002c60 <HAL_I2C_Init+0x84>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a80      	ldr	r2, [pc, #512]	; (8002e54 <HAL_I2C_Init+0x278>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e006      	b.n	8002c6e <HAL_I2C_Init+0x92>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a7d      	ldr	r2, [pc, #500]	; (8002e58 <HAL_I2C_Init+0x27c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	bf94      	ite	ls
 8002c68:	2301      	movls	r3, #1
 8002c6a:	2300      	movhi	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0e7      	b.n	8002e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a78      	ldr	r2, [pc, #480]	; (8002e5c <HAL_I2C_Init+0x280>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0c9b      	lsrs	r3, r3, #18
 8002c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	; (8002e50 <HAL_I2C_Init+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_I2C_Init+0xd4>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3301      	adds	r3, #1
 8002cae:	e009      	b.n	8002cc4 <HAL_I2C_Init+0xe8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	4a69      	ldr	r2, [pc, #420]	; (8002e60 <HAL_I2C_Init+0x284>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	495c      	ldr	r1, [pc, #368]	; (8002e50 <HAL_I2C_Init+0x274>)
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d819      	bhi.n	8002d18 <HAL_I2C_Init+0x13c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e59      	subs	r1, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf2:	1c59      	adds	r1, r3, #1
 8002cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_I2C_Init+0x138>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1e59      	subs	r1, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d12:	e051      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d14:	2304      	movs	r3, #4
 8002d16:	e04f      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d111      	bne.n	8002d44 <HAL_I2C_Init+0x168>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e012      	b.n	8002d6a <HAL_I2C_Init+0x18e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Init+0x196>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e022      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10e      	bne.n	8002d98 <HAL_I2C_Init+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e58      	subs	r0, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	440b      	add	r3, r1
 8002d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d96:	e00f      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	6809      	ldr	r1, [r1, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6911      	ldr	r1, [r2, #16]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	4311      	orrs	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	000186a0 	.word	0x000186a0
 8002e54:	001e847f 	.word	0x001e847f
 8002e58:	003d08ff 	.word	0x003d08ff
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	10624dd3 	.word	0x10624dd3

08002e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	460b      	mov	r3, r1
 8002e72:	817b      	strh	r3, [r7, #10]
 8002e74:	4613      	mov	r3, r2
 8002e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff f9ae 	bl	80021d8 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 80e0 	bne.w	800304c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	4970      	ldr	r1, [pc, #448]	; (8003058 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fa92 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0d3      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2C_Master_Transmit+0x50>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0cc      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d007      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2221      	movs	r2, #33	; 0x21
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	893a      	ldrh	r2, [r7, #8]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f9ca 	bl	80032bc <I2C_MasterRequestWrite>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08d      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f48:	e066      	b.n	8003018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fb50 	bl	80035f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d107      	bne.n	8002f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_I2C_Master_Transmit+0x188>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fb47 	bl	8003684 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b04      	cmp	r3, #4
 8003002:	d107      	bne.n	8003014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e01a      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d194      	bne.n	8002f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff f8b2 	bl	80021d8 <HAL_GetTick>
 8003074:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	f040 8111 	bne.w	80032aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2319      	movs	r3, #25
 800308e:	2201      	movs	r2, #1
 8003090:	4988      	ldr	r1, [pc, #544]	; (80032b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f994 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	e104      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_I2C_IsDeviceReady+0x50>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0fd      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d007      	beq.n	80030d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2224      	movs	r2, #36	; 0x24
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a70      	ldr	r2, [pc, #448]	; (80032b8 <HAL_I2C_IsDeviceReady+0x258>)
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003108:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f952 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003130:	d103      	bne.n	800313a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0b6      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800314c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800314e:	f7ff f843 	bl	80021d8 <HAL_GetTick>
 8003152:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003182:	e025      	b.n	80031d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7ff f828 	bl	80021d8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <HAL_I2C_IsDeviceReady+0x13a>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22a0      	movs	r2, #160	; 0xa0
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2ba0      	cmp	r3, #160	; 0xa0
 80031da:	d005      	beq.n	80031e8 <HAL_I2C_IsDeviceReady+0x188>
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_I2C_IsDeviceReady+0x188>
 80031e2:	7dbb      	ldrb	r3, [r7, #22]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0cd      	beq.n	8003184 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d129      	bne.n	8003252 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2319      	movs	r3, #25
 800322a:	2201      	movs	r2, #1
 800322c:	4921      	ldr	r1, [pc, #132]	; (80032b4 <HAL_I2C_IsDeviceReady+0x254>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8c6 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e036      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e02c      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800326a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2319      	movs	r3, #25
 8003272:	2201      	movs	r2, #1
 8003274:	490f      	ldr	r1, [pc, #60]	; (80032b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8a2 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e012      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3301      	adds	r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	f4ff af32 	bcc.w	80030fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00100002 	.word	0x00100002
 80032b8:	ffff0000 	.word	0xffff0000

080032bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	460b      	mov	r3, r1
 80032ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d006      	beq.n	80032e6 <I2C_MasterRequestWrite+0x2a>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d003      	beq.n	80032e6 <I2C_MasterRequestWrite+0x2a>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e4:	d108      	bne.n	80032f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e00b      	b.n	8003310 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	2b12      	cmp	r3, #18
 80032fe:	d107      	bne.n	8003310 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f84f 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d103      	bne.n	8003340 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e035      	b.n	80033b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334c:	d108      	bne.n	8003360 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800335c:	611a      	str	r2, [r3, #16]
 800335e:	e01b      	b.n	8003398 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003360:	897b      	ldrh	r3, [r7, #10]
 8003362:	11db      	asrs	r3, r3, #7
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0306 	and.w	r3, r3, #6
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f063 030f 	orn	r3, r3, #15
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	490e      	ldr	r1, [pc, #56]	; (80033b8 <I2C_MasterRequestWrite+0xfc>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f898 	bl	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e010      	b.n	80033b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <I2C_MasterRequestWrite+0x100>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f888 	bl	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010008 	.word	0x00010008
 80033bc:	00010002 	.word	0x00010002

080033c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	e048      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d8:	d044      	beq.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe fefd 	bl	80021d8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d139      	bne.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10d      	bne.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	e00c      	b.n	8003430 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	429a      	cmp	r2, r3
 8003434:	d116      	bne.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e023      	b.n	80034ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10d      	bne.n	800348a <I2C_WaitOnFlagUntilTimeout+0xca>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	e00c      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d093      	beq.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c2:	e071      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d123      	bne.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e067      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003522:	d041      	beq.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fe fe58 	bl	80021d8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d136      	bne.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10c      	bne.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e00b      	b.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e021      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10c      	bne.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e00b      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f af6d 	bne.w	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003600:	e034      	b.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f886 	bl	8003714 <I2C_IsAcknowledgeFailed>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e034      	b.n	800367c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003618:	d028      	beq.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7fe fddd 	bl	80021d8 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11d      	bne.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d016      	beq.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d1c3      	bne.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003690:	e034      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f83e 	bl	8003714 <I2C_IsAcknowledgeFailed>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e034      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a8:	d028      	beq.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe fd95 	bl	80021d8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11d      	bne.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d016      	beq.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e007      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d1c3      	bne.n	8003692 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d11b      	bne.n	8003764 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003734:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e272      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8087 	beq.w	800389e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003790:	4b92      	ldr	r3, [pc, #584]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b04      	cmp	r3, #4
 800379a:	d00c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800379c:	4b8f      	ldr	r3, [pc, #572]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d112      	bne.n	80037ce <HAL_RCC_OscConfig+0x5e>
 80037a8:	4b8c      	ldr	r3, [pc, #560]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b4:	d10b      	bne.n	80037ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b6:	4b89      	ldr	r3, [pc, #548]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d06c      	beq.n	800389c <HAL_RCC_OscConfig+0x12c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d168      	bne.n	800389c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e24c      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x76>
 80037d8:	4b80      	ldr	r3, [pc, #512]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7f      	ldr	r2, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e02e      	b.n	8003844 <HAL_RCC_OscConfig+0xd4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x98>
 80037ee:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b78      	ldr	r3, [pc, #480]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a77      	ldr	r2, [pc, #476]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xd4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0xbc>
 8003812:	4b72      	ldr	r3, [pc, #456]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a71      	ldr	r2, [pc, #452]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6e      	ldr	r2, [pc, #440]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xd4>
 800382c:	4b6b      	ldr	r3, [pc, #428]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6a      	ldr	r2, [pc, #424]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b68      	ldr	r3, [pc, #416]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a67      	ldr	r2, [pc, #412]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fcc4 	bl	80021d8 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fcc0 	bl	80021d8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e200      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b5d      	ldr	r3, [pc, #372]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xe4>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe fcb0 	bl	80021d8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe fcac 	bl	80021d8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1ec      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b53      	ldr	r3, [pc, #332]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x10c>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038aa:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038b6:	4b49      	ldr	r3, [pc, #292]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x18c>
 80038c2:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b43      	ldr	r3, [pc, #268]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x176>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c0      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3d      	ldr	r3, [pc, #244]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4939      	ldr	r1, [pc, #228]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x270>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fc65 	bl	80021d8 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe fc61 	bl	80021d8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1a1      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4927      	ldr	r1, [pc, #156]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_RCC_OscConfig+0x270>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fe fc44 	bl	80021d8 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe fc40 	bl	80021d8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e180      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d03a      	beq.n	80039f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d019      	beq.n	80039ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <HAL_RCC_OscConfig+0x274>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398c:	f7fe fc24 	bl	80021d8 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe fc20 	bl	80021d8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e160      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <HAL_RCC_OscConfig+0x26c>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f000 faba 	bl	8003f2c <RCC_Delay>
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCC_OscConfig+0x274>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fe fc0a 	bl	80021d8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c6:	e00f      	b.n	80039e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fc06 	bl	80021d8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e146      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	42420000 	.word	0x42420000
 80039e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	4b92      	ldr	r3, [pc, #584]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e9      	bne.n	80039c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a6 	beq.w	8003b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4a87      	ldr	r2, [pc, #540]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	61d3      	str	r3, [r2, #28]
 8003a1e:	4b85      	ldr	r3, [pc, #532]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b82      	ldr	r3, [pc, #520]	; (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d118      	bne.n	8003a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a46:	f7fe fbc7 	bl	80021d8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fe fbc3 	bl	80021d8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e103      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	4b75      	ldr	r3, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x312>
 8003a74:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4a6e      	ldr	r2, [pc, #440]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6213      	str	r3, [r2, #32]
 8003a80:	e02d      	b.n	8003ade <HAL_RCC_OscConfig+0x36e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x334>
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a69      	ldr	r2, [pc, #420]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	4b67      	ldr	r3, [pc, #412]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a66      	ldr	r2, [pc, #408]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0304 	bic.w	r3, r3, #4
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	e01c      	b.n	8003ade <HAL_RCC_OscConfig+0x36e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x356>
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a60      	ldr	r2, [pc, #384]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a5d      	ldr	r2, [pc, #372]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	e00b      	b.n	8003ade <HAL_RCC_OscConfig+0x36e>
 8003ac6:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a5a      	ldr	r2, [pc, #360]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6213      	str	r3, [r2, #32]
 8003ad2:	4b58      	ldr	r3, [pc, #352]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d015      	beq.n	8003b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fb77 	bl	80021d8 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fe fb73 	bl	80021d8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0b1      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ee      	beq.n	8003aee <HAL_RCC_OscConfig+0x37e>
 8003b10:	e014      	b.n	8003b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fe fb61 	bl	80021d8 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fe fb5d 	bl	80021d8 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e09b      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b30:	4b40      	ldr	r3, [pc, #256]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ee      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b3c      	ldr	r3, [pc, #240]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4a3b      	ldr	r2, [pc, #236]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8087 	beq.w	8003c66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b58:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d061      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d146      	bne.n	8003bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fb31 	bl	80021d8 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fb2d 	bl	80021d8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e06d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8c:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d108      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4921      	ldr	r1, [pc, #132]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a19      	ldr	r1, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	491b      	ldr	r1, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x4cc>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe fb01 	bl	80021d8 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe fafd 	bl	80021d8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e03d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x46a>
 8003bf8:	e035      	b.n	8003c66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe faea 	bl	80021d8 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe fae6 	bl	80021d8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e026      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x498>
 8003c26:	e01e      	b.n	8003c66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e019      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_OscConfig+0x500>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d0      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4965      	ldr	r1, [pc, #404]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d040      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d115      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e073      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06b      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d52:	4b39      	ldr	r3, [pc, #228]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4936      	ldr	r1, [pc, #216]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d64:	f7fe fa38 	bl	80021d8 <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6c:	f7fe fa34 	bl	80021d8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e053      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 020c 	and.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d1eb      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d210      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4922      	ldr	r1, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1cc>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1d0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f996 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40022000 	.word	0x40022000
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	0800cabc 	.word	0x0800cabc
 8003e40:	20000038 	.word	0x20000038
 8003e44:	2000003c 	.word	0x2000003c

08003e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x30>
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x36>
 8003e76:	e027      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e7a:	613b      	str	r3, [r7, #16]
      break;
 8003e7c:	e027      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0c9b      	lsrs	r3, r3, #18
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	0c5b      	lsrs	r3, r3, #17
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	fb03 f202 	mul.w	r2, r3, r2
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eca:	613b      	str	r3, [r7, #16]
      break;
 8003ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ece:	693b      	ldr	r3, [r7, #16]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	007a1200 	.word	0x007a1200
 8003ee4:	0800cad4 	.word	0x0800cad4
 8003ee8:	0800cae4 	.word	0x0800cae4
 8003eec:	003d0900 	.word	0x003d0900

08003ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b02      	ldr	r3, [pc, #8]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	20000038 	.word	0x20000038

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff2 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	0800cacc 	.word	0x0800cacc

08003f2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <RCC_Delay+0x34>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <RCC_Delay+0x38>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0a5b      	lsrs	r3, r3, #9
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f48:	bf00      	nop
  }
  while (Delay --);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	60fa      	str	r2, [r7, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f9      	bne.n	8003f48 <RCC_Delay+0x1c>
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	20000038 	.word	0x20000038
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d07d      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f84:	2300      	movs	r3, #0
 8003f86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f88:	4b4f      	ldr	r3, [pc, #316]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10d      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	61d3      	str	r3, [r2, #28]
 8003fa0:	4b49      	ldr	r3, [pc, #292]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b46      	ldr	r3, [pc, #280]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d118      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbc:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a42      	ldr	r2, [pc, #264]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc8:	f7fe f906 	bl	80021d8 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	e008      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd0:	f7fe f902 	bl	80021d8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e06d      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02e      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d027      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800400c:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800401c:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004022:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d014      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe f8d1 	bl	80021d8 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004038:	e00a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fe f8cd 	bl	80021d8 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e036      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ee      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4917      	ldr	r1, [pc, #92]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	4313      	orrs	r3, r2
 800406c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800408c:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	490b      	ldr	r1, [pc, #44]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4904      	ldr	r1, [pc, #16]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40007000 	.word	0x40007000
 80040d0:	42420440 	.word	0x42420440

080040d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e076      	b.n	80041d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d108      	bne.n	8004100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f6:	d009      	beq.n	800410c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	61da      	str	r2, [r3, #28]
 80040fe:	e005      	b.n	800410c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fd fe76 	bl	8001e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004142:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004190:	ea42 0103 	orr.w	r1, r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	0c1a      	lsrs	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f002 0204 	and.w	r2, r2, #4
 80041b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_SPI_Transmit+0x22>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e12d      	b.n	800445a <HAL_SPI_Transmit+0x27e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004206:	f7fd ffe7 	bl	80021d8 <HAL_GetTick>
 800420a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d002      	beq.n	8004222 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800421c:	2302      	movs	r3, #2
 800421e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004220:	e116      	b.n	8004450 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_SPI_Transmit+0x52>
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004232:	e10d      	b.n	8004450 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427a:	d10f      	bne.n	800429c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800429a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d007      	beq.n	80042ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c2:	d14f      	bne.n	8004364 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_SPI_Transmit+0xf6>
 80042cc:	8afb      	ldrh	r3, [r7, #22]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d142      	bne.n	8004358 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	881a      	ldrh	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	1c9a      	adds	r2, r3, #2
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042f6:	e02f      	b.n	8004358 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d112      	bne.n	800432c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	881a      	ldrh	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	1c9a      	adds	r2, r3, #2
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	86da      	strh	r2, [r3, #54]	; 0x36
 800432a:	e015      	b.n	8004358 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800432c:	f7fd ff54 	bl	80021d8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d803      	bhi.n	8004344 <HAL_SPI_Transmit+0x168>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004342:	d102      	bne.n	800434a <HAL_SPI_Transmit+0x16e>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004356:	e07b      	b.n	8004450 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ca      	bne.n	80042f8 <HAL_SPI_Transmit+0x11c>
 8004362:	e050      	b.n	8004406 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_SPI_Transmit+0x196>
 800436c:	8afb      	ldrh	r3, [r7, #22]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d144      	bne.n	80043fc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004398:	e030      	b.n	80043fc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d113      	bne.n	80043d0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80043ce:	e015      	b.n	80043fc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043d0:	f7fd ff02 	bl	80021d8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d803      	bhi.n	80043e8 <HAL_SPI_Transmit+0x20c>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	d102      	bne.n	80043ee <HAL_SPI_Transmit+0x212>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043fa:	e029      	b.n	8004450 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1c9      	bne.n	800439a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	6839      	ldr	r1, [r7, #0]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa62 	bl	80048d4 <SPI_EndRxTxTransaction>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e003      	b.n	8004450 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004458:	7ffb      	ldrb	r3, [r7, #31]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b08c      	sub	sp, #48	; 0x30
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004470:	2301      	movs	r3, #1
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x26>
 8004484:	2302      	movs	r3, #2
 8004486:	e198      	b.n	80047ba <HAL_SPI_TransmitReceive+0x358>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004490:	f7fd fea2 	bl	80021d8 <HAL_GetTick>
 8004494:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800449c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d00f      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x70>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b8:	d107      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x68>
 80044c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d003      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
 80044cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044d0:	e16d      	b.n	80047ae <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x82>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x82>
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044ea:	e160      	b.n	80047ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d003      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2205      	movs	r2, #5
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	887a      	ldrh	r2, [r7, #2]
 8004516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	887a      	ldrh	r2, [r7, #2]
 8004522:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	887a      	ldrh	r2, [r7, #2]
 8004528:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d007      	beq.n	8004554 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455c:	d17c      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_SPI_TransmitReceive+0x10a>
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d16a      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004590:	e057      	b.n	8004642 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d11b      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x176>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d016      	beq.n	80045d8 <HAL_SPI_TransmitReceive+0x176>
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d113      	bne.n	80045d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d119      	bne.n	800461a <HAL_SPI_TransmitReceive+0x1b8>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d014      	beq.n	800461a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	b292      	uxth	r2, r2
 80045fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	1c9a      	adds	r2, r3, #2
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004616:	2301      	movs	r3, #1
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800461a:	f7fd fddd 	bl	80021d8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004626:	429a      	cmp	r2, r3
 8004628:	d80b      	bhi.n	8004642 <HAL_SPI_TransmitReceive+0x1e0>
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004630:	d007      	beq.n	8004642 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004640:	e0b5      	b.n	80047ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1a2      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x130>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d19d      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x130>
 8004656:	e080      	b.n	800475a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <HAL_SPI_TransmitReceive+0x204>
 8004660:	8b7b      	ldrh	r3, [r7, #26]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d16f      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468c:	e05b      	b.n	8004746 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b02      	cmp	r3, #2
 800469a:	d11c      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x274>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d017      	beq.n	80046d6 <HAL_SPI_TransmitReceive+0x274>
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d114      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d119      	bne.n	8004718 <HAL_SPI_TransmitReceive+0x2b6>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d014      	beq.n	8004718 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004714:	2301      	movs	r3, #1
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004718:	f7fd fd5e 	bl	80021d8 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004724:	429a      	cmp	r2, r3
 8004726:	d803      	bhi.n	8004730 <HAL_SPI_TransmitReceive+0x2ce>
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472e:	d102      	bne.n	8004736 <HAL_SPI_TransmitReceive+0x2d4>
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d107      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004744:	e033      	b.n	80047ae <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d19e      	bne.n	800468e <HAL_SPI_TransmitReceive+0x22c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d199      	bne.n	800468e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800475a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f8b8 	bl	80048d4 <SPI_EndRxTxTransaction>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d006      	beq.n	8004778 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004776:	e01a      	b.n	80047ae <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a4:	e003      	b.n	80047ae <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3730      	adds	r7, #48	; 0x30
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047d4:	f7fd fd00 	bl	80021d8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4413      	add	r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047e4:	f7fd fcf8 	bl	80021d8 <HAL_GetTick>
 80047e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ea:	4b39      	ldr	r3, [pc, #228]	; (80048d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	015b      	lsls	r3, r3, #5
 80047f0:	0d1b      	lsrs	r3, r3, #20
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fa:	e054      	b.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004802:	d050      	beq.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004804:	f7fd fce8 	bl	80021d8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	d902      	bls.n	800481a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d13d      	bne.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d111      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483c:	d004      	beq.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d107      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004860:	d10f      	bne.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e017      	b.n	80048c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d19b      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000038 	.word	0x20000038

080048d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff ff6a 	bl	80047c4 <SPI_WaitFlagStateUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	f043 0220 	orr.w	r2, r3, #32
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e000      	b.n	8004908 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e041      	b.n	80049a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd fab8 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f000 fc5e 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e03a      	b.n	8004a3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_TIM_Base_Start_IT+0x98>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <HAL_TIM_Base_Start_IT+0x9c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x58>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d010      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800

08004a54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a1a      	ldr	r2, [r3, #32]
 8004a72:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10f      	bne.n	8004a9c <HAL_TIM_Base_Stop_IT+0x48>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	f240 4344 	movw	r3, #1092	; 0x444
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_Base_Stop_IT+0x48>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0201 	bic.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e041      	b.n	8004b46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f839 	bl	8004b4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f000 fb8e 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d109      	bne.n	8004b84 <HAL_TIM_PWM_Start+0x24>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e022      	b.n	8004bca <HAL_TIM_PWM_Start+0x6a>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d109      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x3e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	bf14      	ite	ne
 8004b96:	2301      	movne	r3, #1
 8004b98:	2300      	moveq	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	e015      	b.n	8004bca <HAL_TIM_PWM_Start+0x6a>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d109      	bne.n	8004bb8 <HAL_TIM_PWM_Start+0x58>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	e008      	b.n	8004bca <HAL_TIM_PWM_Start+0x6a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e05e      	b.n	8004c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d104      	bne.n	8004be2 <HAL_TIM_PWM_Start+0x82>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be0:	e013      	b.n	8004c0a <HAL_TIM_PWM_Start+0xaa>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0x92>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf0:	e00b      	b.n	8004c0a <HAL_TIM_PWM_Start+0xaa>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_PWM_Start+0xa2>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c00:	e003      	b.n	8004c0a <HAL_TIM_PWM_Start+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fd7c 	bl	8005710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_TIM_PWM_Start+0x138>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d107      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_TIM_PWM_Start+0x138>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIM_PWM_Start+0xfa>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d009      	beq.n	8004c5a <HAL_TIM_PWM_Start+0xfa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_TIM_PWM_Start+0x13c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIM_PWM_Start+0xfa>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_TIM_PWM_Start+0x140>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d111      	bne.n	8004c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b06      	cmp	r3, #6
 8004c6a:	d010      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	e007      	b.n	8004c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800

08004ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0202 	mvn.w	r2, #2
 8004cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa76 	bl	80051d8 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa69 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa78 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0204 	mvn.w	r2, #4
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa4c 	bl	80051d8 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa3f 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa4e 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0208 	mvn.w	r2, #8
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa22 	bl	80051d8 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa15 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa24 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d122      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d11b      	bne.n	8004dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0210 	mvn.w	r2, #16
 8004dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9f8 	bl	80051d8 <HAL_TIM_IC_CaptureCallback>
 8004de8:	e005      	b.n	8004df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f9eb 	bl	80051c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f9fa 	bl	80051ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d10e      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0201 	mvn.w	r2, #1
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fc6c 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d10e      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d107      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fd3a 	bl	80058c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d10e      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d107      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9be 	bl	80051fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0220 	mvn.w	r2, #32
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd05 	bl	80058b6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0ae      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	f200 809f 	bhi.w	8005020 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08005021 	.word	0x08005021
 8004ef0:	08005021 	.word	0x08005021
 8004ef4:	08005021 	.word	0x08005021
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08005021 	.word	0x08005021
 8004f00:	08005021 	.word	0x08005021
 8004f04:	08005021 	.word	0x08005021
 8004f08:	08004f9f 	.word	0x08004f9f
 8004f0c:	08005021 	.word	0x08005021
 8004f10:	08005021 	.word	0x08005021
 8004f14:	08005021 	.word	0x08005021
 8004f18:	08004fdf 	.word	0x08004fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f9d6 	bl	80052d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0204 	bic.w	r2, r2, #4
 8004f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6999      	ldr	r1, [r3, #24]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	619a      	str	r2, [r3, #24]
      break;
 8004f5a:	e064      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa1c 	bl	80053a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	619a      	str	r2, [r3, #24]
      break;
 8004f9c:	e043      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fa65 	bl	8005474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0208 	orr.w	r2, r2, #8
 8004fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0204 	bic.w	r2, r2, #4
 8004fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69d9      	ldr	r1, [r3, #28]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	61da      	str	r2, [r3, #28]
      break;
 8004fdc:	e023      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 faaf 	bl	8005548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	021a      	lsls	r2, r3, #8
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	61da      	str	r2, [r3, #28]
      break;
 800501e:	e002      	b.n	8005026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	75fb      	strb	r3, [r7, #23]
      break;
 8005024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIM_ConfigClockSource+0x1c>
 8005050:	2302      	movs	r3, #2
 8005052:	e0b4      	b.n	80051be <HAL_TIM_ConfigClockSource+0x186>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508c:	d03e      	beq.n	800510c <HAL_TIM_ConfigClockSource+0xd4>
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	f200 8087 	bhi.w	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	f000 8086 	beq.w	80051aa <HAL_TIM_ConfigClockSource+0x172>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d87f      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b70      	cmp	r3, #112	; 0x70
 80050a6:	d01a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0xa6>
 80050a8:	2b70      	cmp	r3, #112	; 0x70
 80050aa:	d87b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b60      	cmp	r3, #96	; 0x60
 80050ae:	d050      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x11a>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d877      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b50      	cmp	r3, #80	; 0x50
 80050b6:	d03c      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0xfa>
 80050b8:	2b50      	cmp	r3, #80	; 0x50
 80050ba:	d873      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d058      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x13a>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d86f      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d064      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050c8:	2b30      	cmp	r3, #48	; 0x30
 80050ca:	d86b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d060      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d867      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05c      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d05a      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x15a>
 80050dc:	e062      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ee:	f000 faf0 	bl	80056d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	609a      	str	r2, [r3, #8]
      break;
 800510a:	e04f      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800511c:	f000 fad9 	bl	80056d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800512e:	609a      	str	r2, [r3, #8]
      break;
 8005130:	e03c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	461a      	mov	r2, r3
 8005140:	f000 fa50 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2150      	movs	r1, #80	; 0x50
 800514a:	4618      	mov	r0, r3
 800514c:	f000 faa7 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005150:	e02c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800515e:	461a      	mov	r2, r3
 8005160:	f000 fa6e 	bl	8005640 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2160      	movs	r1, #96	; 0x60
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fa97 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005170:	e01c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800517e:	461a      	mov	r2, r3
 8005180:	f000 fa30 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2140      	movs	r1, #64	; 0x40
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fa87 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005190:	e00c      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f000 fa7e 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80051a2:	e003      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	73fb      	strb	r3, [r7, #15]
      break;
 80051a8:	e000      	b.n	80051ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr

080051ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr

080051fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
	...

08005210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_Base_SetConfig+0xb8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_Base_SetConfig+0x30>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d007      	beq.n	8005240 <TIM_Base_SetConfig+0x30>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a26      	ldr	r2, [pc, #152]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0x30>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <TIM_Base_SetConfig+0xc0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d108      	bne.n	8005252 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <TIM_Base_SetConfig+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00b      	beq.n	8005272 <TIM_Base_SetConfig+0x62>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d007      	beq.n	8005272 <TIM_Base_SetConfig+0x62>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a19      	ldr	r2, [pc, #100]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_Base_SetConfig+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <TIM_Base_SetConfig+0xc0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <TIM_Base_SetConfig+0xb8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800

080052d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f023 0201 	bic.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 0302 	bic.w	r3, r3, #2
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1c      	ldr	r2, [pc, #112]	; (800539c <TIM_OC1_SetConfig+0xc8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10c      	bne.n	800534a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0308 	bic.w	r3, r3, #8
 8005336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 0304 	bic.w	r3, r3, #4
 8005348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <TIM_OC1_SetConfig+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d111      	bne.n	8005376 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40012c00 	.word	0x40012c00

080053a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f023 0210 	bic.w	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <TIM_OC2_SetConfig+0xd0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10d      	bne.n	800541c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <TIM_OC2_SetConfig+0xd0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d113      	bne.n	800544c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800542a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00

08005474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <TIM_OC3_SetConfig+0xd0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10d      	bne.n	80054ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a14      	ldr	r2, [pc, #80]	; (8005544 <TIM_OC3_SetConfig+0xd0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d113      	bne.n	800551e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00

08005548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	031b      	lsls	r3, r3, #12
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a0f      	ldr	r2, [pc, #60]	; (80055e0 <TIM_OC4_SetConfig+0x98>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d109      	bne.n	80055bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00

080055e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800566a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	031b      	lsls	r3, r3, #12
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b087      	sub	sp, #28
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	021a      	lsls	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	2201      	movs	r2, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1a      	ldr	r2, [r3, #32]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	43db      	mvns	r3, r3
 8005732:	401a      	ands	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1a      	ldr	r2, [r3, #32]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e046      	b.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a16      	ldr	r2, [pc, #88]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d009      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a12      	ldr	r2, [pc, #72]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a10      	ldr	r2, [pc, #64]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10c      	bne.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800

08005814 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800582c:	2302      	movs	r3, #2
 800582e:	e03d      	b.n	80058ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
	...

080058dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80058e0:	4904      	ldr	r1, [pc, #16]	; (80058f4 <MX_FATFS_Init+0x18>)
 80058e2:	4805      	ldr	r0, [pc, #20]	; (80058f8 <MX_FATFS_Init+0x1c>)
 80058e4:	f003 ff16 	bl	8009714 <FATFS_LinkDriver>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <MX_FATFS_Init+0x20>)
 80058ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058f0:	bf00      	nop
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	200026fc 	.word	0x200026fc
 80058f8:	20000044 	.word	0x20000044
 80058fc:	200026f8 	.word	0x200026f8

08005900 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005904:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr

0800590e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	4603      	mov	r3, r0
 8005916:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fa fdc8 	bl	80004b0 <SD_disk_initialize>
 8005920:	4603      	mov	r3, r0
 8005922:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
   // return Stat;
	return SD_disk_status(pdrv);
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	4618      	mov	r0, r3
 800593a:	f7fa fe9f 	bl	800067c <SD_disk_status>
 800593e:	4603      	mov	r3, r0
 8005940:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	4603      	mov	r3, r0
 8005958:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 800595a:	7bf8      	ldrb	r0, [r7, #15]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	f7fa fe9f 	bl	80006a4 <SD_disk_read>
 8005966:	4603      	mov	r3, r0
 8005968:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005982:	7bf8      	ldrb	r0, [r7, #15]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	f7fa fef5 	bl	8000778 <SD_disk_write>
 800598e:	4603      	mov	r3, r0
 8005990:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	603a      	str	r2, [r7, #0]
 80059a4:	71fb      	strb	r3, [r7, #7]
 80059a6:	460b      	mov	r3, r1
 80059a8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	79b9      	ldrb	r1, [r7, #6]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fa ff65 	bl	8000880 <SD_disk_ioctl>
 80059b6:	4603      	mov	r3, r0
 80059b8:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <disk_status+0x30>)
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	4905      	ldr	r1, [pc, #20]	; (80059f4 <disk_status+0x30>)
 80059de:	440a      	add	r2, r1
 80059e0:	7a12      	ldrb	r2, [r2, #8]
 80059e2:	4610      	mov	r0, r2
 80059e4:	4798      	blx	r3
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20002920 	.word	0x20002920

080059f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	4a0d      	ldr	r2, [pc, #52]	; (8005a40 <disk_initialize+0x48>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d111      	bne.n	8005a34 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <disk_initialize+0x48>)
 8005a14:	2101      	movs	r1, #1
 8005a16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <disk_initialize+0x48>)
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	79fa      	ldrb	r2, [r7, #7]
 8005a26:	4906      	ldr	r1, [pc, #24]	; (8005a40 <disk_initialize+0x48>)
 8005a28:	440a      	add	r2, r1
 8005a2a:	7a12      	ldrb	r2, [r2, #8]
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4798      	blx	r3
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20002920 	.word	0x20002920

08005a44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	4603      	mov	r3, r0
 8005a52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <disk_read+0x3c>)
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	689c      	ldr	r4, [r3, #8]
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	4a07      	ldr	r2, [pc, #28]	; (8005a80 <disk_read+0x3c>)
 8005a64:	4413      	add	r3, r2
 8005a66:	7a18      	ldrb	r0, [r3, #8]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	47a0      	blx	r4
 8005a70:	4603      	mov	r3, r0
 8005a72:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20002920 	.word	0x20002920

08005a84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <disk_write+0x3c>)
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	68dc      	ldr	r4, [r3, #12]
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <disk_write+0x3c>)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	7a18      	ldrb	r0, [r3, #8]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	47a0      	blx	r4
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20002920 	.word	0x20002920

08005ac4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	603a      	str	r2, [r7, #0]
 8005ace:	71fb      	strb	r3, [r7, #7]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	4a09      	ldr	r2, [pc, #36]	; (8005afc <disk_ioctl+0x38>)
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	79fa      	ldrb	r2, [r7, #7]
 8005ae2:	4906      	ldr	r1, [pc, #24]	; (8005afc <disk_ioctl+0x38>)
 8005ae4:	440a      	add	r2, r1
 8005ae6:	7a10      	ldrb	r0, [r2, #8]
 8005ae8:	79b9      	ldrb	r1, [r7, #6]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	4798      	blx	r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	73fb      	strb	r3, [r7, #15]
  return res;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20002920 	.word	0x20002920

08005b00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005b14:	e007      	b.n	8005b26 <mem_cpy+0x26>
		*d++ = *s++;
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	1c53      	adds	r3, r2, #1
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1c59      	adds	r1, r3, #1
 8005b20:	6179      	str	r1, [r7, #20]
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1e5a      	subs	r2, r3, #1
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f2      	bne.n	8005b16 <mem_cpy+0x16>
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005b4c:	e005      	b.n	8005b5a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	617a      	str	r2, [r7, #20]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f4      	bne.n	8005b4e <mem_set+0x12>
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005b70:	b480      	push	{r7}
 8005b72:	b089      	sub	sp, #36	; 0x24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8005b88:	bf00      	nop
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00d      	beq.n	8005bb0 <mem_cmp+0x40>
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	61fa      	str	r2, [r7, #28]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	61ba      	str	r2, [r7, #24]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	1acb      	subs	r3, r1, r3
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ec      	beq.n	8005b8a <mem_cmp+0x1a>
	return r;
 8005bb0:	697b      	ldr	r3, [r7, #20]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3724      	adds	r7, #36	; 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr

08005bbc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005bc6:	e002      	b.n	8005bce <chk_chr+0x12>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <chk_chr+0x26>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d1f2      	bne.n	8005bc8 <chk_chr+0xc>
	return *str;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	781b      	ldrb	r3, [r3, #0]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bc80      	pop	{r7}
 8005bee:	4770      	bx	lr

08005bf0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e03b      	b.n	8005c7c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8005c04:	4931      	ldr	r1, [pc, #196]	; (8005ccc <chk_lock+0xdc>)
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d02c      	beq.n	8005c72 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005c18:	492c      	ldr	r1, [pc, #176]	; (8005ccc <chk_lock+0xdc>)
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d120      	bne.n	8005c76 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005c34:	4925      	ldr	r1, [pc, #148]	; (8005ccc <chk_lock+0xdc>)
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	3304      	adds	r3, #4
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d111      	bne.n	8005c76 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005c52:	491e      	ldr	r1, [pc, #120]	; (8005ccc <chk_lock+0xdc>)
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	3308      	adds	r3, #8
 8005c62:	881a      	ldrh	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d102      	bne.n	8005c76 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005c70:	e007      	b.n	8005c82 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005c72:	2301      	movs	r3, #1
 8005c74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d9c0      	bls.n	8005c04 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d109      	bne.n	8005c9c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <chk_lock+0xa4>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d101      	bne.n	8005c98 <chk_lock+0xa8>
 8005c94:	2300      	movs	r3, #0
 8005c96:	e013      	b.n	8005cc0 <chk_lock+0xd0>
 8005c98:	2312      	movs	r3, #18
 8005c9a:	e011      	b.n	8005cc0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <chk_lock+0xca>
 8005ca2:	490a      	ldr	r1, [pc, #40]	; (8005ccc <chk_lock+0xdc>)
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	330a      	adds	r3, #10
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb8:	d101      	bne.n	8005cbe <chk_lock+0xce>
 8005cba:	2310      	movs	r3, #16
 8005cbc:	e000      	b.n	8005cc0 <chk_lock+0xd0>
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20002708 	.word	0x20002708

08005cd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	607b      	str	r3, [r7, #4]
 8005cda:	e002      	b.n	8005ce2 <enq_lock+0x12>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d809      	bhi.n	8005cfc <enq_lock+0x2c>
 8005ce8:	490a      	ldr	r1, [pc, #40]	; (8005d14 <enq_lock+0x44>)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ef      	bne.n	8005cdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	bf14      	ite	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	2300      	moveq	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20002708 	.word	0x20002708

08005d18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e02e      	b.n	8005d86 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005d28:	4958      	ldr	r1, [pc, #352]	; (8005e8c <inc_lock+0x174>)
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d11d      	bne.n	8005d80 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005d44:	4951      	ldr	r1, [pc, #324]	; (8005e8c <inc_lock+0x174>)
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	3304      	adds	r3, #4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d10e      	bne.n	8005d80 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005d62:	494a      	ldr	r1, [pc, #296]	; (8005e8c <inc_lock+0x174>)
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4613      	mov	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4413      	add	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	3308      	adds	r3, #8
 8005d72:	881a      	ldrh	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d006      	beq.n	8005d8e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d9cd      	bls.n	8005d28 <inc_lock+0x10>
 8005d8c:	e000      	b.n	8005d90 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005d8e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d148      	bne.n	8005e28 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e002      	b.n	8005da2 <inc_lock+0x8a>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d809      	bhi.n	8005dbc <inc_lock+0xa4>
 8005da8:	4938      	ldr	r1, [pc, #224]	; (8005e8c <inc_lock+0x174>)
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ef      	bne.n	8005d9c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d101      	bne.n	8005dc6 <inc_lock+0xae>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e05d      	b.n	8005e82 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dcc:	6819      	ldr	r1, [r3, #0]
 8005dce:	482f      	ldr	r0, [pc, #188]	; (8005e8c <inc_lock+0x174>)
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4403      	add	r3, r0
 8005ddc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de4:	6899      	ldr	r1, [r3, #8]
 8005de6:	4829      	ldr	r0, [pc, #164]	; (8005e8c <inc_lock+0x174>)
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4403      	add	r3, r0
 8005df4:	3304      	adds	r3, #4
 8005df6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	88d8      	ldrh	r0, [r3, #6]
 8005e00:	4922      	ldr	r1, [pc, #136]	; (8005e8c <inc_lock+0x174>)
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3308      	adds	r3, #8
 8005e10:	4602      	mov	r2, r0
 8005e12:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005e14:	491d      	ldr	r1, [pc, #116]	; (8005e8c <inc_lock+0x174>)
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	330a      	adds	r3, #10
 8005e24:	2200      	movs	r2, #0
 8005e26:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <inc_lock+0x130>
 8005e2e:	4917      	ldr	r1, [pc, #92]	; (8005e8c <inc_lock+0x174>)
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	330a      	adds	r3, #10
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <inc_lock+0x130>
 8005e44:	2300      	movs	r3, #0
 8005e46:	e01c      	b.n	8005e82 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <inc_lock+0x14e>
 8005e4e:	490f      	ldr	r1, [pc, #60]	; (8005e8c <inc_lock+0x174>)
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	330a      	adds	r3, #10
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	b299      	uxth	r1, r3
 8005e64:	e001      	b.n	8005e6a <inc_lock+0x152>
 8005e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e6a:	4808      	ldr	r0, [pc, #32]	; (8005e8c <inc_lock+0x174>)
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4403      	add	r3, r0
 8005e78:	330a      	adds	r3, #10
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr
 8005e8c:	20002708 	.word	0x20002708

08005e90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d82e      	bhi.n	8005f02 <dec_lock+0x72>
		n = Files[i].ctr;
 8005ea4:	491b      	ldr	r1, [pc, #108]	; (8005f14 <dec_lock+0x84>)
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	330a      	adds	r3, #10
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005eb8:	89fb      	ldrh	r3, [r7, #14]
 8005eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ebe:	d101      	bne.n	8005ec4 <dec_lock+0x34>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <dec_lock+0x40>
 8005eca:	89fb      	ldrh	r3, [r7, #14]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005ed0:	4910      	ldr	r1, [pc, #64]	; (8005f14 <dec_lock+0x84>)
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	330a      	adds	r3, #10
 8005ee0:	89fa      	ldrh	r2, [r7, #14]
 8005ee2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005ee4:	89fb      	ldrh	r3, [r7, #14]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d108      	bne.n	8005efc <dec_lock+0x6c>
 8005eea:	490a      	ldr	r1, [pc, #40]	; (8005f14 <dec_lock+0x84>)
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	737b      	strb	r3, [r7, #13]
 8005f00:	e001      	b.n	8005f06 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005f02:	2302      	movs	r3, #2
 8005f04:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20002708 	.word	0x20002708

08005f18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e016      	b.n	8005f54 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005f26:	4910      	ldr	r1, [pc, #64]	; (8005f68 <clear_lock+0x50>)
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d108      	bne.n	8005f4e <clear_lock+0x36>
 8005f3c:	490a      	ldr	r1, [pc, #40]	; (8005f68 <clear_lock+0x50>)
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4613      	mov	r3, r2
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d9e5      	bls.n	8005f26 <clear_lock+0xe>
	}
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20002708 	.word	0x20002708

08005f6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7e:	791b      	ldrb	r3, [r3, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d040      	beq.n	8006006 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f94:	7858      	ldrb	r0, [r3, #1]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	f7ff fd72 	bl	8005a84 <disk_write>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <sync_window+0x40>
			res = FR_DISK_ERR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
 8005faa:	e02c      	b.n	8006006 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	1ad2      	subs	r2, r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d21b      	bcs.n	8006006 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	e012      	b.n	8006000 <sync_window+0x94>
					wsect += fs->fsize;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fee:	7858      	ldrb	r0, [r3, #1]
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	f7ff fd45 	bl	8005a84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d8e9      	bhi.n	8005fda <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d01e      	beq.n	800606a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff ff9d 	bl	8005f6c <sync_window>
 8006032:	4603      	mov	r3, r0
 8006034:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d116      	bne.n	800606a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006042:	7858      	ldrb	r0, [r3, #1]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	2301      	movs	r3, #1
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	f7ff fcfb 	bl	8005a44 <disk_read>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006058:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800605a:	2301      	movs	r3, #1
 800605c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	461a      	mov	r2, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff75 	bl	8005f6c <sync_window>
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	f040 80ad 	bne.w	80061e8 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b03      	cmp	r3, #3
 8006098:	f040 8098 	bne.w	80061cc <sync_fs+0x158>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	795b      	ldrb	r3, [r3, #5]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 8091 	bne.w	80061cc <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b2:	895b      	ldrh	r3, [r3, #10]
 80060b4:	461a      	mov	r2, r3
 80060b6:	2100      	movs	r1, #0
 80060b8:	f7ff fd40 	bl	8005b3c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2255      	movs	r2, #85	; 0x55
 80060c0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	22aa      	movs	r2, #170	; 0xaa
 80060c8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2252      	movs	r2, #82	; 0x52
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2252      	movs	r2, #82	; 0x52
 80060d6:	705a      	strb	r2, [r3, #1]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2261      	movs	r2, #97	; 0x61
 80060dc:	709a      	strb	r2, [r3, #2]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2241      	movs	r2, #65	; 0x41
 80060e2:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2272      	movs	r2, #114	; 0x72
 80060e8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2272      	movs	r2, #114	; 0x72
 80060f0:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2241      	movs	r2, #65	; 0x41
 80060f8:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2261      	movs	r2, #97	; 0x61
 8006100:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	b2da      	uxtb	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	b29b      	uxth	r3, r3
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	b29b      	uxth	r3, r3
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	b2da      	uxtb	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	0e1b      	lsrs	r3, r3, #24
 8006146:	b2da      	uxtb	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	b29b      	uxth	r3, r3
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	b29b      	uxth	r3, r3
 800616c:	b2da      	uxtb	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	b2da      	uxtb	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	0e1b      	lsrs	r3, r3, #24
 8006190:	b2da      	uxtb	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80061a8:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b0:	7858      	ldrb	r0, [r3, #1]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	2301      	movs	r3, #1
 80061be:	f7ff fc61 	bl	8005a84 <disk_write>
			fs->fsi_flag = 0;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c8:	2200      	movs	r2, #0
 80061ca:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fc73 	bl	8005ac4 <disk_ioctl>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	3b02      	subs	r3, #2
 8006200:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	3b02      	subs	r3, #2
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d301      	bcc.n	8006216 <clust2sect+0x24>
 8006212:	2300      	movs	r3, #0
 8006214:	e00c      	b.n	8006230 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621c:	789b      	ldrb	r3, [r3, #2]
 800621e:	461a      	mov	r2, r3
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	fb03 f202 	mul.w	r2, r3, r2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	4413      	add	r3, r2
}
 8006230:	4618      	mov	r0, r3
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d906      	bls.n	8006258 <get_fat+0x1e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <get_fat+0x24>
		val = 1;	/* Internal error */
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e0e4      	b.n	8006428 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800625e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006262:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b03      	cmp	r3, #3
 800626e:	f000 8098 	beq.w	80063a2 <get_fat+0x168>
 8006272:	2b03      	cmp	r3, #3
 8006274:	f300 80ce 	bgt.w	8006414 <get_fat+0x1da>
 8006278:	2b01      	cmp	r3, #1
 800627a:	d002      	beq.n	8006282 <get_fat+0x48>
 800627c:	2b02      	cmp	r3, #2
 800627e:	d05f      	beq.n	8006340 <get_fat+0x106>
 8006280:	e0c8      	b.n	8006414 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	895b      	ldrh	r3, [r3, #10]
 80062a0:	4619      	mov	r1, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a8:	4413      	add	r3, r2
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff feaf 	bl	8006010 <move_window>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 80b0 	bne.w	800641a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	60fa      	str	r2, [r7, #12]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062c6:	8952      	ldrh	r2, [r2, #10]
 80062c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80062cc:	fb01 f202 	mul.w	r2, r1, r2
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	5cd3      	ldrb	r3, [r2, r3]
 80062d6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e6:	895b      	ldrh	r3, [r3, #10]
 80062e8:	4619      	mov	r1, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80062f0:	4413      	add	r3, r2
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fe8b 	bl	8006010 <move_window>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 808e 	bne.w	800641e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006308:	895b      	ldrh	r3, [r3, #10]
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006312:	fb01 f202 	mul.w	r2, r1, r2
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	5cd3      	ldrb	r3, [r2, r3]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	461a      	mov	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4313      	orrs	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <get_fat+0xfc>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	091b      	lsrs	r3, r3, #4
 8006334:	e002      	b.n	800633c <get_fat+0x102>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633c:	617b      	str	r3, [r7, #20]
			break;
 800633e:	e073      	b.n	8006428 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634e:	895b      	ldrh	r3, [r3, #10]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	b29b      	uxth	r3, r3
 8006354:	4619      	mov	r1, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	fbb3 f3f1 	udiv	r3, r3, r1
 800635c:	4413      	add	r3, r2
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fe55 	bl	8006010 <move_window>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d15a      	bne.n	8006422 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006376:	8952      	ldrh	r2, [r2, #10]
 8006378:	fbb3 f1f2 	udiv	r1, r3, r2
 800637c:	fb01 f202 	mul.w	r2, r1, r2
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	4413      	add	r3, r2
 8006386:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	3301      	adds	r3, #1
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	b21a      	sxth	r2, r3
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	b21b      	sxth	r3, r3
 8006398:	4313      	orrs	r3, r2
 800639a:	b21b      	sxth	r3, r3
 800639c:	b29b      	uxth	r3, r3
 800639e:	617b      	str	r3, [r7, #20]
			break;
 80063a0:	e042      	b.n	8006428 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b0:	895b      	ldrh	r3, [r3, #10]
 80063b2:	089b      	lsrs	r3, r3, #2
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4619      	mov	r1, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80063be:	4413      	add	r3, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7ff fe24 	bl	8006010 <move_window>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d12b      	bne.n	8006426 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063d8:	8952      	ldrh	r2, [r2, #10]
 80063da:	fbb3 f1f2 	udiv	r1, r3, r2
 80063de:	fb01 f202 	mul.w	r2, r1, r2
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3303      	adds	r3, #3
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	061a      	lsls	r2, r3, #24
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3302      	adds	r3, #2
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	041b      	lsls	r3, r3, #16
 80063fa:	4313      	orrs	r3, r2
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	3201      	adds	r2, #1
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	0212      	lsls	r2, r2, #8
 8006404:	4313      	orrs	r3, r2
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	7812      	ldrb	r2, [r2, #0]
 800640a:	4313      	orrs	r3, r2
 800640c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006410:	617b      	str	r3, [r7, #20]
			break;
 8006412:	e009      	b.n	8006428 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006414:	2301      	movs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e006      	b.n	8006428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800641a:	bf00      	nop
 800641c:	e004      	b.n	8006428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800641e:	bf00      	nop
 8006420:	e002      	b.n	8006428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006422:	bf00      	nop
 8006424:	e000      	b.n	8006428 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006426:	bf00      	nop
		}
	}

	return val;
 8006428:	697b      	ldr	r3, [r7, #20]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b088      	sub	sp, #32
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d906      	bls.n	8006452 <put_fat+0x20>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	429a      	cmp	r2, r3
 8006450:	d302      	bcc.n	8006458 <put_fat+0x26>
		res = FR_INT_ERR;
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e13a      	b.n	80066ce <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b03      	cmp	r3, #3
 8006462:	f000 80d0 	beq.w	8006606 <put_fat+0x1d4>
 8006466:	2b03      	cmp	r3, #3
 8006468:	f300 8127 	bgt.w	80066ba <put_fat+0x288>
 800646c:	2b01      	cmp	r3, #1
 800646e:	d003      	beq.n	8006478 <put_fat+0x46>
 8006470:	2b02      	cmp	r3, #2
 8006472:	f000 808f 	beq.w	8006594 <put_fat+0x162>
 8006476:	e120      	b.n	80066ba <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4413      	add	r3, r2
 8006484:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648c:	6a1a      	ldr	r2, [r3, #32]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006494:	895b      	ldrh	r3, [r3, #10]
 8006496:	4619      	mov	r1, r3
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	fbb3 f3f1 	udiv	r3, r3, r1
 800649e:	4413      	add	r3, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f7ff fdb4 	bl	8006010 <move_window>
 80064a8:	4603      	mov	r3, r0
 80064aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064ac:	7ffb      	ldrb	r3, [r7, #31]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f040 8106 	bne.w	80066c0 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	617a      	str	r2, [r7, #20]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064c0:	8952      	ldrh	r2, [r2, #10]
 80064c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c6:	fb01 f202 	mul.w	r2, r1, r2
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00d      	beq.n	80064f8 <put_fat+0xc6>
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	b25b      	sxtb	r3, r3
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	b25a      	sxtb	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	4313      	orrs	r3, r2
 80064f2:	b25b      	sxtb	r3, r3
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e001      	b.n	80064fc <put_fat+0xca>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006506:	2201      	movs	r2, #1
 8006508:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006518:	895b      	ldrh	r3, [r3, #10]
 800651a:	4619      	mov	r1, r3
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006522:	4413      	add	r3, r2
 8006524:	4619      	mov	r1, r3
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff fd72 	bl	8006010 <move_window>
 800652c:	4603      	mov	r3, r0
 800652e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006530:	7ffb      	ldrb	r3, [r7, #31]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 80c6 	bne.w	80066c4 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653e:	895b      	ldrh	r3, [r3, #10]
 8006540:	461a      	mov	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	fbb3 f1f2 	udiv	r1, r3, r2
 8006548:	fb01 f202 	mul.w	r2, r1, r2
 800654c:	1a9b      	subs	r3, r3, r2
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <put_fat+0x134>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	091b      	lsrs	r3, r3, #4
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e00e      	b.n	8006584 <put_fat+0x152>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b25b      	sxtb	r3, r3
 800656c:	f023 030f 	bic.w	r3, r3, #15
 8006570:	b25a      	sxtb	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b25b      	sxtb	r3, r3
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	b25b      	sxtb	r3, r3
 800657e:	4313      	orrs	r3, r2
 8006580:	b25b      	sxtb	r3, r3
 8006582:	b2db      	uxtb	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658e:	2201      	movs	r2, #1
 8006590:	711a      	strb	r2, [r3, #4]
			break;
 8006592:	e09c      	b.n	80066ce <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	895b      	ldrh	r3, [r3, #10]
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	4619      	mov	r1, r3
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80065b0:	4413      	add	r3, r2
 80065b2:	4619      	mov	r1, r3
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fd2b 	bl	8006010 <move_window>
 80065ba:	4603      	mov	r3, r0
 80065bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065be:	7ffb      	ldrb	r3, [r7, #31]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f040 8081 	bne.w	80066c8 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065d0:	8952      	ldrh	r2, [r2, #10]
 80065d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80065d6:	fb01 f202 	mul.w	r2, r1, r2
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	3301      	adds	r3, #1
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006600:	2201      	movs	r2, #1
 8006602:	711a      	strb	r2, [r3, #4]
			break;
 8006604:	e063      	b.n	80066ce <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006614:	895b      	ldrh	r3, [r3, #10]
 8006616:	089b      	lsrs	r3, r3, #2
 8006618:	b29b      	uxth	r3, r3
 800661a:	4619      	mov	r1, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006622:	4413      	add	r3, r2
 8006624:	4619      	mov	r1, r3
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff fcf2 	bl	8006010 <move_window>
 800662c:	4603      	mov	r3, r0
 800662e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006630:	7ffb      	ldrb	r3, [r7, #31]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d14a      	bne.n	80066cc <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006640:	8952      	ldrh	r2, [r2, #10]
 8006642:	fbb3 f1f2 	udiv	r1, r3, r2
 8006646:	fb01 f202 	mul.w	r2, r1, r2
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3303      	adds	r3, #3
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	061a      	lsls	r2, r3, #24
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3302      	adds	r3, #2
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	4313      	orrs	r3, r2
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	3201      	adds	r2, #1
 8006668:	7812      	ldrb	r2, [r2, #0]
 800666a:	0212      	lsls	r2, r2, #8
 800666c:	4313      	orrs	r3, r2
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	4313      	orrs	r3, r2
 800667c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	b29b      	uxth	r3, r3
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b29a      	uxth	r2, r3
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	3301      	adds	r3, #1
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	0c1a      	lsrs	r2, r3, #16
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	3302      	adds	r3, #2
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0e1a      	lsrs	r2, r3, #24
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	3303      	adds	r3, #3
 80066aa:	b2d2      	uxtb	r2, r2
 80066ac:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b4:	2201      	movs	r2, #1
 80066b6:	711a      	strb	r2, [r3, #4]
			break;
 80066b8:	e009      	b.n	80066ce <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80066ba:	2302      	movs	r3, #2
 80066bc:	77fb      	strb	r3, [r7, #31]
 80066be:	e006      	b.n	80066ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80066c0:	bf00      	nop
 80066c2:	e004      	b.n	80066ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80066c4:	bf00      	nop
 80066c6:	e002      	b.n	80066ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <put_fat+0x29c>
			if (res != FR_OK) break;
 80066cc:	bf00      	nop
		}
	}

	return res;
 80066ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d906      	bls.n	80066f6 <remove_chain+0x1e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <remove_chain+0x24>
		res = FR_INT_ERR;
 80066f6:	2302      	movs	r3, #2
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	e049      	b.n	8006790 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006700:	e03b      	b.n	800677a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff fd98 	bl	800623a <get_fat>
 800670a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d03b      	beq.n	800678a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d102      	bne.n	800671e <remove_chain+0x46>
 8006718:	2302      	movs	r3, #2
 800671a:	73fb      	strb	r3, [r7, #15]
 800671c:	e038      	b.n	8006790 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d102      	bne.n	800672c <remove_chain+0x54>
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
 800672a:	e031      	b.n	8006790 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800672c:	2200      	movs	r2, #0
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7ff fe7e 	bl	8006432 <put_fat>
 8006736:	4603      	mov	r3, r0
 8006738:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d126      	bne.n	800678e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800674c:	d013      	beq.n	8006776 <remove_chain+0x9e>
				fs->free_clust++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	3301      	adds	r3, #1
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800675e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006766:	795b      	ldrb	r3, [r3, #5]
 8006768:	f043 0301 	orr.w	r3, r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006774:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d3bc      	bcc.n	8006702 <remove_chain+0x2a>
 8006788:	e002      	b.n	8006790 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800678e:	bf00      	nop
		}
	}

	return res;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b086      	sub	sp, #24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d111      	bne.n	80067ce <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <create_chain+0x2e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d31d      	bcc.n	8006804 <create_chain+0x6a>
 80067c8:	2301      	movs	r3, #1
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	e01a      	b.n	8006804 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7ff fd32 	bl	800623a <get_fat>
 80067d6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d801      	bhi.n	80067e2 <create_chain+0x48>
 80067de:	2301      	movs	r3, #1
 80067e0:	e07f      	b.n	80068e2 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e8:	d101      	bne.n	80067ee <create_chain+0x54>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	e079      	b.n	80068e2 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d201      	bcs.n	8006800 <create_chain+0x66>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	e070      	b.n	80068e2 <create_chain+0x148>
		scl = clst;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3301      	adds	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	429a      	cmp	r2, r3
 800681a:	d307      	bcc.n	800682c <create_chain+0x92>
			ncl = 2;
 800681c:	2302      	movs	r3, #2
 800681e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d901      	bls.n	800682c <create_chain+0x92>
 8006828:	2300      	movs	r3, #0
 800682a:	e05a      	b.n	80068e2 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800682c:	6979      	ldr	r1, [r7, #20]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fd03 	bl	800623a <get_fat>
 8006834:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00e      	beq.n	800685a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006842:	d002      	beq.n	800684a <create_chain+0xb0>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <create_chain+0xb4>
			return cs;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	e049      	b.n	80068e2 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	d1d8      	bne.n	8006808 <create_chain+0x6e>
 8006856:	2300      	movs	r3, #0
 8006858:	e043      	b.n	80068e2 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800685a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800685c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006860:	6979      	ldr	r1, [r7, #20]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fde5 	bl	8006432 <put_fat>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <create_chain+0xec>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff fdd8 	bl	8006432 <put_fat>
 8006882:	4603      	mov	r3, r0
 8006884:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d121      	bne.n	80068d0 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006892:	461a      	mov	r2, r3
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a4:	d01c      	beq.n	80068e0 <create_chain+0x146>
			fs->free_clust--;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068b6:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068be:	795b      	ldrb	r3, [r3, #5]
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068cc:	715a      	strb	r2, [r3, #5]
 80068ce:	e007      	b.n	80068e0 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d102      	bne.n	80068dc <create_chain+0x142>
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068da:	e000      	b.n	80068de <create_chain+0x144>
 80068dc:	2301      	movs	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80068e0:	697b      	ldr	r3, [r7, #20]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b087      	sub	sp, #28
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	3304      	adds	r3, #4
 80068fe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690c:	895b      	ldrh	r3, [r3, #10]
 800690e:	461a      	mov	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	fbb3 f3f2 	udiv	r3, r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006922:	7892      	ldrb	r2, [r2, #2]
 8006924:	fbb3 f3f2 	udiv	r3, r3, r2
 8006928:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	613a      	str	r2, [r7, #16]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <clmt_clust+0x54>
 800693a:	2300      	movs	r3, #0
 800693c:	e010      	b.n	8006960 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	429a      	cmp	r2, r3
 8006944:	d307      	bcc.n	8006956 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	3304      	adds	r3, #4
 8006952:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006954:	e7e9      	b.n	800692a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006956:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
}
 8006960:	4618      	mov	r0, r3
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d009      	beq.n	80069a4 <dir_sdi+0x3a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d301      	bcc.n	80069a8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80069a4:	2302      	movs	r3, #2
 80069a6:	e0aa      	b.n	8006afe <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d110      	bne.n	80069d0 <dir_sdi+0x66>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d107      	bne.n	80069d0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d115      	bne.n	8006a02 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e2:	891b      	ldrh	r3, [r3, #8]
 80069e4:	461a      	mov	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d301      	bcc.n	80069f0 <dir_sdi+0x86>
			return FR_INT_ERR;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e086      	b.n	8006afe <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	e043      	b.n	8006a8a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0e:	895b      	ldrh	r3, [r3, #10]
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	fb02 f303 	mul.w	r3, r2, r3
 8006a28:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006a2a:	e021      	b.n	8006a70 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6979      	ldr	r1, [r7, #20]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fbff 	bl	800623a <get_fat>
 8006a3c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a44:	d101      	bne.n	8006a4a <dir_sdi+0xe0>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e059      	b.n	8006afe <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d909      	bls.n	8006a64 <dir_sdi+0xfa>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d301      	bcc.n	8006a68 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006a64:	2302      	movs	r3, #2
 8006a66:	e04a      	b.n	8006afe <dir_sdi+0x194>
			idx -= ic;
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d2d9      	bcs.n	8006a2c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6979      	ldr	r1, [r7, #20]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fbb5 	bl	80061f2 <clust2sect>
 8006a88:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	461a      	mov	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <dir_sdi+0x136>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e02e      	b.n	8006afe <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aac:	895b      	ldrh	r3, [r3, #10]
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ac4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006adc:	895b      	ldrh	r3, [r3, #10]
 8006ade:	095b      	lsrs	r3, r3, #5
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aea:	fb01 f202 	mul.w	r2, r1, r2
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	015b      	lsls	r3, r3, #5
 8006af2:	4403      	add	r3, r0
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006afa:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b06:	b590      	push	{r4, r7, lr}
 8006b08:	b087      	sub	sp, #28
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b16:	88db      	ldrh	r3, [r3, #6]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <dir_next+0x2a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <dir_next+0x2e>
		return FR_NO_FILE;
 8006b30:	2304      	movs	r3, #4
 8006b32:	e12e      	b.n	8006d92 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b4e:	fb01 f202 	mul.w	r2, r1, r2
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f040 80fa 	bne.w	8006d4e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b6a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b84:	891b      	ldrh	r3, [r3, #8]
 8006b86:	461a      	mov	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	f0c0 80df 	bcc.w	8006d4e <dir_next+0x248>
				return FR_NO_FILE;
 8006b90:	2304      	movs	r3, #4
 8006b92:	e0fe      	b.n	8006d92 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba0:	895b      	ldrh	r3, [r3, #10]
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bba:	7892      	ldrb	r2, [r2, #2]
 8006bbc:	3a01      	subs	r2, #1
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 80c4 	bne.w	8006d4e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7ff fb2e 	bl	800623a <get_fat>
 8006bde:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d801      	bhi.n	8006bea <dir_next+0xe4>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e0d3      	b.n	8006d92 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bf0:	d101      	bne.n	8006bf6 <dir_next+0xf0>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e0cd      	b.n	8006d92 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f0c0 808e 	bcc.w	8006d28 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <dir_next+0x110>
 8006c12:	2304      	movs	r3, #4
 8006c14:	e0bd      	b.n	8006d92 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7ff fdb6 	bl	800679a <create_chain>
 8006c2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <dir_next+0x134>
 8006c36:	2307      	movs	r3, #7
 8006c38:	e0ab      	b.n	8006d92 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <dir_next+0x13e>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e0a6      	b.n	8006d92 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4a:	d101      	bne.n	8006c50 <dir_next+0x14a>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0a0      	b.n	8006d92 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff f987 	bl	8005f6c <sync_window>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <dir_next+0x162>
 8006c64:	2301      	movs	r3, #1
 8006c66:	e094      	b.n	8006d92 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7e:	895b      	ldrh	r3, [r3, #10]
 8006c80:	461a      	mov	r2, r3
 8006c82:	2100      	movs	r1, #0
 8006c84:	f7fe ff5a 	bl	8005b3c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c96:	681c      	ldr	r4, [r3, #0]
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7ff faa9 	bl	80061f2 <clust2sect>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8006ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
 8006cac:	e021      	b.n	8006cf2 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cba:	2201      	movs	r2, #1
 8006cbc:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff f950 	bl	8005f6c <sync_window>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <dir_next+0x1d0>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e05d      	b.n	8006d92 <dir_next+0x28c>
						dp->fs->winsect++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	613b      	str	r3, [r7, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cfe:	789b      	ldrb	r3, [r3, #2]
 8006d00:	461a      	mov	r2, r3
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d3d2      	bcc.n	8006cae <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1acb      	subs	r3, r1, r3
 8006d22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d26:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2e:	461a      	mov	r2, r3
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6979      	ldr	r1, [r7, #20]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff fa57 	bl	80061f2 <clust2sect>
 8006d44:	4602      	mov	r2, r0
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d58:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d70:	895b      	ldrh	r3, [r3, #10]
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d7e:	fb01 f202 	mul.w	r2, r1, r2
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	015b      	lsls	r3, r3, #5
 8006d86:	4403      	add	r3, r0
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d8e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd90      	pop	{r4, r7, pc}

08006d9a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006da4:	2100      	movs	r1, #0
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff fddf 	bl	800696a <dir_sdi>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d135      	bne.n	8006e22 <dir_alloc+0x88>
		n = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7ff f91f 	bl	8006010 <move_window>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d121      	bne.n	8006e20 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2be5      	cmp	r3, #229	; 0xe5
 8006de8:	d006      	beq.n	8006df8 <dir_alloc+0x5e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d107      	bne.n	8006e08 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d102      	bne.n	8006e0c <dir_alloc+0x72>
 8006e06:	e00c      	b.n	8006e22 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fe79 	bl	8006b06 <dir_next>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0cd      	beq.n	8006dba <dir_alloc+0x20>
 8006e1e:	e000      	b.n	8006e22 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006e20:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d101      	bne.n	8006e2c <dir_alloc+0x92>
 8006e28:	2307      	movs	r3, #7
 8006e2a:	73fb      	strb	r3, [r7, #15]
	return res;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	331b      	adds	r3, #27
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	b21a      	sxth	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	331a      	adds	r3, #26
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b21b      	sxth	r3, r3
 8006e52:	4313      	orrs	r3, r2
 8006e54:	b21b      	sxth	r3, r3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d10f      	bne.n	8006e86 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	3315      	adds	r3, #21
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	b21a      	sxth	r2, r3
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b21b      	sxth	r3, r3
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

	return cl;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr

08006e92 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	331a      	adds	r3, #26
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	331b      	adds	r3, #27
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	0c1a      	lsrs	r2, r3, #16
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3314      	adds	r3, #20
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	0c1b      	lsrs	r3, r3, #16
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3315      	adds	r3, #21
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
	...

08006ee0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef2:	1e5a      	subs	r2, r3, #1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006f00:	2300      	movs	r3, #0
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	2301      	movs	r3, #1
 8006f06:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006f08:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <cmp_lfn+0xd8>)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	3301      	adds	r3, #1
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	b21a      	sxth	r2, r3
 8006f1c:	4926      	ldr	r1, [pc, #152]	; (8006fb8 <cmp_lfn+0xd8>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	440b      	add	r3, r1
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	440b      	add	r3, r1
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b21b      	sxth	r3, r3
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d019      	beq.n	8006f6e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006f3a:	89bb      	ldrh	r3, [r7, #12]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 fc33 	bl	80097a8 <ff_wtoupper>
 8006f42:	4603      	mov	r3, r0
 8006f44:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2bfe      	cmp	r3, #254	; 0xfe
 8006f4a:	d80e      	bhi.n	8006f6a <cmp_lfn+0x8a>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	617a      	str	r2, [r7, #20]
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f002 fc24 	bl	80097a8 <ff_wtoupper>
 8006f60:	4603      	mov	r3, r0
 8006f62:	461a      	mov	r2, r3
 8006f64:	89fb      	ldrh	r3, [r7, #14]
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d008      	beq.n	8006f7c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e01f      	b.n	8006fae <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006f6e:	89bb      	ldrh	r3, [r7, #12]
 8006f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d001      	beq.n	8006f7c <cmp_lfn+0x9c>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e018      	b.n	8006fae <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d9bf      	bls.n	8006f08 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <cmp_lfn+0xcc>
 8006f94:	89fb      	ldrh	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <cmp_lfn+0xcc>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <cmp_lfn+0xcc>
		return 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006fac:	2301      	movs	r3, #1
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	0800cb68 	.word	0x0800cb68

08006fbc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b089      	sub	sp, #36	; 0x24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	460b      	mov	r3, r1
 8006fcc:	71fb      	strb	r3, [r7, #7]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	330d      	adds	r3, #13
 8006fd6:	79ba      	ldrb	r2, [r7, #6]
 8006fd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	330b      	adds	r3, #11
 8006fde:	220f      	movs	r2, #15
 8006fe0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	331a      	adds	r3, #26
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	331b      	adds	r3, #27
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	1e5a      	subs	r2, r3, #1
 8006ffe:	4613      	mov	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	82fb      	strh	r3, [r7, #22]
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007012:	8afb      	ldrh	r3, [r7, #22]
 8007014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <fit_lfn+0x70>
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	61fa      	str	r2, [r7, #28]
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800702c:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <fit_lfn+0xe4>)
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	4413      	add	r3, r2
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4413      	add	r3, r2
 800703a:	8afa      	ldrh	r2, [r7, #22]
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	8afb      	ldrh	r3, [r7, #22]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	b299      	uxth	r1, r3
 8007046:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <fit_lfn+0xe4>)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	4413      	add	r3, r2
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4413      	add	r3, r2
 8007054:	b2ca      	uxtb	r2, r1
 8007056:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007058:	8afb      	ldrh	r3, [r7, #22]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <fit_lfn+0xa8>
 800705e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007062:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	3301      	adds	r3, #1
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d9d0      	bls.n	8007012 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007070:	8afb      	ldrh	r3, [r7, #22]
 8007072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007076:	4293      	cmp	r3, r2
 8007078:	d006      	beq.n	8007088 <fit_lfn+0xcc>
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <fit_lfn+0xd4>
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	79fa      	ldrb	r2, [r7, #7]
 8007094:	701a      	strb	r2, [r3, #0]
}
 8007096:	bf00      	nop
 8007098:	3724      	adds	r7, #36	; 0x24
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr
 80070a0:	0800cb68 	.word	0x0800cb68

080070a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08c      	sub	sp, #48	; 0x30
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80070b2:	220b      	movs	r2, #11
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7fe fd22 	bl	8005b00 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d92b      	bls.n	800711a <gen_numname+0x76>
		sr = seq;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80070c6:	e022      	b.n	800710e <gen_numname+0x6a>
			wc = *lfn++;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	1c9a      	adds	r2, r3, #2
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80070d2:	2300      	movs	r3, #0
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070d6:	e017      	b.n	8007108 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	005a      	lsls	r2, r3, #1
 80070dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	4413      	add	r3, r2
 80070e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80070e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <gen_numname+0x5e>
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80070fc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007100:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	3301      	adds	r3, #1
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	2b0f      	cmp	r3, #15
 800710c:	d9e4      	bls.n	80070d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1d8      	bne.n	80070c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800711a:	2307      	movs	r3, #7
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	b2db      	uxtb	r3, r3
 8007128:	3330      	adds	r3, #48	; 0x30
 800712a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800712e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007132:	2b39      	cmp	r3, #57	; 0x39
 8007134:	d904      	bls.n	8007140 <gen_numname+0x9c>
 8007136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713a:	3307      	adds	r3, #7
 800713c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	1e5a      	subs	r2, r3, #1
 8007144:	62ba      	str	r2, [r7, #40]	; 0x28
 8007146:	3330      	adds	r3, #48	; 0x30
 8007148:	443b      	add	r3, r7
 800714a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800714e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1df      	bne.n	800711e <gen_numname+0x7a>
	ns[i] = '~';
 800715e:	f107 0214 	add.w	r2, r7, #20
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	4413      	add	r3, r2
 8007166:	227e      	movs	r2, #126	; 0x7e
 8007168:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
 800716e:	e002      	b.n	8007176 <gen_numname+0xd2>
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	3301      	adds	r3, #1
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
 8007176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	429a      	cmp	r2, r3
 800717c:	d205      	bcs.n	800718a <gen_numname+0xe6>
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	4413      	add	r3, r2
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b20      	cmp	r3, #32
 8007188:	d1f2      	bne.n	8007170 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	2b07      	cmp	r3, #7
 800718e:	d807      	bhi.n	80071a0 <gen_numname+0xfc>
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	62ba      	str	r2, [r7, #40]	; 0x28
 8007196:	3330      	adds	r3, #48	; 0x30
 8007198:	443b      	add	r3, r7
 800719a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800719e:	e000      	b.n	80071a2 <gen_numname+0xfe>
 80071a0:	2120      	movs	r1, #32
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	627a      	str	r2, [r7, #36]	; 0x24
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	460a      	mov	r2, r1
 80071ae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	2b07      	cmp	r3, #7
 80071b4:	d9e9      	bls.n	800718a <gen_numname+0xe6>
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	3730      	adds	r7, #48	; 0x30
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80071cc:	230b      	movs	r3, #11
 80071ce:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	0852      	lsrs	r2, r2, #1
 80071d6:	01db      	lsls	r3, r3, #7
 80071d8:	4313      	orrs	r3, r2
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	1c59      	adds	r1, r3, #1
 80071e0:	6079      	str	r1, [r7, #4]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4413      	add	r3, r2
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1ed      	bne.n	80071d0 <sum_sfn+0x10>
	return sum;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007208:	2100      	movs	r1, #0
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff fbad 	bl	800696a <dir_sdi>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <dir_find+0x1e>
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	e0b8      	b.n	8007390 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800721e:	23ff      	movs	r3, #255	; 0xff
 8007220:	753b      	strb	r3, [r7, #20]
 8007222:	7d3b      	ldrb	r3, [r7, #20]
 8007224:	757b      	strb	r3, [r7, #21]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007230:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe fee3 	bl	8006010 <move_window>
 800724a:	4603      	mov	r3, r0
 800724c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	2b00      	cmp	r3, #0
 8007252:	f040 8097 	bne.w	8007384 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725c:	695b      	ldr	r3, [r3, #20]
 800725e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007266:	7dbb      	ldrb	r3, [r7, #22]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <dir_find+0x72>
 800726c:	2304      	movs	r3, #4
 800726e:	75fb      	strb	r3, [r7, #23]
 8007270:	e08d      	b.n	800738e <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	330b      	adds	r3, #11
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800727c:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800727e:	7dbb      	ldrb	r3, [r7, #22]
 8007280:	2be5      	cmp	r3, #229	; 0xe5
 8007282:	d007      	beq.n	8007294 <dir_find+0x94>
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <dir_find+0xa6>
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d008      	beq.n	80072a6 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007294:	23ff      	movs	r3, #255	; 0xff
 8007296:	757b      	strb	r3, [r7, #21]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072a2:	849a      	strh	r2, [r3, #36]	; 0x24
 80072a4:	e063      	b.n	800736e <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d137      	bne.n	800731c <dir_find+0x11c>
				if (dp->lfn) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d05a      	beq.n	800736e <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80072b8:	7dbb      	ldrb	r3, [r7, #22]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d010      	beq.n	80072e4 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	7b5b      	ldrb	r3, [r3, #13]
 80072c6:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80072c8:	7dbb      	ldrb	r3, [r7, #22]
 80072ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ce:	75bb      	strb	r3, [r7, #22]
 80072d0:	7dbb      	ldrb	r3, [r7, #22]
 80072d2:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072da:	88da      	ldrh	r2, [r3, #6]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e2:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80072e4:	7dba      	ldrb	r2, [r7, #22]
 80072e6:	7d7b      	ldrb	r3, [r7, #21]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d114      	bne.n	8007316 <dir_find+0x116>
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	330d      	adds	r3, #13
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	7d3a      	ldrb	r2, [r7, #20]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d10e      	bne.n	8007316 <dir_find+0x116>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	6939      	ldr	r1, [r7, #16]
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fdec 	bl	8006ee0 <cmp_lfn>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <dir_find+0x116>
 800730e:	7d7b      	ldrb	r3, [r7, #21]
 8007310:	3b01      	subs	r3, #1
 8007312:	b2db      	uxtb	r3, r3
 8007314:	e000      	b.n	8007318 <dir_find+0x118>
 8007316:	23ff      	movs	r3, #255	; 0xff
 8007318:	757b      	strb	r3, [r7, #21]
 800731a:	e028      	b.n	800736e <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800731c:	7d7b      	ldrb	r3, [r7, #21]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <dir_find+0x132>
 8007322:	6938      	ldr	r0, [r7, #16]
 8007324:	f7ff ff4c 	bl	80071c0 <sum_sfn>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	7d3b      	ldrb	r3, [r7, #20]
 800732e:	4293      	cmp	r3, r2
 8007330:	d02a      	beq.n	8007388 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	330b      	adds	r3, #11
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <dir_find+0x15e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	220b      	movs	r2, #11
 8007350:	4619      	mov	r1, r3
 8007352:	6938      	ldr	r0, [r7, #16]
 8007354:	f7fe fc0c 	bl	8005b70 <mem_cmp>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d016      	beq.n	800738c <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800735e:	23ff      	movs	r3, #255	; 0xff
 8007360:	757b      	strb	r3, [r7, #21]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800736c:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800736e:	2100      	movs	r1, #0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff fbc8 	bl	8006b06 <dir_next>
 8007376:	4603      	mov	r3, r0
 8007378:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f43f af58 	beq.w	8007232 <dir_find+0x32>
 8007382:	e004      	b.n	800738e <dir_find+0x18e>
		if (res != FR_OK) break;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800738c:	bf00      	nop

	return res;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08c      	sub	sp, #48	; 0x30
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	220c      	movs	r2, #12
 80073ba:	6a39      	ldr	r1, [r7, #32]
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fb9f 	bl	8005b00 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d03b      	beq.n	8007444 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	330b      	adds	r3, #11
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073da:	461a      	mov	r2, r3
 80073dc:	2300      	movs	r3, #0
 80073de:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80073e0:	2301      	movs	r3, #1
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e4:	e013      	b.n	800740e <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80073e6:	f107 010c 	add.w	r1, r7, #12
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	6a38      	ldr	r0, [r7, #32]
 80073f0:	f7ff fe58 	bl	80070a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff ff03 	bl	8007200 <dir_find>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	3301      	adds	r3, #1
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	2b63      	cmp	r3, #99	; 0x63
 8007412:	d9e8      	bls.n	80073e6 <dir_register+0x4e>
 8007414:	e000      	b.n	8007418 <dir_register+0x80>
			if (res != FR_OK) break;
 8007416:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2b64      	cmp	r3, #100	; 0x64
 800741c:	d101      	bne.n	8007422 <dir_register+0x8a>
 800741e:	2307      	movs	r3, #7
 8007420:	e0d8      	b.n	80075d4 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007426:	2b04      	cmp	r3, #4
 8007428:	d002      	beq.n	8007430 <dir_register+0x98>
 800742a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800742e:	e0d1      	b.n	80075d4 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	330b      	adds	r3, #11
 8007434:	7dfa      	ldrb	r2, [r7, #23]
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743e:	461a      	mov	r2, r3
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d014      	beq.n	8007478 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800744e:	2300      	movs	r3, #0
 8007450:	62bb      	str	r3, [r7, #40]	; 0x28
 8007452:	e002      	b.n	800745a <dir_register+0xc2>
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	3301      	adds	r3, #1
 8007458:	62bb      	str	r3, [r7, #40]	; 0x28
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f5      	bne.n	8007454 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	3319      	adds	r3, #25
 800746c:	4a5b      	ldr	r2, [pc, #364]	; (80075dc <dir_register+0x244>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
 8007476:	e001      	b.n	800747c <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007478:	2301      	movs	r3, #1
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800747c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff fc8b 	bl	8006d9a <dir_alloc>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800748a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800748e:	2b00      	cmp	r3, #0
 8007490:	d15b      	bne.n	800754a <dir_register+0x1b2>
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	3b01      	subs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2b00      	cmp	r3, #0
 800749c:	d055      	beq.n	800754a <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fa5b 	bl	800696a <dir_sdi>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80074ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d143      	bne.n	800754a <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fe78 	bl	80071c0 <sum_sfn>
 80074d0:	4603      	mov	r3, r0
 80074d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe fd92 	bl	8006010 <move_window>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80074f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d126      	bne.n	8007548 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007500:	6a18      	ldr	r0, [r3, #32]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007508:	6959      	ldr	r1, [r3, #20]
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	b2da      	uxtb	r2, r3
 800750e:	7efb      	ldrb	r3, [r7, #27]
 8007510:	f7ff fd54 	bl	8006fbc <fit_lfn>
				dp->fs->wflag = 1;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007520:	2201      	movs	r2, #1
 8007522:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8007524:	2100      	movs	r1, #0
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff faed 	bl	8006b06 <dir_next>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <dir_register+0x1b2>
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	3b01      	subs	r3, #1
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1c6      	bne.n	80074d4 <dir_register+0x13c>
 8007546:	e000      	b.n	800754a <dir_register+0x1b2>
				if (res != FR_OK) break;
 8007548:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800754a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800754e:	2b00      	cmp	r3, #0
 8007550:	d13e      	bne.n	80075d0 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe fd53 	bl	8006010 <move_window>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007574:	2b00      	cmp	r3, #0
 8007576:	d12b      	bne.n	80075d0 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	2220      	movs	r2, #32
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f7fe fad9 	bl	8005b3c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007590:	6958      	ldr	r0, [r3, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	220b      	movs	r2, #11
 800759c:	4619      	mov	r1, r3
 800759e:	f7fe faaf 	bl	8005b00 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	330b      	adds	r3, #11
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	330c      	adds	r3, #12
 80075b8:	f002 0218 	and.w	r2, r2, #24
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075cc:	2201      	movs	r2, #1
 80075ce:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80075d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3730      	adds	r7, #48	; 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	4ec4ec4f 	.word	0x4ec4ec4f

080075e0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	e002      	b.n	80075f8 <create_name+0x18>
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	3301      	adds	r3, #1
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b2f      	cmp	r3, #47	; 0x2f
 80075fe:	d0f8      	beq.n	80075f2 <create_name+0x12>
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b5c      	cmp	r3, #92	; 0x5c
 8007606:	d0f4      	beq.n	80075f2 <create_name+0x12>
	lfn = dp->lfn;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	61ba      	str	r2, [r7, #24]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4413      	add	r3, r2
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800762a:	2b1f      	cmp	r3, #31
 800762c:	d92f      	bls.n	800768e <create_name+0xae>
 800762e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007630:	2b2f      	cmp	r3, #47	; 0x2f
 8007632:	d02c      	beq.n	800768e <create_name+0xae>
 8007634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007636:	2b5c      	cmp	r3, #92	; 0x5c
 8007638:	d029      	beq.n	800768e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2bfe      	cmp	r3, #254	; 0xfe
 800763e:	d901      	bls.n	8007644 <create_name+0x64>
			return FR_INVALID_NAME;
 8007640:	2306      	movs	r3, #6
 8007642:	e186      	b.n	8007952 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007644:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007646:	b2db      	uxtb	r3, r3
 8007648:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800764a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800764c:	2101      	movs	r1, #1
 800764e:	4618      	mov	r0, r3
 8007650:	f002 f870 	bl	8009734 <ff_convert>
 8007654:	4603      	mov	r3, r0
 8007656:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <create_name+0x82>
 800765e:	2306      	movs	r3, #6
 8007660:	e177      	b.n	8007952 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007664:	2b7f      	cmp	r3, #127	; 0x7f
 8007666:	d809      	bhi.n	800767c <create_name+0x9c>
 8007668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800766a:	4619      	mov	r1, r3
 800766c:	488e      	ldr	r0, [pc, #568]	; (80078a8 <create_name+0x2c8>)
 800766e:	f7fe faa5 	bl	8005bbc <chk_chr>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <create_name+0x9c>
			return FR_INVALID_NAME;
 8007678:	2306      	movs	r3, #6
 800767a:	e16a      	b.n	8007952 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	617a      	str	r2, [r7, #20]
 8007682:	005b      	lsls	r3, r3, #1
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800768a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800768c:	e7c5      	b.n	800761a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	441a      	add	r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800769a:	2b1f      	cmp	r3, #31
 800769c:	d801      	bhi.n	80076a2 <create_name+0xc2>
 800769e:	2304      	movs	r3, #4
 80076a0:	e000      	b.n	80076a4 <create_name+0xc4>
 80076a2:	2300      	movs	r3, #0
 80076a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80076a8:	e011      	b.n	80076ce <create_name+0xee>
		w = lfn[di - 1];
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80076b0:	3b01      	subs	r3, #1
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80076bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d002      	beq.n	80076c8 <create_name+0xe8>
 80076c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076c4:	2b2e      	cmp	r3, #46	; 0x2e
 80076c6:	d106      	bne.n	80076d6 <create_name+0xf6>
		di--;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1ea      	bne.n	80076aa <create_name+0xca>
 80076d4:	e000      	b.n	80076d8 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80076d6:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <create_name+0x102>
 80076de:	2306      	movs	r3, #6
 80076e0:	e137      	b.n	8007952 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	220b      	movs	r2, #11
 80076f8:	2120      	movs	r1, #32
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fa1e 	bl	8005b3c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e002      	b.n	800770c <create_name+0x12c>
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	3301      	adds	r3, #1
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	2b20      	cmp	r3, #32
 8007718:	d0f5      	beq.n	8007706 <create_name+0x126>
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	2b2e      	cmp	r3, #46	; 0x2e
 8007726:	d0ee      	beq.n	8007706 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <create_name+0x162>
 800772e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007732:	f043 0303 	orr.w	r3, r3, #3
 8007736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800773a:	e002      	b.n	8007742 <create_name+0x162>
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	3b01      	subs	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d009      	beq.n	800775c <create_name+0x17c>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800774e:	3b01      	subs	r3, #1
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	2b2e      	cmp	r3, #46	; 0x2e
 800775a:	d1ef      	bne.n	800773c <create_name+0x15c>

	b = i = 0; ni = 8;
 800775c:	2300      	movs	r3, #0
 800775e:	623b      	str	r3, [r7, #32]
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007766:	2308      	movs	r3, #8
 8007768:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	61ba      	str	r2, [r7, #24]
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800777a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8091 	beq.w	80078a4 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007784:	2b20      	cmp	r3, #32
 8007786:	d006      	beq.n	8007796 <create_name+0x1b6>
 8007788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800778a:	2b2e      	cmp	r3, #46	; 0x2e
 800778c:	d10a      	bne.n	80077a4 <create_name+0x1c4>
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	429a      	cmp	r2, r3
 8007794:	d006      	beq.n	80077a4 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8007796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800779a:	f043 0303 	orr.w	r3, r3, #3
 800779e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077a2:	e07e      	b.n	80078a2 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80077a4:	6a3a      	ldr	r2, [r7, #32]
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d203      	bcs.n	80077b4 <create_name+0x1d4>
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d123      	bne.n	80077fc <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2b0b      	cmp	r3, #11
 80077b8:	d106      	bne.n	80077c8 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80077ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077be:	f043 0303 	orr.w	r3, r3, #3
 80077c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077c6:	e076      	b.n	80078b6 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d005      	beq.n	80077dc <create_name+0x1fc>
 80077d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077d4:	f043 0303 	orr.w	r3, r3, #3
 80077d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d867      	bhi.n	80078b4 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	61bb      	str	r3, [r7, #24]
 80077e8:	2308      	movs	r3, #8
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	230b      	movs	r3, #11
 80077ee:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80077f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077fa:	e052      	b.n	80078a2 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80077fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007800:	d914      	bls.n	800782c <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f001 ff94 	bl	8009734 <ff_convert>
 800780c:	4603      	mov	r3, r0
 800780e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <create_name+0x240>
 8007816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007818:	3b80      	subs	r3, #128	; 0x80
 800781a:	4a24      	ldr	r2, [pc, #144]	; (80078ac <create_name+0x2cc>)
 800781c:	5cd3      	ldrb	r3, [r2, r3]
 800781e:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007824:	f043 0302 	orr.w	r3, r3, #2
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800782c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <create_name+0x262>
 8007832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007834:	4619      	mov	r1, r3
 8007836:	481e      	ldr	r0, [pc, #120]	; (80078b0 <create_name+0x2d0>)
 8007838:	f7fe f9c0 	bl	8005bbc <chk_chr>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007842:	235f      	movs	r3, #95	; 0x5f
 8007844:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800784a:	f043 0303 	orr.w	r3, r3, #3
 800784e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007852:	e01b      	b.n	800788c <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d909      	bls.n	800786e <create_name+0x28e>
 800785a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800785c:	2b5a      	cmp	r3, #90	; 0x5a
 800785e:	d806      	bhi.n	800786e <create_name+0x28e>
					b |= 2;
 8007860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800786c:	e00e      	b.n	800788c <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800786e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007870:	2b60      	cmp	r3, #96	; 0x60
 8007872:	d90b      	bls.n	800788c <create_name+0x2ac>
 8007874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007876:	2b7a      	cmp	r3, #122	; 0x7a
 8007878:	d808      	bhi.n	800788c <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800787a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007888:	3b20      	subs	r3, #32
 800788a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	6239      	str	r1, [r7, #32]
 800789a:	4413      	add	r3, r2
 800789c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80078a2:	e762      	b.n	800776a <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80078a4:	bf00      	nop
 80078a6:	e006      	b.n	80078b6 <create_name+0x2d6>
 80078a8:	0800a260 	.word	0x0800a260
 80078ac:	0800cae8 	.word	0x0800cae8
 80078b0:	0800a26c 	.word	0x0800a26c
			if (si > di) break;			/* No extension */
 80078b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2be5      	cmp	r3, #229	; 0xe5
 80078c2:	d105      	bne.n	80078d0 <create_name+0x2f0>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	2205      	movs	r2, #5
 80078ce:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d104      	bne.n	80078e0 <create_name+0x300>
 80078d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80078e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078e4:	f003 030c 	and.w	r3, r3, #12
 80078e8:	2b0c      	cmp	r3, #12
 80078ea:	d005      	beq.n	80078f8 <create_name+0x318>
 80078ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d105      	bne.n	8007904 <create_name+0x324>
		cf |= NS_LFN;
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d117      	bne.n	8007940 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	2b01      	cmp	r3, #1
 800791a:	d105      	bne.n	8007928 <create_name+0x348>
 800791c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007920:	f043 0310 	orr.w	r3, r3, #16
 8007924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007928:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800792c:	f003 030c 	and.w	r3, r3, #12
 8007930:	2b04      	cmp	r3, #4
 8007932:	d105      	bne.n	8007940 <create_name+0x360>
 8007934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007938:	f043 0308 	orr.w	r3, r3, #8
 800793c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	330b      	adds	r3, #11
 800794a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800794e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007950:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007952:	4618      	mov	r0, r3
 8007954:	3728      	adds	r7, #40	; 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop

0800795c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b2f      	cmp	r3, #47	; 0x2f
 800796c:	d003      	beq.n	8007976 <follow_path+0x1a>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b5c      	cmp	r3, #92	; 0x5c
 8007974:	d102      	bne.n	800797c <follow_path+0x20>
		path++;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007982:	461a      	mov	r2, r3
 8007984:	2300      	movs	r3, #0
 8007986:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b1f      	cmp	r3, #31
 800798e:	d80c      	bhi.n	80079aa <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007990:	2100      	movs	r1, #0
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7fe ffe9 	bl	800696a <dir_sdi>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a2:	461a      	mov	r2, r3
 80079a4:	2300      	movs	r3, #0
 80079a6:	6153      	str	r3, [r2, #20]
 80079a8:	e049      	b.n	8007a3e <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079aa:	463b      	mov	r3, r7
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fe16 	bl	80075e0 <create_name>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d13a      	bne.n	8007a34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fc1e 	bl	8007200 <dir_find>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	7adb      	ldrb	r3, [r3, #11]
 80079d2:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d12b      	bne.n	8007a38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d126      	bne.n	8007a38 <follow_path+0xdc>
 80079ea:	2305      	movs	r3, #5
 80079ec:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80079ee:	e023      	b.n	8007a38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d120      	bne.n	8007a3c <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	330b      	adds	r3, #11
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	f003 0310 	and.w	r3, r3, #16
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007a12:	2305      	movs	r3, #5
 8007a14:	73fb      	strb	r3, [r7, #15]
 8007a16:	e012      	b.n	8007a3e <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68b9      	ldr	r1, [r7, #8]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fa07 	bl	8006e36 <ld_clust>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a32:	e7ba      	b.n	80079aa <follow_path+0x4e>
			if (res != FR_OK) break;
 8007a34:	bf00      	nop
 8007a36:	e002      	b.n	8007a3e <follow_path+0xe2>
				break;
 8007a38:	bf00      	nop
 8007a3a:	e000      	b.n	8007a3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a3c:	bf00      	nop
		}
	}

	return res;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d031      	beq.n	8007ac2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e002      	b.n	8007a6c <get_ldnumber+0x24>
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b1f      	cmp	r3, #31
 8007a72:	d903      	bls.n	8007a7c <get_ldnumber+0x34>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b3a      	cmp	r3, #58	; 0x3a
 8007a7a:	d1f4      	bne.n	8007a66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b3a      	cmp	r3, #58	; 0x3a
 8007a82:	d11c      	bne.n	8007abe <get_ldnumber+0x76>
			tp = *path;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	60fa      	str	r2, [r7, #12]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	3b30      	subs	r3, #48	; 0x30
 8007a94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b09      	cmp	r3, #9
 8007a9a:	d80e      	bhi.n	8007aba <get_ldnumber+0x72>
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d10a      	bne.n	8007aba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d107      	bne.n	8007aba <get_ldnumber+0x72>
					vol = (int)i;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	e002      	b.n	8007ac4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ac2:	693b      	ldr	r3, [r7, #16]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr
	...

08007ad0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	711a      	strb	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aea:	461a      	mov	r2, r3
 8007aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007af0:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7fe fa8b 	bl	8006010 <move_window>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <check_fs+0x34>
		return 3;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e04a      	b.n	8007b9a <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	b21a      	sxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007b18:	b21b      	sxth	r3, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	b21b      	sxth	r3, r3
 8007b1e:	4a21      	ldr	r2, [pc, #132]	; (8007ba4 <check_fs+0xd4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d001      	beq.n	8007b28 <check_fs+0x58>
		return 2;
 8007b24:	2302      	movs	r3, #2
 8007b26:	e038      	b.n	8007b9a <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3336      	adds	r3, #54	; 0x36
 8007b2c:	3303      	adds	r3, #3
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	061a      	lsls	r2, r3, #24
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3336      	adds	r3, #54	; 0x36
 8007b36:	3302      	adds	r3, #2
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	041b      	lsls	r3, r3, #16
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	3236      	adds	r2, #54	; 0x36
 8007b42:	3201      	adds	r2, #1
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	0212      	lsls	r2, r2, #8
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b56:	4a14      	ldr	r2, [pc, #80]	; (8007ba8 <check_fs+0xd8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d101      	bne.n	8007b60 <check_fs+0x90>
		return 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e01c      	b.n	8007b9a <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3352      	adds	r3, #82	; 0x52
 8007b64:	3303      	adds	r3, #3
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	061a      	lsls	r2, r3, #24
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	3352      	adds	r3, #82	; 0x52
 8007b6e:	3302      	adds	r3, #2
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	4313      	orrs	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	3252      	adds	r2, #82	; 0x52
 8007b7a:	3201      	adds	r2, #1
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	0212      	lsls	r2, r2, #8
 8007b80:	4313      	orrs	r3, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b8e:	4a06      	ldr	r2, [pc, #24]	; (8007ba8 <check_fs+0xd8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <check_fs+0xc8>
		return 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e000      	b.n	8007b9a <check_fs+0xca>

	return 1;
 8007b98:	2301      	movs	r3, #1
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	ffffaa55 	.word	0xffffaa55
 8007ba8:	00544146 	.word	0x00544146

08007bac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b096      	sub	sp, #88	; 0x58
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f7ff ff41 	bl	8007a48 <get_ldnumber>
 8007bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	da01      	bge.n	8007bd2 <find_volume+0x26>
 8007bce:	230b      	movs	r3, #11
 8007bd0:	e311      	b.n	80081f6 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007bd2:	4a98      	ldr	r2, [pc, #608]	; (8007e34 <find_volume+0x288>)
 8007bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <find_volume+0x3a>
 8007be2:	230c      	movs	r3, #12
 8007be4:	e307      	b.n	80081f6 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bea:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01c      	beq.n	8007c32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd fedf 	bl	80059c4 <disk_status>
 8007c06:	4603      	mov	r3, r0
 8007c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10c      	bne.n	8007c32 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <find_volume+0x82>
 8007c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c2a:	230a      	movs	r3, #10
 8007c2c:	e2e3      	b.n	80081f6 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e2e1      	b.n	80081f6 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c46:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fd fed1 	bl	80059f8 <disk_initialize>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e2c4      	b.n	80081f6 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <find_volume+0xd6>
 8007c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007c7e:	230a      	movs	r3, #10
 8007c80:	e2b9      	b.n	80081f6 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c88:	7858      	ldrb	r0, [r3, #1]
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c90:	330a      	adds	r3, #10
 8007c92:	461a      	mov	r2, r3
 8007c94:	2102      	movs	r1, #2
 8007c96:	f7fd ff15 	bl	8005ac4 <disk_ioctl>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10d      	bne.n	8007cbc <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca6:	895b      	ldrh	r3, [r3, #10]
 8007ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cac:	d306      	bcc.n	8007cbc <find_volume+0x110>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	895b      	ldrh	r3, [r3, #10]
 8007cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cba:	d901      	bls.n	8007cc0 <find_volume+0x114>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e29a      	b.n	80081f6 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007cc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007cc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cc8:	f7ff ff02 	bl	8007ad0 <check_fs>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007cd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d153      	bne.n	8007d82 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007cda:	2300      	movs	r3, #0
 8007cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8007cde:	e028      	b.n	8007d32 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007cea:	4413      	add	r3, r2
 8007cec:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d012      	beq.n	8007d1e <find_volume+0x172>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	330b      	adds	r3, #11
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	061a      	lsls	r2, r3, #24
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	330a      	adds	r3, #10
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d0c:	3209      	adds	r2, #9
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	0212      	lsls	r2, r2, #8
 8007d12:	4313      	orrs	r3, r2
 8007d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d16:	3208      	adds	r2, #8
 8007d18:	7812      	ldrb	r2, [r2, #0]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	e000      	b.n	8007d20 <find_volume+0x174>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	3358      	adds	r3, #88	; 0x58
 8007d26:	443b      	add	r3, r7
 8007d28:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	3301      	adds	r3, #1
 8007d30:	643b      	str	r3, [r7, #64]	; 0x40
 8007d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d9d3      	bls.n	8007ce0 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007d38:	2300      	movs	r3, #0
 8007d3a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <find_volume+0x19c>
 8007d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d44:	3b01      	subs	r3, #1
 8007d46:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	3358      	adds	r3, #88	; 0x58
 8007d4e:	443b      	add	r3, r7
 8007d50:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d54:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <find_volume+0x1bc>
 8007d5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d60:	f7ff feb6 	bl	8007ad0 <check_fs>
 8007d64:	4603      	mov	r3, r0
 8007d66:	e000      	b.n	8007d6a <find_volume+0x1be>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007d6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d005      	beq.n	8007d82 <find_volume+0x1d6>
 8007d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d78:	3301      	adds	r3, #1
 8007d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d9e2      	bls.n	8007d48 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d101      	bne.n	8007d8e <find_volume+0x1e2>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e233      	b.n	80081f6 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <find_volume+0x1ee>
 8007d96:	230d      	movs	r3, #13
 8007d98:	e22d      	b.n	80081f6 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	7b1b      	ldrb	r3, [r3, #12]
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	b21a      	sxth	r2, r3
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	7adb      	ldrb	r3, [r3, #11]
 8007da6:	b21b      	sxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b21a      	sxth	r2, r3
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	895b      	ldrh	r3, [r3, #10]
 8007db4:	b21b      	sxth	r3, r3
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d001      	beq.n	8007dbe <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007dba:	230d      	movs	r3, #13
 8007dbc:	e21b      	b.n	80081f6 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	7ddb      	ldrb	r3, [r3, #23]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	7d9b      	ldrb	r3, [r3, #22]
 8007dca:	b21b      	sxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	b21b      	sxth	r3, r3
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d112      	bne.n	8007e00 <find_volume+0x254>
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007de0:	061a      	lsls	r2, r3, #24
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	4313      	orrs	r3, r2
 8007dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dee:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007df2:	0212      	lsls	r2, r2, #8
 8007df4:	4313      	orrs	r3, r2
 8007df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	461a      	mov	r2, r3
 8007e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0a:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	7c1a      	ldrb	r2, [r3, #16]
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e16:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1e:	78db      	ldrb	r3, [r3, #3]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d009      	beq.n	8007e38 <find_volume+0x28c>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2a:	78db      	ldrb	r3, [r3, #3]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d003      	beq.n	8007e38 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007e30:	230d      	movs	r3, #13
 8007e32:	e1e0      	b.n	80081f6 <find_volume+0x64a>
 8007e34:	20002700 	.word	0x20002700
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3e:	78db      	ldrb	r3, [r3, #3]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	7b5a      	ldrb	r2, [r3, #13]
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5c:	789b      	ldrb	r3, [r3, #2]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <find_volume+0x2d0>
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	789b      	ldrb	r3, [r3, #2]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e72:	789b      	ldrb	r3, [r3, #2]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007e7c:	230d      	movs	r3, #13
 8007e7e:	e1ba      	b.n	80081f6 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	7c9b      	ldrb	r3, [r3, #18]
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	b21a      	sxth	r2, r3
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	7c5b      	ldrb	r3, [r3, #17]
 8007e8c:	b21b      	sxth	r3, r3
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	b21b      	sxth	r3, r3
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea2:	891b      	ldrh	r3, [r3, #8]
 8007ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007eaa:	8952      	ldrh	r2, [r2, #10]
 8007eac:	0952      	lsrs	r2, r2, #5
 8007eae:	b292      	uxth	r2, r2
 8007eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007eb4:	fb01 f202 	mul.w	r2, r1, r2
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007ec0:	230d      	movs	r3, #13
 8007ec2:	e198      	b.n	80081f6 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	7d1b      	ldrb	r3, [r3, #20]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b21a      	sxth	r2, r3
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	7cdb      	ldrb	r3, [r3, #19]
 8007ed0:	b21b      	sxth	r3, r3
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d112      	bne.n	8007f06 <find_volume+0x35a>
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007ee6:	061a      	lsls	r2, r3, #24
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007ef8:	0212      	lsls	r2, r2, #8
 8007efa:	4313      	orrs	r3, r2
 8007efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007efe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	7bdb      	ldrb	r3, [r3, #15]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	b21a      	sxth	r2, r3
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	7b9b      	ldrb	r3, [r3, #14]
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	4313      	orrs	r3, r2
 8007f16:	b21b      	sxth	r3, r3
 8007f18:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007f1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <find_volume+0x378>
 8007f20:	230d      	movs	r3, #13
 8007f22:	e168      	b.n	80081f6 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007f24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	4413      	add	r3, r2
 8007f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f30:	8911      	ldrh	r1, [r2, #8]
 8007f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f38:	8952      	ldrh	r2, [r2, #10]
 8007f3a:	0952      	lsrs	r2, r2, #5
 8007f3c:	b292      	uxth	r2, r2
 8007f3e:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f42:	b292      	uxth	r2, r2
 8007f44:	4413      	add	r3, r2
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d201      	bcs.n	8007f54 <find_volume+0x3a8>
 8007f50:	230d      	movs	r3, #13
 8007f52:	e150      	b.n	80081f6 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f60:	7892      	ldrb	r2, [r2, #2]
 8007f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <find_volume+0x3c6>
 8007f6e:	230d      	movs	r3, #13
 8007f70:	e141      	b.n	80081f6 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d902      	bls.n	8007f88 <find_volume+0x3dc>
 8007f82:	2302      	movs	r3, #2
 8007f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d902      	bls.n	8007f98 <find_volume+0x3ec>
 8007f92:	2303      	movs	r3, #3
 8007f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	3302      	adds	r3, #2
 8007f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa2:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007faa:	461a      	mov	r2, r3
 8007fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fae:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007fb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fb4:	4413      	add	r3, r2
 8007fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fbc:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	4413      	add	r3, r2
 8007fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fca:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d124      	bne.n	800801e <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fda:	891b      	ldrh	r3, [r3, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <find_volume+0x438>
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	e108      	b.n	80081f6 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007fea:	061a      	lsls	r2, r3, #24
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007ff2:	041b      	lsls	r3, r3, #16
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff8:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007ffc:	0212      	lsls	r2, r2, #8
 8007ffe:	4313      	orrs	r3, r2
 8008000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008002:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008006:	4313      	orrs	r3, r2
 8008008:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800800a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800800e:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	647b      	str	r3, [r7, #68]	; 0x44
 800801c:	e02b      	b.n	8008076 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008024:	891b      	ldrh	r3, [r3, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <find_volume+0x482>
 800802a:	230d      	movs	r3, #13
 800802c:	e0e3      	b.n	80081f6 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	6a1a      	ldr	r2, [r3, #32]
 8008036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008038:	4413      	add	r3, r2
 800803a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800803c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008040:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008042:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008046:	2b02      	cmp	r3, #2
 8008048:	d105      	bne.n	8008056 <find_volume+0x4aa>
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	e00e      	b.n	8008074 <find_volume+0x4c8>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805c:	695a      	ldr	r2, [r3, #20]
 800805e:	4613      	mov	r3, r2
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	4413      	add	r3, r2
 8008064:	085a      	lsrs	r2, r3, #1
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008074:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008084:	895b      	ldrh	r3, [r3, #10]
 8008086:	4619      	mov	r1, r3
 8008088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808a:	440b      	add	r3, r1
 800808c:	3b01      	subs	r3, #1
 800808e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008090:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008094:	8949      	ldrh	r1, [r1, #10]
 8008096:	fbb3 f3f1 	udiv	r3, r3, r1
 800809a:	429a      	cmp	r2, r3
 800809c:	d201      	bcs.n	80080a2 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800809e:	230d      	movs	r3, #13
 80080a0:	e0a9      	b.n	80081f6 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a8:	461a      	mov	r2, r3
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ae:	6113      	str	r3, [r2, #16]
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080be:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c6:	2280      	movs	r2, #128	; 0x80
 80080c8:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80080ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d17a      	bne.n	80081c8 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	b21a      	sxth	r2, r3
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	4313      	orrs	r3, r2
 80080e6:	b21b      	sxth	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d16d      	bne.n	80081c8 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80080ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ee:	3301      	adds	r3, #1
 80080f0:	4619      	mov	r1, r3
 80080f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080f4:	f7fd ff8c 	bl	8006010 <move_window>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d164      	bne.n	80081c8 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008104:	2200      	movs	r2, #0
 8008106:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	b21a      	sxth	r2, r3
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008118:	b21b      	sxth	r3, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	b21b      	sxth	r3, r3
 800811e:	4a38      	ldr	r2, [pc, #224]	; (8008200 <find_volume+0x654>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d151      	bne.n	80081c8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	78db      	ldrb	r3, [r3, #3]
 8008128:	061a      	lsls	r2, r3, #24
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	789b      	ldrb	r3, [r3, #2]
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	4313      	orrs	r3, r2
 8008132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008134:	7852      	ldrb	r2, [r2, #1]
 8008136:	0212      	lsls	r2, r2, #8
 8008138:	4313      	orrs	r3, r2
 800813a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813c:	7812      	ldrb	r2, [r2, #0]
 800813e:	4313      	orrs	r3, r2
 8008140:	4a30      	ldr	r2, [pc, #192]	; (8008204 <find_volume+0x658>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d140      	bne.n	80081c8 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800814c:	061a      	lsls	r2, r3, #24
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	4313      	orrs	r3, r2
 8008158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800815a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800815e:	0212      	lsls	r2, r2, #8
 8008160:	4313      	orrs	r3, r2
 8008162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008164:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008168:	4313      	orrs	r3, r2
 800816a:	4a27      	ldr	r2, [pc, #156]	; (8008208 <find_volume+0x65c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d12b      	bne.n	80081c8 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008176:	061a      	lsls	r2, r3, #24
 8008178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	4313      	orrs	r3, r2
 8008182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008184:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008188:	0212      	lsls	r2, r2, #8
 800818a:	4313      	orrs	r3, r2
 800818c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008192:	4313      	orrs	r3, r2
 8008194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800819a:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80081a2:	061a      	lsls	r2, r3, #24
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	4313      	orrs	r3, r2
 80081ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80081b4:	0212      	lsls	r2, r2, #8
 80081b6:	4313      	orrs	r3, r2
 80081b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ba:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80081be:	4313      	orrs	r3, r2
 80081c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081c6:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ce:	461a      	mov	r2, r3
 80081d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081d4:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80081d6:	4b0d      	ldr	r3, [pc, #52]	; (800820c <find_volume+0x660>)
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	b29a      	uxth	r2, r3
 80081de:	4b0b      	ldr	r3, [pc, #44]	; (800820c <find_volume+0x660>)
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	4b0a      	ldr	r3, [pc, #40]	; (800820c <find_volume+0x660>)
 80081e4:	881a      	ldrh	r2, [r3, #0]
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ec:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80081ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081f0:	f7fd fe92 	bl	8005f18 <clear_lock>
#endif

	return FR_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3758      	adds	r7, #88	; 0x58
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	ffffaa55 	.word	0xffffaa55
 8008204:	41615252 	.word	0x41615252
 8008208:	61417272 	.word	0x61417272
 800820c:	20002704 	.word	0x20002704

08008210 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d02a      	beq.n	8008278 <validate+0x68>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d024      	beq.n	8008278 <validate+0x68>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <validate+0x68>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800824c:	88da      	ldrh	r2, [r3, #6]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008254:	889b      	ldrh	r3, [r3, #4]
 8008256:	429a      	cmp	r2, r3
 8008258:	d10e      	bne.n	8008278 <validate+0x68>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	4618      	mov	r0, r3
 800826a:	f7fd fbab 	bl	80059c4 <disk_status>
 800826e:	4603      	mov	r3, r0
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008278:	2309      	movs	r3, #9
 800827a:	e000      	b.n	800827e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff fbd2 	bl	8007a48 <get_ldnumber>
 80082a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da01      	bge.n	80082b0 <f_mount+0x28>
 80082ac:	230b      	movs	r3, #11
 80082ae:	e02f      	b.n	8008310 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082b0:	4a19      	ldr	r2, [pc, #100]	; (8008318 <f_mount+0x90>)
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80082c0:	69b8      	ldr	r0, [r7, #24]
 80082c2:	f7fd fe29 	bl	8005f18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d004      	beq.n	80082e0 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	490d      	ldr	r1, [pc, #52]	; (8008318 <f_mount+0x90>)
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <f_mount+0x6e>
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <f_mount+0x72>
 80082f6:	2300      	movs	r3, #0
 80082f8:	e00a      	b.n	8008310 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80082fa:	f107 0108 	add.w	r1, r7, #8
 80082fe:	f107 030c 	add.w	r3, r7, #12
 8008302:	2200      	movs	r2, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fc51 	bl	8007bac <find_volume>
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800830e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3720      	adds	r7, #32
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20002700 	.word	0x20002700

0800831c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800832a:	f843 0c4c 	str.w	r0, [r3, #-76]
 800832e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008332:	f843 1c50 	str.w	r1, [r3, #-80]
 8008336:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800833a:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800833e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008342:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <f_open+0x32>
 800834a:	2309      	movs	r3, #9
 800834c:	e2f7      	b.n	800893e <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800834e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008352:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835a:	461a      	mov	r2, r3
 800835c:	2300      	movs	r3, #0
 800835e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008360:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008364:	461a      	mov	r2, r3
 8008366:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800836a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800837a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800837e:	f023 0301 	bic.w	r3, r3, #1
 8008382:	b2da      	uxtb	r2, r3
 8008384:	f107 0118 	add.w	r1, r7, #24
 8008388:	3910      	subs	r1, #16
 800838a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800838e:	3b18      	subs	r3, #24
 8008390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff fc09 	bl	8007bac <find_volume>
 800839a:	4603      	mov	r3, r0
 800839c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083a0:	f102 0217 	add.w	r2, r2, #23
 80083a4:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80083a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083aa:	f103 0317 	add.w	r3, r3, #23
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 82bf 	bne.w	8008934 <f_open+0x618>
		INIT_BUF(dj);
 80083b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083ba:	461a      	mov	r2, r3
 80083bc:	f107 0318 	add.w	r3, r7, #24
 80083c0:	3b04      	subs	r3, #4
 80083c2:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80083c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083ca:	461a      	mov	r2, r3
 80083cc:	4bd4      	ldr	r3, [pc, #848]	; (8008720 <f_open+0x404>)
 80083ce:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80083d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083d6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80083da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80083de:	3b18      	subs	r3, #24
 80083e0:	4611      	mov	r1, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff faba 	bl	800795c <follow_path>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083ee:	f102 0217 	add.w	r2, r2, #23
 80083f2:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80083f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083f8:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80083fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008400:	f102 0210 	add.w	r2, r2, #16
 8008404:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008406:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800840a:	f103 0317 	add.w	r3, r3, #23
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d126      	bne.n	8008462 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8008414:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008418:	f103 0310 	add.w	r3, r3, #16
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <f_open+0x114>
				res = FR_INVALID_NAME;
 8008422:	2306      	movs	r3, #6
 8008424:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008428:	f102 0217 	add.w	r2, r2, #23
 800842c:	7013      	strb	r3, [r2, #0]
 800842e:	e018      	b.n	8008462 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008430:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008434:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	bf14      	ite	ne
 8008440:	2301      	movne	r3, #1
 8008442:	2300      	moveq	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800844c:	3b18      	subs	r3, #24
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7fd fbcd 	bl	8005bf0 <chk_lock>
 8008456:	4603      	mov	r3, r0
 8008458:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800845c:	f102 0217 	add.w	r2, r2, #23
 8008460:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008462:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008466:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800846a:	f003 031c 	and.w	r3, r3, #28
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 813c 	beq.w	80086ec <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8008474:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008478:	f103 0317 	add.w	r3, r3, #23
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d02e      	beq.n	80084e0 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008482:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008486:	f103 0317 	add.w	r3, r3, #23
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b04      	cmp	r3, #4
 800848e:	d112      	bne.n	80084b6 <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008490:	f7fd fc1e 	bl	8005cd0 <enq_lock>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <f_open+0x18e>
 800849a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800849e:	3b18      	subs	r3, #24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe ff79 	bl	8007398 <dir_register>
 80084a6:	4603      	mov	r3, r0
 80084a8:	e000      	b.n	80084ac <f_open+0x190>
 80084aa:	2312      	movs	r3, #18
 80084ac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084b0:	f102 0217 	add.w	r2, r2, #23
 80084b4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084ba:	461a      	mov	r2, r3
 80084bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084c0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80084c4:	f043 0308 	orr.w	r3, r3, #8
 80084c8:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80084cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084d0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80084d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084d8:	f102 0210 	add.w	r2, r2, #16
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e01f      	b.n	8008520 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084e4:	f103 0310 	add.w	r3, r3, #16
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330b      	adds	r3, #11
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0311 	and.w	r3, r3, #17
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d006      	beq.n	8008504 <f_open+0x1e8>
					res = FR_DENIED;
 80084f6:	2307      	movs	r3, #7
 80084f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084fc:	f102 0217 	add.w	r2, r2, #23
 8008500:	7013      	strb	r3, [r2, #0]
 8008502:	e00d      	b.n	8008520 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008504:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008508:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <f_open+0x204>
						res = FR_EXIST;
 8008514:	2308      	movs	r3, #8
 8008516:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800851a:	f102 0217 	add.w	r2, r2, #23
 800851e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008520:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008524:	f103 0317 	add.w	r3, r3, #23
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f040 8113 	bne.w	8008756 <f_open+0x43a>
 8008530:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008534:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 810a 	beq.w	8008756 <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8008542:	f7fd f9dd 	bl	8005900 <get_fattime>
 8008546:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800854a:	f103 030c 	add.w	r3, r3, #12
 800854e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008550:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008554:	f103 0310 	add.w	r3, r3, #16
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	330e      	adds	r3, #14
 800855c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008560:	f102 020c 	add.w	r2, r2, #12
 8008564:	6812      	ldr	r2, [r2, #0]
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800856e:	f103 030c 	add.w	r3, r3, #12
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	b29a      	uxth	r2, r3
 800857a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800857e:	f103 0310 	add.w	r3, r3, #16
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	330f      	adds	r3, #15
 8008586:	b2d2      	uxtb	r2, r2
 8008588:	701a      	strb	r2, [r3, #0]
 800858a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800858e:	f103 030c 	add.w	r3, r3, #12
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	0c1a      	lsrs	r2, r3, #16
 8008596:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800859a:	f103 0310 	add.w	r3, r3, #16
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3310      	adds	r3, #16
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]
 80085a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085aa:	f103 030c 	add.w	r3, r3, #12
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	0e1a      	lsrs	r2, r3, #24
 80085b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085b6:	f103 0310 	add.w	r3, r3, #16
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3311      	adds	r3, #17
 80085be:	b2d2      	uxtb	r2, r2
 80085c0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80085c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085c6:	f103 0310 	add.w	r3, r3, #16
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	330b      	adds	r3, #11
 80085ce:	2200      	movs	r2, #0
 80085d0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80085d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085d6:	f103 0310 	add.w	r3, r3, #16
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	331c      	adds	r3, #28
 80085de:	2200      	movs	r2, #0
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085e6:	f103 0310 	add.w	r3, r3, #16
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	331d      	adds	r3, #29
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085f6:	f103 0310 	add.w	r3, r3, #16
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	331e      	adds	r3, #30
 80085fe:	2200      	movs	r2, #0
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008606:	f103 0310 	add.w	r3, r3, #16
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	331f      	adds	r3, #31
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008616:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800861a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800861e:	f102 0210 	add.w	r2, r2, #16
 8008622:	6811      	ldr	r1, [r2, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fc06 	bl	8006e36 <ld_clust>
 800862a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800862e:	f103 0308 	add.w	r3, r3, #8
 8008632:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008634:	2100      	movs	r1, #0
 8008636:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800863a:	f103 0310 	add.w	r3, r3, #16
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	f7fe fc27 	bl	8006e92 <st_clust>
				dj.fs->wflag = 1;
 8008644:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008648:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800864c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008650:	2201      	movs	r2, #1
 8008652:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008654:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008658:	f103 0308 	add.w	r3, r3, #8
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d079      	beq.n	8008756 <f_open+0x43a>
					dw = dj.fs->winsect;
 8008662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008666:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800866a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008674:	f102 020c 	add.w	r2, r2, #12
 8008678:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800867a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800867e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008682:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008686:	f102 0208 	add.w	r2, r2, #8
 800868a:	6811      	ldr	r1, [r2, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe f823 	bl	80066d8 <remove_chain>
 8008692:	4603      	mov	r3, r0
 8008694:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008698:	f102 0217 	add.w	r2, r2, #23
 800869c:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800869e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086a2:	f103 0317 	add.w	r3, r3, #23
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d154      	bne.n	8008756 <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80086ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086b0:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 80086b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086b8:	f103 0308 	add.w	r3, r3, #8
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3b01      	subs	r3, #1
 80086c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086c4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80086c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086ca:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 80086ce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086d2:	f102 020c 	add.w	r2, r2, #12
 80086d6:	6811      	ldr	r1, [r2, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fd fc99 	bl	8006010 <move_window>
 80086de:	4603      	mov	r3, r0
 80086e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80086e4:	f102 0217 	add.w	r2, r2, #23
 80086e8:	7013      	strb	r3, [r2, #0]
 80086ea:	e034      	b.n	8008756 <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80086ec:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086f0:	f103 0317 	add.w	r3, r3, #23
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d12d      	bne.n	8008756 <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80086fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80086fe:	f103 0310 	add.w	r3, r3, #16
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	330b      	adds	r3, #11
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <f_open+0x408>
					res = FR_NO_FILE;
 8008710:	2304      	movs	r3, #4
 8008712:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008716:	f102 0217 	add.w	r2, r2, #23
 800871a:	7013      	strb	r3, [r2, #0]
 800871c:	e01b      	b.n	8008756 <f_open+0x43a>
 800871e:	bf00      	nop
 8008720:	20002720 	.word	0x20002720
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008724:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008728:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d010      	beq.n	8008756 <f_open+0x43a>
 8008734:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008738:	f103 0310 	add.w	r3, r3, #16
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330b      	adds	r3, #11
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <f_open+0x43a>
						res = FR_DENIED;
 800874a:	2307      	movs	r3, #7
 800874c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008750:	f102 0217 	add.w	r2, r2, #23
 8008754:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008756:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800875a:	f103 0317 	add.w	r3, r3, #23
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d157      	bne.n	8008814 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008764:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008768:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <f_open+0x46e>
				mode |= FA__WRITTEN;
 8008774:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008778:	461a      	mov	r2, r3
 800877a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800877e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008782:	f043 0320 	orr.w	r3, r3, #32
 8008786:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800878a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800878e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800879c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80087a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087a4:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80087a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80087aa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b2:	461a      	mov	r2, r3
 80087b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80087b8:	f103 0310 	add.w	r3, r3, #16
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80087c4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bf14      	ite	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	2300      	moveq	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087dc:	3b18      	subs	r3, #24
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fa99 	bl	8005d18 <inc_lock>
 80087e6:	4602      	mov	r2, r0
 80087e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80087ec:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80087f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80087f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80087fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80087fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	2b00      	cmp	r3, #0
 8008806:	d105      	bne.n	8008814 <f_open+0x4f8>
 8008808:	2302      	movs	r3, #2
 800880a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800880e:	f102 0217 	add.w	r2, r2, #23
 8008812:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008814:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008818:	f103 0317 	add.w	r3, r3, #23
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f040 8088 	bne.w	8008934 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8008824:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008828:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008830:	461a      	mov	r2, r3
 8008832:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008836:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800883a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800883c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008840:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008848:	2200      	movs	r2, #0
 800884a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800884c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008850:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008854:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008858:	f102 0210 	add.w	r2, r2, #16
 800885c:	6811      	ldr	r1, [r2, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fae9 	bl	8006e36 <ld_clust>
 8008864:	4602      	mov	r2, r0
 8008866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800886a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800886e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008872:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008874:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008878:	f103 0310 	add.w	r3, r3, #16
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	331f      	adds	r3, #31
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	061a      	lsls	r2, r3, #24
 8008884:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008888:	f103 0310 	add.w	r3, r3, #16
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	331e      	adds	r3, #30
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	4313      	orrs	r3, r2
 8008896:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800889a:	f102 0210 	add.w	r2, r2, #16
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	321d      	adds	r2, #29
 80088a2:	7812      	ldrb	r2, [r2, #0]
 80088a4:	0212      	lsls	r2, r2, #8
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088ac:	f102 0210 	add.w	r2, r2, #16
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	321c      	adds	r2, #28
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80088bc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80088c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088c4:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80088c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088ca:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80088ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d2:	461a      	mov	r2, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80088d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088dc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80088e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e4:	461a      	mov	r2, r3
 80088e6:	2300      	movs	r3, #0
 80088e8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80088ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80088ee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80088f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f6:	461a      	mov	r2, r3
 80088f8:	2300      	movs	r3, #0
 80088fa:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80088fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008900:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008904:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008908:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800890c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008910:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008916:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800891a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008924:	88da      	ldrh	r2, [r3, #6]
 8008926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800892a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800892e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008932:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008934:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008938:	f103 0317 	add.w	r3, r3, #23
 800893c:	781b      	ldrb	r3, [r3, #0]
}
 800893e:	4618      	mov	r0, r3
 8008940:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop

0800894c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	; 0x28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2200      	movs	r2, #0
 8008962:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f7ff fc53 	bl	8008210 <validate>
 800896a:	4603      	mov	r3, r0
 800896c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <f_write+0x2c>
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	e21e      	b.n	8008db6 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897e:	79db      	ldrb	r3, [r3, #7]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898a:	79db      	ldrb	r3, [r3, #7]
 800898c:	e213      	b.n	8008db6 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008994:	799b      	ldrb	r3, [r3, #6]
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800899e:	2307      	movs	r3, #7
 80089a0:	e209      	b.n	8008db6 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	441a      	add	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	f080 81d9 	bcs.w	8008d6e <f_write+0x422>
 80089bc:	2300      	movs	r3, #0
 80089be:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80089c0:	e1d5      	b.n	8008d6e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089d0:	6812      	ldr	r2, [r2, #0]
 80089d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089d6:	8952      	ldrh	r2, [r2, #10]
 80089d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80089dc:	fb01 f202 	mul.w	r2, r1, r2
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8169 	bne.w	8008cba <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089fc:	8952      	ldrh	r2, [r2, #10]
 80089fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a10:	789b      	ldrb	r3, [r3, #2]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4013      	ands	r3, r2
 8008a18:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008a1a:	7dbb      	ldrb	r3, [r7, #22]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d15f      	bne.n	8008ae0 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d111      	bne.n	8008a50 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d126      	bne.n	8008a8a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fd fea7 	bl	800679a <create_chain>
 8008a4c:	6278      	str	r0, [r7, #36]	; 0x24
 8008a4e:	e01c      	b.n	8008a8a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d009      	beq.n	8008a70 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4619      	mov	r1, r3
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7fd ff3f 	bl	80068ea <clmt_clust>
 8008a6c:	6278      	str	r0, [r7, #36]	; 0x24
 8008a6e:	e00c      	b.n	8008a8a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	4619      	mov	r1, r3
 8008a82:	4610      	mov	r0, r2
 8008a84:	f7fd fe89 	bl	800679a <create_chain>
 8008a88:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 8173 	beq.w	8008d78 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d106      	bne.n	8008aa6 <f_write+0x15a>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	71da      	strb	r2, [r3, #7]
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e187      	b.n	8008db6 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aac:	d106      	bne.n	8008abc <f_write+0x170>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	71da      	strb	r2, [r3, #7]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e17c      	b.n	8008db6 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d105      	bne.n	8008ae0 <f_write+0x194>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ada:	461a      	mov	r2, r3
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	799b      	ldrb	r3, [r3, #6]
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d023      	beq.n	8008b38 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afc:	7858      	ldrb	r0, [r3, #1]
 8008afe:	68f9      	ldr	r1, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f7fc ffbb 	bl	8005a84 <disk_write>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d006      	beq.n	8008b22 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	71da      	strb	r2, [r3, #7]
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e149      	b.n	8008db6 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b28:	799b      	ldrb	r3, [r3, #6]
 8008b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b36:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7fd fb51 	bl	80061f2 <clust2sect>
 8008b50:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <f_write+0x21a>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5e:	2202      	movs	r2, #2
 8008b60:	71da      	strb	r2, [r3, #7]
 8008b62:	2302      	movs	r3, #2
 8008b64:	e127      	b.n	8008db6 <f_write+0x46a>
			sect += csect;
 8008b66:	7dbb      	ldrb	r3, [r7, #22]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b7a:	895b      	ldrh	r3, [r3, #10]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b84:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d069      	beq.n	8008c60 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008b8c:	7dba      	ldrb	r2, [r7, #22]
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b9e:	7892      	ldrb	r2, [r2, #2]
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d90a      	bls.n	8008bba <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb0:	789b      	ldrb	r3, [r3, #2]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	7dbb      	ldrb	r3, [r7, #22]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc6:	7858      	ldrb	r0, [r3, #1]
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	69b9      	ldr	r1, [r7, #24]
 8008bce:	f7fc ff59 	bl	8005a84 <disk_write>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d006      	beq.n	8008be6 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	2201      	movs	r2, #1
 8008be0:	71da      	strb	r2, [r3, #7]
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0e7      	b.n	8008db6 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d926      	bls.n	8008c46 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c00:	699a      	ldr	r2, [r3, #24]
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c12:	8952      	ldrh	r2, [r2, #10]
 8008c14:	fb02 f303 	mul.w	r3, r2, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	18d1      	adds	r1, r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c28:	895b      	ldrh	r3, [r3, #10]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f7fc ff68 	bl	8005b00 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c36:	799b      	ldrb	r3, [r3, #6]
 8008c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c44:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c52:	895b      	ldrh	r3, [r3, #10]
 8008c54:	461a      	mov	r2, r3
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	fb02 f303 	mul.w	r3, r2, r3
 8008c5c:	623b      	str	r3, [r7, #32]
				continue;
 8008c5e:	e06e      	b.n	8008d3e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d01f      	beq.n	8008cae <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d215      	bcs.n	8008cae <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c8e:	7858      	ldrb	r0, [r3, #1]
 8008c90:	68f9      	ldr	r1, [r7, #12]
 8008c92:	2301      	movs	r3, #1
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	f7fc fed5 	bl	8005a44 <disk_read>
 8008c9a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	71da      	strb	r2, [r3, #7]
 8008caa:	2301      	movs	r3, #1
 8008cac:	e083      	b.n	8008db6 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc6:	895b      	ldrh	r3, [r3, #10]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cd8:	6812      	ldr	r2, [r2, #0]
 8008cda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cde:	8952      	ldrh	r2, [r2, #10]
 8008ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ce4:	fb01 f202 	mul.w	r2, r1, r2
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	1ac3      	subs	r3, r0, r3
 8008cec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008cee:	6a3a      	ldr	r2, [r7, #32]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d901      	bls.n	8008cfa <f_write+0x3ae>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d08:	6812      	ldr	r2, [r2, #0]
 8008d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d0e:	8952      	ldrh	r2, [r2, #10]
 8008d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d14:	fb01 f202 	mul.w	r2, r1, r2
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	6a3a      	ldr	r2, [r7, #32]
 8008d20:	69b9      	ldr	r1, [r7, #24]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fc feec 	bl	8005b00 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d2e:	799b      	ldrb	r3, [r3, #6]
 8008d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d34:	b2da      	uxtb	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	4413      	add	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	4413      	add	r3, r2
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d58:	6093      	str	r3, [r2, #8]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	441a      	add	r2, r3
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f47f ae26 	bne.w	80089c2 <f_write+0x76>
 8008d76:	e000      	b.n	8008d7a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d78:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d907      	bls.n	8008d9e <f_write+0x452>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d9c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da4:	799b      	ldrb	r3, [r3, #6]
 8008da6:	f043 0320 	orr.w	r3, r3, #32
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db2:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3728      	adds	r7, #40	; 0x28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fa22 	bl	8008210 <validate>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f040 80bc 	bne.w	8008f50 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dde:	799b      	ldrb	r3, [r3, #6]
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80b3 	beq.w	8008f50 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df0:	799b      	ldrb	r3, [r3, #6]
 8008df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d01e      	beq.n	8008e38 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e06:	7858      	ldrb	r0, [r3, #1]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e10:	699a      	ldr	r2, [r3, #24]
 8008e12:	2301      	movs	r3, #1
 8008e14:	f7fc fe36 	bl	8005a84 <disk_write>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e097      	b.n	8008f52 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e28:	799b      	ldrb	r3, [r3, #6]
 8008e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e36:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f7fd f8e0 	bl	8006010 <move_window>
 8008e50:	4603      	mov	r3, r0
 8008e52:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d17a      	bne.n	8008f50 <f_sync+0x192>
				dir = fp->dir_ptr;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	330b      	adds	r3, #11
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	330b      	adds	r3, #11
 8008e6e:	f042 0220 	orr.w	r2, r2, #32
 8008e72:	b2d2      	uxtb	r2, r2
 8008e74:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	331c      	adds	r3, #28
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	331d      	adds	r3, #29
 8008e98:	b2d2      	uxtb	r2, r2
 8008e9a:	701a      	strb	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	0c1a      	lsrs	r2, r3, #16
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	331e      	adds	r3, #30
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	0e1a      	lsrs	r2, r3, #24
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	331f      	adds	r3, #31
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6938      	ldr	r0, [r7, #16]
 8008ecc:	f7fd ffe1 	bl	8006e92 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008ed0:	f7fc fd16 	bl	8005900 <get_fattime>
 8008ed4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3316      	adds	r3, #22
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	b2d2      	uxtb	r2, r2
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	0a1b      	lsrs	r3, r3, #8
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	3317      	adds	r3, #23
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	0c1a      	lsrs	r2, r3, #16
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	3318      	adds	r3, #24
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	0e1a      	lsrs	r2, r3, #24
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3319      	adds	r3, #25
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	3312      	adds	r3, #18
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	3313      	adds	r3, #19
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1e:	799b      	ldrb	r3, [r3, #6]
 8008f20:	f023 0320 	bic.w	r3, r3, #32
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd f894 	bl	8006074 <sync_fs>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff ff2b 	bl	8008dbe <f_sync>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d119      	bne.n	8008fa6 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff f94c 	bl	8008210 <validate>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d111      	bne.n	8008fa6 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fc ff80 	bl	8005e90 <dec_lock>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b090      	sub	sp, #64	; 0x40
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff f928 	bl	8008210 <validate>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008fc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <f_lseek+0x24>
 8008fce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fd2:	e2da      	b.n	800958a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fda:	79db      	ldrb	r3, [r3, #7]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe6:	79db      	ldrb	r3, [r3, #7]
 8008fe8:	e2cf      	b.n	800958a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 8124 	beq.w	8009240 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ffe:	d16c      	bne.n	80090da <f_lseek+0x12a>
			tbl = fp->cltbl;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	1d1a      	adds	r2, r3, #4
 800900e:	627a      	str	r2, [r7, #36]	; 0x24
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	2302      	movs	r3, #2
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	2b00      	cmp	r3, #0
 8009026:	d046      	beq.n	80090b6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	2300      	movs	r3, #0
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	3302      	adds	r3, #2
 8009034:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	3301      	adds	r3, #1
 800903e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800904a:	4618      	mov	r0, r3
 800904c:	f7fd f8f5 	bl	800623a <get_fat>
 8009050:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	2b01      	cmp	r3, #1
 8009056:	d806      	bhi.n	8009066 <f_lseek+0xb6>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905e:	2202      	movs	r2, #2
 8009060:	71da      	strb	r2, [r3, #7]
 8009062:	2302      	movs	r3, #2
 8009064:	e291      	b.n	800958a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800906c:	d106      	bne.n	800907c <f_lseek+0xcc>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009074:	2201      	movs	r2, #1
 8009076:	71da      	strb	r2, [r3, #7]
 8009078:	2301      	movs	r3, #1
 800907a:	e286      	b.n	800958a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	3301      	adds	r3, #1
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	429a      	cmp	r2, r3
 8009084:	d0d7      	beq.n	8009036 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	429a      	cmp	r2, r3
 800908c:	d809      	bhi.n	80090a2 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	1d1a      	adds	r2, r3, #4
 8009092:	627a      	str	r2, [r7, #36]	; 0x24
 8009094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	627a      	str	r2, [r7, #36]	; 0x24
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d3b8      	bcc.n	8009028 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80090c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d803      	bhi.n	80090d2 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	e259      	b.n	8009586 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80090d2:	2311      	movs	r3, #17
 80090d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80090d8:	e255      	b.n	8009586 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d904      	bls.n	80090f2 <f_lseek+0x142>
				ofs = fp->fsize;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f8:	461a      	mov	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 8240 	beq.w	8009586 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7fd fbec 	bl	80068ea <clmt_clust>
 8009112:	4602      	mov	r2, r0
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911a:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fd f85f 	bl	80061f2 <clust2sect>
 8009134:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <f_lseek+0x19a>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009142:	2202      	movs	r2, #2
 8009144:	71da      	strb	r2, [r3, #7]
 8009146:	2302      	movs	r3, #2
 8009148:	e21f      	b.n	800958a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800915a:	8952      	ldrh	r2, [r2, #10]
 800915c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800916c:	7892      	ldrb	r2, [r2, #2]
 800916e:	3a01      	subs	r2, #1
 8009170:	4013      	ands	r3, r2
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	4413      	add	r3, r2
 8009176:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800918c:	8952      	ldrh	r2, [r2, #10]
 800918e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009192:	fb01 f202 	mul.w	r2, r1, r2
 8009196:	1a9b      	subs	r3, r3, r2
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 81f4 	beq.w	8009586 <f_lseek+0x5d6>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	f000 81ec 	beq.w	8009586 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b4:	799b      	ldrb	r3, [r3, #6]
 80091b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d023      	beq.n	8009206 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ca:	7858      	ldrb	r0, [r3, #1]
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	2301      	movs	r3, #1
 80091d8:	f7fc fc54 	bl	8005a84 <disk_write>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d006      	beq.n	80091f0 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e8:	2201      	movs	r2, #1
 80091ea:	71da      	strb	r2, [r3, #7]
 80091ec:	2301      	movs	r3, #1
 80091ee:	e1cc      	b.n	800958a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f6:	799b      	ldrb	r3, [r3, #6]
 80091f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009212:	7858      	ldrb	r0, [r3, #1]
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	2301      	movs	r3, #1
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	f7fc fc13 	bl	8005a44 <disk_read>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d006      	beq.n	8009232 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	2201      	movs	r2, #1
 800922c:	71da      	strb	r2, [r3, #7]
 800922e:	2301      	movs	r3, #1
 8009230:	e1ab      	b.n	800958a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009238:	461a      	mov	r2, r3
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	6193      	str	r3, [r2, #24]
 800923e:	e1a2      	b.n	8009586 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	d90c      	bls.n	8009268 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009254:	799b      	ldrb	r3, [r3, #6]
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d104      	bne.n	8009268 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927c:	461a      	mov	r2, r3
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8100 	beq.w	800948a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009296:	789b      	ldrb	r3, [r3, #2]
 8009298:	461a      	mov	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a6:	895b      	ldrh	r3, [r3, #10]
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d021      	beq.n	80092f8 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	1e5a      	subs	r2, r3, #1
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	1e59      	subs	r1, r3, #1
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d315      	bcc.n	80092f8 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	425b      	negs	r3, r3
 80092d4:	4013      	ands	r3, r2
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092dc:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80092f6:	e031      	b.n	800935c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d123      	bne.n	8009350 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2100      	movs	r1, #0
 8009312:	4618      	mov	r0, r3
 8009314:	f7fd fa41 	bl	800679a <create_chain>
 8009318:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	2b01      	cmp	r3, #1
 800931e:	d106      	bne.n	800932e <f_lseek+0x37e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009326:	2202      	movs	r2, #2
 8009328:	71da      	strb	r2, [r3, #7]
 800932a:	2302      	movs	r3, #2
 800932c:	e12d      	b.n	800958a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800932e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009334:	d106      	bne.n	8009344 <f_lseek+0x394>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933c:	2201      	movs	r2, #1
 800933e:	71da      	strb	r2, [r3, #7]
 8009340:	2301      	movs	r3, #1
 8009342:	e122      	b.n	800958a <f_lseek+0x5da>
					fp->sclust = clst;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800934a:	461a      	mov	r2, r3
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009356:	461a      	mov	r2, r3
 8009358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8093 	beq.w	800948a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009364:	e052      	b.n	800940c <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800936c:	799b      	ldrb	r3, [r3, #6]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00e      	beq.n	8009394 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd fa0a 	bl	800679a <create_chain>
 8009386:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <f_lseek+0x3f6>
							ofs = bcs; break;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	603b      	str	r3, [r7, #0]
 8009392:	e03f      	b.n	8009414 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fc ff4b 	bl	800623a <get_fat>
 80093a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80093a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ac:	d106      	bne.n	80093bc <f_lseek+0x40c>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b4:	2201      	movs	r2, #1
 80093b6:	71da      	strb	r2, [r3, #7]
 80093b8:	2301      	movs	r3, #1
 80093ba:	e0e6      	b.n	800958a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80093bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d909      	bls.n	80093d6 <f_lseek+0x426>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d306      	bcc.n	80093e4 <f_lseek+0x434>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093dc:	2202      	movs	r2, #2
 80093de:	71da      	strb	r2, [r3, #7]
 80093e0:	2302      	movs	r3, #2
 80093e2:	e0d2      	b.n	800958a <f_lseek+0x5da>
					fp->clust = clst;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ea:	461a      	mov	r2, r3
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	4413      	add	r3, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009402:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	429a      	cmp	r2, r3
 8009412:	d8a8      	bhi.n	8009366 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	4413      	add	r3, r2
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009426:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009434:	895b      	ldrh	r3, [r3, #10]
 8009436:	461a      	mov	r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	fbb3 f1f2 	udiv	r1, r3, r2
 800943e:	fb01 f202 	mul.w	r2, r1, r2
 8009442:	1a9b      	subs	r3, r3, r2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d020      	beq.n	800948a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009452:	4618      	mov	r0, r3
 8009454:	f7fc fecd 	bl	80061f2 <clust2sect>
 8009458:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800945a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945c:	2b00      	cmp	r3, #0
 800945e:	d106      	bne.n	800946e <f_lseek+0x4be>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009466:	2202      	movs	r2, #2
 8009468:	71da      	strb	r2, [r3, #7]
 800946a:	2302      	movs	r3, #2
 800946c:	e08d      	b.n	800958a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947a:	895b      	ldrh	r3, [r3, #10]
 800947c:	461a      	mov	r2, r3
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	fbb3 f3f2 	udiv	r3, r3, r2
 8009484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009486:	4413      	add	r3, r2
 8009488:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800949e:	8952      	ldrh	r2, [r2, #10]
 80094a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a4:	fb01 f202 	mul.w	r2, r1, r2
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d04e      	beq.n	800954c <f_lseek+0x59c>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d047      	beq.n	800954c <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c2:	799b      	ldrb	r3, [r3, #6]
 80094c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d023      	beq.n	8009514 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d8:	7858      	ldrb	r0, [r3, #1]
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	2301      	movs	r3, #1
 80094e6:	f7fc facd 	bl	8005a84 <disk_write>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d006      	beq.n	80094fe <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	2201      	movs	r2, #1
 80094f8:	71da      	strb	r2, [r3, #7]
 80094fa:	2301      	movs	r3, #1
 80094fc:	e045      	b.n	800958a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009504:	799b      	ldrb	r3, [r3, #6]
 8009506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950a:	b2da      	uxtb	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009512:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	7858      	ldrb	r0, [r3, #1]
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	2301      	movs	r3, #1
 8009526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009528:	f7fc fa8c 	bl	8005a44 <disk_read>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d006      	beq.n	8009540 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009538:	2201      	movs	r2, #1
 800953a:	71da      	strb	r2, [r3, #7]
 800953c:	2301      	movs	r3, #1
 800953e:	e024      	b.n	800958a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009546:	461a      	mov	r2, r3
 8009548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	429a      	cmp	r2, r3
 800955e:	d912      	bls.n	8009586 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800956e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009576:	799b      	ldrb	r3, [r3, #6]
 8009578:	f043 0320 	orr.w	r3, r3, #32
 800957c:	b2da      	uxtb	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009584:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800958a:	4618      	mov	r0, r3
 800958c:	3740      	adds	r7, #64	; 0x40
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	2b0a      	cmp	r3, #10
 80095a2:	d103      	bne.n	80095ac <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80095a4:	210d      	movs	r1, #13
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fff3 	bl	8009592 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	db25      	blt.n	8009604 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	60fa      	str	r2, [r7, #12]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4413      	add	r3, r2
 80095c2:	78fa      	ldrb	r2, [r7, #3]
 80095c4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b3c      	cmp	r3, #60	; 0x3c
 80095ca:	dd12      	ble.n	80095f2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f103 010c 	add.w	r1, r3, #12
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	f107 0308 	add.w	r3, r7, #8
 80095dc:	f7ff f9b6 	bl	800894c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d101      	bne.n	80095ec <putc_bfd+0x5a>
 80095e8:	2300      	movs	r3, #0
 80095ea:	e001      	b.n	80095f0 <putc_bfd+0x5e>
 80095ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095f0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	609a      	str	r2, [r3, #8]
 8009602:	e000      	b.n	8009606 <putc_bfd+0x74>
	if (i < 0) return;
 8009604:	bf00      	nop
}
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800960c:	b590      	push	{r4, r7, lr}
 800960e:	b097      	sub	sp, #92	; 0x5c
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009622:	e009      	b.n	8009638 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	607a      	str	r2, [r7, #4]
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	f107 030c 	add.w	r3, r7, #12
 8009630:	4611      	mov	r1, r2
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff ffad 	bl	8009592 <putc_bfd>
	while (*str)			/* Put the string */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1f1      	bne.n	8009624 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	db15      	blt.n	8009672 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	461c      	mov	r4, r3
 800964c:	f107 0208 	add.w	r2, r7, #8
 8009650:	f107 030c 	add.w	r3, r7, #12
 8009654:	f103 010c 	add.w	r1, r3, #12
 8009658:	4613      	mov	r3, r2
 800965a:	4622      	mov	r2, r4
 800965c:	f7ff f976 	bl	800894c <f_write>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d105      	bne.n	8009672 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	4293      	cmp	r3, r2
 800966c:	d101      	bne.n	8009672 <f_puts+0x66>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	e001      	b.n	8009676 <f_puts+0x6a>
	return EOF;
 8009672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009676:	4618      	mov	r0, r3
 8009678:	375c      	adds	r7, #92	; 0x5c
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
	...

08009680 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800968e:	2301      	movs	r3, #1
 8009690:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009696:	4b1e      	ldr	r3, [pc, #120]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 8009698:	7a5b      	ldrb	r3, [r3, #9]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b01      	cmp	r3, #1
 800969e:	d831      	bhi.n	8009704 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096a0:	4b1b      	ldr	r3, [pc, #108]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096a2:	7a5b      	ldrb	r3, [r3, #9]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	4b19      	ldr	r3, [pc, #100]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096aa:	2100      	movs	r1, #0
 80096ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80096ae:	4b18      	ldr	r3, [pc, #96]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096b0:	7a5b      	ldrb	r3, [r3, #9]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	4a16      	ldr	r2, [pc, #88]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80096be:	4b14      	ldr	r3, [pc, #80]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096c0:	7a5b      	ldrb	r3, [r3, #9]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	4b12      	ldr	r3, [pc, #72]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096c8:	4413      	add	r3, r2
 80096ca:	79fa      	ldrb	r2, [r7, #7]
 80096cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80096ce:	4b10      	ldr	r3, [pc, #64]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096d0:	7a5b      	ldrb	r3, [r3, #9]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	b2d1      	uxtb	r1, r2
 80096d8:	4a0d      	ldr	r2, [pc, #52]	; (8009710 <FATFS_LinkDriverEx+0x90>)
 80096da:	7251      	strb	r1, [r2, #9]
 80096dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80096de:	7dbb      	ldrb	r3, [r7, #22]
 80096e0:	3330      	adds	r3, #48	; 0x30
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	3301      	adds	r3, #1
 80096ec:	223a      	movs	r2, #58	; 0x3a
 80096ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3302      	adds	r3, #2
 80096f4:	222f      	movs	r2, #47	; 0x2f
 80096f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	3303      	adds	r3, #3
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009700:	2300      	movs	r3, #0
 8009702:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009704:	7dfb      	ldrb	r3, [r7, #23]
}
 8009706:	4618      	mov	r0, r3
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr
 8009710:	20002920 	.word	0x20002920

08009714 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800971e:	2200      	movs	r2, #0
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff ffac 	bl	8009680 <FATFS_LinkDriverEx>
 8009728:	4603      	mov	r3, r0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	6039      	str	r1, [r7, #0]
 800973e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	2b7f      	cmp	r3, #127	; 0x7f
 8009744:	d802      	bhi.n	800974c <ff_convert+0x18>
		c = chr;
 8009746:	88fb      	ldrh	r3, [r7, #6]
 8009748:	81fb      	strh	r3, [r7, #14]
 800974a:	e025      	b.n	8009798 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00b      	beq.n	800976a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009752:	88fb      	ldrh	r3, [r7, #6]
 8009754:	2bff      	cmp	r3, #255	; 0xff
 8009756:	d805      	bhi.n	8009764 <ff_convert+0x30>
 8009758:	88fb      	ldrh	r3, [r7, #6]
 800975a:	3b80      	subs	r3, #128	; 0x80
 800975c:	4a11      	ldr	r2, [pc, #68]	; (80097a4 <ff_convert+0x70>)
 800975e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009762:	e000      	b.n	8009766 <ff_convert+0x32>
 8009764:	2300      	movs	r3, #0
 8009766:	81fb      	strh	r3, [r7, #14]
 8009768:	e016      	b.n	8009798 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800976a:	2300      	movs	r3, #0
 800976c:	81fb      	strh	r3, [r7, #14]
 800976e:	e009      	b.n	8009784 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009770:	89fb      	ldrh	r3, [r7, #14]
 8009772:	4a0c      	ldr	r2, [pc, #48]	; (80097a4 <ff_convert+0x70>)
 8009774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009778:	88fa      	ldrh	r2, [r7, #6]
 800977a:	429a      	cmp	r2, r3
 800977c:	d006      	beq.n	800978c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800977e:	89fb      	ldrh	r3, [r7, #14]
 8009780:	3301      	adds	r3, #1
 8009782:	81fb      	strh	r3, [r7, #14]
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	2b7f      	cmp	r3, #127	; 0x7f
 8009788:	d9f2      	bls.n	8009770 <ff_convert+0x3c>
 800978a:	e000      	b.n	800978e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800978c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800978e:	89fb      	ldrh	r3, [r7, #14]
 8009790:	3380      	adds	r3, #128	; 0x80
 8009792:	b29b      	uxth	r3, r3
 8009794:	b2db      	uxtb	r3, r3
 8009796:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009798:	89fb      	ldrh	r3, [r7, #14]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr
 80097a4:	0800cb78 	.word	0x0800cb78

080097a8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e002      	b.n	80097be <ff_wtoupper+0x16>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	4a0f      	ldr	r2, [pc, #60]	; (80097fc <ff_wtoupper+0x54>)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d006      	beq.n	80097d8 <ff_wtoupper+0x30>
 80097ca:	4a0c      	ldr	r2, [pc, #48]	; (80097fc <ff_wtoupper+0x54>)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d1ef      	bne.n	80097b8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80097d8:	4a08      	ldr	r2, [pc, #32]	; (80097fc <ff_wtoupper+0x54>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d004      	beq.n	80097ee <ff_wtoupper+0x46>
 80097e4:	4a06      	ldr	r2, [pc, #24]	; (8009800 <ff_wtoupper+0x58>)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ec:	e000      	b.n	80097f0 <ff_wtoupper+0x48>
 80097ee:	88fb      	ldrh	r3, [r7, #6]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bc80      	pop	{r7}
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	0800cc78 	.word	0x0800cc78
 8009800:	0800ce58 	.word	0x0800ce58

08009804 <siprintf>:
 8009804:	b40e      	push	{r1, r2, r3}
 8009806:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800980a:	b500      	push	{lr}
 800980c:	b09c      	sub	sp, #112	; 0x70
 800980e:	ab1d      	add	r3, sp, #116	; 0x74
 8009810:	9002      	str	r0, [sp, #8]
 8009812:	9006      	str	r0, [sp, #24]
 8009814:	9107      	str	r1, [sp, #28]
 8009816:	9104      	str	r1, [sp, #16]
 8009818:	4808      	ldr	r0, [pc, #32]	; (800983c <siprintf+0x38>)
 800981a:	4909      	ldr	r1, [pc, #36]	; (8009840 <siprintf+0x3c>)
 800981c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009820:	9105      	str	r1, [sp, #20]
 8009822:	6800      	ldr	r0, [r0, #0]
 8009824:	a902      	add	r1, sp, #8
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	f000 f89a 	bl	8009960 <_svfiprintf_r>
 800982c:	2200      	movs	r2, #0
 800982e:	9b02      	ldr	r3, [sp, #8]
 8009830:	701a      	strb	r2, [r3, #0]
 8009832:	b01c      	add	sp, #112	; 0x70
 8009834:	f85d eb04 	ldr.w	lr, [sp], #4
 8009838:	b003      	add	sp, #12
 800983a:	4770      	bx	lr
 800983c:	200000a4 	.word	0x200000a4
 8009840:	ffff0208 	.word	0xffff0208

08009844 <memset>:
 8009844:	4603      	mov	r3, r0
 8009846:	4402      	add	r2, r0
 8009848:	4293      	cmp	r3, r2
 800984a:	d100      	bne.n	800984e <memset+0xa>
 800984c:	4770      	bx	lr
 800984e:	f803 1b01 	strb.w	r1, [r3], #1
 8009852:	e7f9      	b.n	8009848 <memset+0x4>

08009854 <__errno>:
 8009854:	4b01      	ldr	r3, [pc, #4]	; (800985c <__errno+0x8>)
 8009856:	6818      	ldr	r0, [r3, #0]
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	200000a4 	.word	0x200000a4

08009860 <__libc_init_array>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	2600      	movs	r6, #0
 8009864:	4d0c      	ldr	r5, [pc, #48]	; (8009898 <__libc_init_array+0x38>)
 8009866:	4c0d      	ldr	r4, [pc, #52]	; (800989c <__libc_init_array+0x3c>)
 8009868:	1b64      	subs	r4, r4, r5
 800986a:	10a4      	asrs	r4, r4, #2
 800986c:	42a6      	cmp	r6, r4
 800986e:	d109      	bne.n	8009884 <__libc_init_array+0x24>
 8009870:	f000 fc7a 	bl	800a168 <_init>
 8009874:	2600      	movs	r6, #0
 8009876:	4d0a      	ldr	r5, [pc, #40]	; (80098a0 <__libc_init_array+0x40>)
 8009878:	4c0a      	ldr	r4, [pc, #40]	; (80098a4 <__libc_init_array+0x44>)
 800987a:	1b64      	subs	r4, r4, r5
 800987c:	10a4      	asrs	r4, r4, #2
 800987e:	42a6      	cmp	r6, r4
 8009880:	d105      	bne.n	800988e <__libc_init_array+0x2e>
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	f855 3b04 	ldr.w	r3, [r5], #4
 8009888:	4798      	blx	r3
 800988a:	3601      	adds	r6, #1
 800988c:	e7ee      	b.n	800986c <__libc_init_array+0xc>
 800988e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009892:	4798      	blx	r3
 8009894:	3601      	adds	r6, #1
 8009896:	e7f2      	b.n	800987e <__libc_init_array+0x1e>
 8009898:	0800d06c 	.word	0x0800d06c
 800989c:	0800d06c 	.word	0x0800d06c
 80098a0:	0800d06c 	.word	0x0800d06c
 80098a4:	0800d070 	.word	0x0800d070

080098a8 <__retarget_lock_acquire_recursive>:
 80098a8:	4770      	bx	lr

080098aa <__retarget_lock_release_recursive>:
 80098aa:	4770      	bx	lr

080098ac <__ssputs_r>:
 80098ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	461f      	mov	r7, r3
 80098b2:	688e      	ldr	r6, [r1, #8]
 80098b4:	4682      	mov	sl, r0
 80098b6:	42be      	cmp	r6, r7
 80098b8:	460c      	mov	r4, r1
 80098ba:	4690      	mov	r8, r2
 80098bc:	680b      	ldr	r3, [r1, #0]
 80098be:	d82c      	bhi.n	800991a <__ssputs_r+0x6e>
 80098c0:	898a      	ldrh	r2, [r1, #12]
 80098c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098c6:	d026      	beq.n	8009916 <__ssputs_r+0x6a>
 80098c8:	6965      	ldr	r5, [r4, #20]
 80098ca:	6909      	ldr	r1, [r1, #16]
 80098cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098d0:	eba3 0901 	sub.w	r9, r3, r1
 80098d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098d8:	1c7b      	adds	r3, r7, #1
 80098da:	444b      	add	r3, r9
 80098dc:	106d      	asrs	r5, r5, #1
 80098de:	429d      	cmp	r5, r3
 80098e0:	bf38      	it	cc
 80098e2:	461d      	movcc	r5, r3
 80098e4:	0553      	lsls	r3, r2, #21
 80098e6:	d527      	bpl.n	8009938 <__ssputs_r+0x8c>
 80098e8:	4629      	mov	r1, r5
 80098ea:	f000 f957 	bl	8009b9c <_malloc_r>
 80098ee:	4606      	mov	r6, r0
 80098f0:	b360      	cbz	r0, 800994c <__ssputs_r+0xa0>
 80098f2:	464a      	mov	r2, r9
 80098f4:	6921      	ldr	r1, [r4, #16]
 80098f6:	f000 fbd9 	bl	800a0ac <memcpy>
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009904:	81a3      	strh	r3, [r4, #12]
 8009906:	6126      	str	r6, [r4, #16]
 8009908:	444e      	add	r6, r9
 800990a:	6026      	str	r6, [r4, #0]
 800990c:	463e      	mov	r6, r7
 800990e:	6165      	str	r5, [r4, #20]
 8009910:	eba5 0509 	sub.w	r5, r5, r9
 8009914:	60a5      	str	r5, [r4, #8]
 8009916:	42be      	cmp	r6, r7
 8009918:	d900      	bls.n	800991c <__ssputs_r+0x70>
 800991a:	463e      	mov	r6, r7
 800991c:	4632      	mov	r2, r6
 800991e:	4641      	mov	r1, r8
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	f000 fb8a 	bl	800a03a <memmove>
 8009926:	2000      	movs	r0, #0
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	1b9b      	subs	r3, r3, r6
 800992c:	60a3      	str	r3, [r4, #8]
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	4433      	add	r3, r6
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009938:	462a      	mov	r2, r5
 800993a:	f000 fb4f 	bl	8009fdc <_realloc_r>
 800993e:	4606      	mov	r6, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	d1e0      	bne.n	8009906 <__ssputs_r+0x5a>
 8009944:	4650      	mov	r0, sl
 8009946:	6921      	ldr	r1, [r4, #16]
 8009948:	f000 fbbe 	bl	800a0c8 <_free_r>
 800994c:	230c      	movs	r3, #12
 800994e:	f8ca 3000 	str.w	r3, [sl]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	e7e9      	b.n	8009934 <__ssputs_r+0x88>

08009960 <_svfiprintf_r>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	4698      	mov	r8, r3
 8009966:	898b      	ldrh	r3, [r1, #12]
 8009968:	4607      	mov	r7, r0
 800996a:	061b      	lsls	r3, r3, #24
 800996c:	460d      	mov	r5, r1
 800996e:	4614      	mov	r4, r2
 8009970:	b09d      	sub	sp, #116	; 0x74
 8009972:	d50e      	bpl.n	8009992 <_svfiprintf_r+0x32>
 8009974:	690b      	ldr	r3, [r1, #16]
 8009976:	b963      	cbnz	r3, 8009992 <_svfiprintf_r+0x32>
 8009978:	2140      	movs	r1, #64	; 0x40
 800997a:	f000 f90f 	bl	8009b9c <_malloc_r>
 800997e:	6028      	str	r0, [r5, #0]
 8009980:	6128      	str	r0, [r5, #16]
 8009982:	b920      	cbnz	r0, 800998e <_svfiprintf_r+0x2e>
 8009984:	230c      	movs	r3, #12
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800998c:	e0d0      	b.n	8009b30 <_svfiprintf_r+0x1d0>
 800998e:	2340      	movs	r3, #64	; 0x40
 8009990:	616b      	str	r3, [r5, #20]
 8009992:	2300      	movs	r3, #0
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	2320      	movs	r3, #32
 8009998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800999c:	2330      	movs	r3, #48	; 0x30
 800999e:	f04f 0901 	mov.w	r9, #1
 80099a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009b48 <_svfiprintf_r+0x1e8>
 80099aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ae:	4623      	mov	r3, r4
 80099b0:	469a      	mov	sl, r3
 80099b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b6:	b10a      	cbz	r2, 80099bc <_svfiprintf_r+0x5c>
 80099b8:	2a25      	cmp	r2, #37	; 0x25
 80099ba:	d1f9      	bne.n	80099b0 <_svfiprintf_r+0x50>
 80099bc:	ebba 0b04 	subs.w	fp, sl, r4
 80099c0:	d00b      	beq.n	80099da <_svfiprintf_r+0x7a>
 80099c2:	465b      	mov	r3, fp
 80099c4:	4622      	mov	r2, r4
 80099c6:	4629      	mov	r1, r5
 80099c8:	4638      	mov	r0, r7
 80099ca:	f7ff ff6f 	bl	80098ac <__ssputs_r>
 80099ce:	3001      	adds	r0, #1
 80099d0:	f000 80a9 	beq.w	8009b26 <_svfiprintf_r+0x1c6>
 80099d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d6:	445a      	add	r2, fp
 80099d8:	9209      	str	r2, [sp, #36]	; 0x24
 80099da:	f89a 3000 	ldrb.w	r3, [sl]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 80a1 	beq.w	8009b26 <_svfiprintf_r+0x1c6>
 80099e4:	2300      	movs	r3, #0
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ee:	f10a 0a01 	add.w	sl, sl, #1
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	9307      	str	r3, [sp, #28]
 80099f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099fa:	931a      	str	r3, [sp, #104]	; 0x68
 80099fc:	4654      	mov	r4, sl
 80099fe:	2205      	movs	r2, #5
 8009a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a04:	4850      	ldr	r0, [pc, #320]	; (8009b48 <_svfiprintf_r+0x1e8>)
 8009a06:	f000 fb43 	bl	800a090 <memchr>
 8009a0a:	9a04      	ldr	r2, [sp, #16]
 8009a0c:	b9d8      	cbnz	r0, 8009a46 <_svfiprintf_r+0xe6>
 8009a0e:	06d0      	lsls	r0, r2, #27
 8009a10:	bf44      	itt	mi
 8009a12:	2320      	movmi	r3, #32
 8009a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a18:	0711      	lsls	r1, r2, #28
 8009a1a:	bf44      	itt	mi
 8009a1c:	232b      	movmi	r3, #43	; 0x2b
 8009a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a22:	f89a 3000 	ldrb.w	r3, [sl]
 8009a26:	2b2a      	cmp	r3, #42	; 0x2a
 8009a28:	d015      	beq.n	8009a56 <_svfiprintf_r+0xf6>
 8009a2a:	4654      	mov	r4, sl
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f04f 0c0a 	mov.w	ip, #10
 8009a32:	9a07      	ldr	r2, [sp, #28]
 8009a34:	4621      	mov	r1, r4
 8009a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a3a:	3b30      	subs	r3, #48	; 0x30
 8009a3c:	2b09      	cmp	r3, #9
 8009a3e:	d94d      	bls.n	8009adc <_svfiprintf_r+0x17c>
 8009a40:	b1b0      	cbz	r0, 8009a70 <_svfiprintf_r+0x110>
 8009a42:	9207      	str	r2, [sp, #28]
 8009a44:	e014      	b.n	8009a70 <_svfiprintf_r+0x110>
 8009a46:	eba0 0308 	sub.w	r3, r0, r8
 8009a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	46a2      	mov	sl, r4
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	e7d2      	b.n	80099fc <_svfiprintf_r+0x9c>
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	1d19      	adds	r1, r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	9103      	str	r1, [sp, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bfbb      	ittet	lt
 8009a62:	425b      	neglt	r3, r3
 8009a64:	f042 0202 	orrlt.w	r2, r2, #2
 8009a68:	9307      	strge	r3, [sp, #28]
 8009a6a:	9307      	strlt	r3, [sp, #28]
 8009a6c:	bfb8      	it	lt
 8009a6e:	9204      	strlt	r2, [sp, #16]
 8009a70:	7823      	ldrb	r3, [r4, #0]
 8009a72:	2b2e      	cmp	r3, #46	; 0x2e
 8009a74:	d10c      	bne.n	8009a90 <_svfiprintf_r+0x130>
 8009a76:	7863      	ldrb	r3, [r4, #1]
 8009a78:	2b2a      	cmp	r3, #42	; 0x2a
 8009a7a:	d134      	bne.n	8009ae6 <_svfiprintf_r+0x186>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	3402      	adds	r4, #2
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9203      	str	r2, [sp, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bfb8      	it	lt
 8009a8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a8e:	9305      	str	r3, [sp, #20]
 8009a90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009b4c <_svfiprintf_r+0x1ec>
 8009a94:	2203      	movs	r2, #3
 8009a96:	4650      	mov	r0, sl
 8009a98:	7821      	ldrb	r1, [r4, #0]
 8009a9a:	f000 faf9 	bl	800a090 <memchr>
 8009a9e:	b138      	cbz	r0, 8009ab0 <_svfiprintf_r+0x150>
 8009aa0:	2240      	movs	r2, #64	; 0x40
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	eba0 000a 	sub.w	r0, r0, sl
 8009aa8:	4082      	lsls	r2, r0
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	3401      	adds	r4, #1
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab4:	2206      	movs	r2, #6
 8009ab6:	4826      	ldr	r0, [pc, #152]	; (8009b50 <_svfiprintf_r+0x1f0>)
 8009ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009abc:	f000 fae8 	bl	800a090 <memchr>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d038      	beq.n	8009b36 <_svfiprintf_r+0x1d6>
 8009ac4:	4b23      	ldr	r3, [pc, #140]	; (8009b54 <_svfiprintf_r+0x1f4>)
 8009ac6:	bb1b      	cbnz	r3, 8009b10 <_svfiprintf_r+0x1b0>
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	3307      	adds	r3, #7
 8009acc:	f023 0307 	bic.w	r3, r3, #7
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad6:	4433      	add	r3, r6
 8009ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ada:	e768      	b.n	80099ae <_svfiprintf_r+0x4e>
 8009adc:	460c      	mov	r4, r1
 8009ade:	2001      	movs	r0, #1
 8009ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae4:	e7a6      	b.n	8009a34 <_svfiprintf_r+0xd4>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	4619      	mov	r1, r3
 8009aee:	3401      	adds	r4, #1
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	4620      	mov	r0, r4
 8009af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af8:	3a30      	subs	r2, #48	; 0x30
 8009afa:	2a09      	cmp	r2, #9
 8009afc:	d903      	bls.n	8009b06 <_svfiprintf_r+0x1a6>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0c6      	beq.n	8009a90 <_svfiprintf_r+0x130>
 8009b02:	9105      	str	r1, [sp, #20]
 8009b04:	e7c4      	b.n	8009a90 <_svfiprintf_r+0x130>
 8009b06:	4604      	mov	r4, r0
 8009b08:	2301      	movs	r3, #1
 8009b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b0e:	e7f0      	b.n	8009af2 <_svfiprintf_r+0x192>
 8009b10:	ab03      	add	r3, sp, #12
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	462a      	mov	r2, r5
 8009b16:	4638      	mov	r0, r7
 8009b18:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <_svfiprintf_r+0x1f8>)
 8009b1a:	a904      	add	r1, sp, #16
 8009b1c:	f3af 8000 	nop.w
 8009b20:	1c42      	adds	r2, r0, #1
 8009b22:	4606      	mov	r6, r0
 8009b24:	d1d6      	bne.n	8009ad4 <_svfiprintf_r+0x174>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	f53f af2d 	bmi.w	8009988 <_svfiprintf_r+0x28>
 8009b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b30:	b01d      	add	sp, #116	; 0x74
 8009b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b36:	ab03      	add	r3, sp, #12
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <_svfiprintf_r+0x1f8>)
 8009b40:	a904      	add	r1, sp, #16
 8009b42:	f000 f91d 	bl	8009d80 <_printf_i>
 8009b46:	e7eb      	b.n	8009b20 <_svfiprintf_r+0x1c0>
 8009b48:	0800d038 	.word	0x0800d038
 8009b4c:	0800d03e 	.word	0x0800d03e
 8009b50:	0800d042 	.word	0x0800d042
 8009b54:	00000000 	.word	0x00000000
 8009b58:	080098ad 	.word	0x080098ad

08009b5c <sbrk_aligned>:
 8009b5c:	b570      	push	{r4, r5, r6, lr}
 8009b5e:	4e0e      	ldr	r6, [pc, #56]	; (8009b98 <sbrk_aligned+0x3c>)
 8009b60:	460c      	mov	r4, r1
 8009b62:	6831      	ldr	r1, [r6, #0]
 8009b64:	4605      	mov	r5, r0
 8009b66:	b911      	cbnz	r1, 8009b6e <sbrk_aligned+0x12>
 8009b68:	f000 fa82 	bl	800a070 <_sbrk_r>
 8009b6c:	6030      	str	r0, [r6, #0]
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4628      	mov	r0, r5
 8009b72:	f000 fa7d 	bl	800a070 <_sbrk_r>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d00a      	beq.n	8009b90 <sbrk_aligned+0x34>
 8009b7a:	1cc4      	adds	r4, r0, #3
 8009b7c:	f024 0403 	bic.w	r4, r4, #3
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d007      	beq.n	8009b94 <sbrk_aligned+0x38>
 8009b84:	1a21      	subs	r1, r4, r0
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 fa72 	bl	800a070 <_sbrk_r>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d101      	bne.n	8009b94 <sbrk_aligned+0x38>
 8009b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b94:	4620      	mov	r0, r4
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	20002a6c 	.word	0x20002a6c

08009b9c <_malloc_r>:
 8009b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba0:	1ccd      	adds	r5, r1, #3
 8009ba2:	f025 0503 	bic.w	r5, r5, #3
 8009ba6:	3508      	adds	r5, #8
 8009ba8:	2d0c      	cmp	r5, #12
 8009baa:	bf38      	it	cc
 8009bac:	250c      	movcc	r5, #12
 8009bae:	2d00      	cmp	r5, #0
 8009bb0:	4607      	mov	r7, r0
 8009bb2:	db01      	blt.n	8009bb8 <_malloc_r+0x1c>
 8009bb4:	42a9      	cmp	r1, r5
 8009bb6:	d905      	bls.n	8009bc4 <_malloc_r+0x28>
 8009bb8:	230c      	movs	r3, #12
 8009bba:	2600      	movs	r6, #0
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c98 <_malloc_r+0xfc>
 8009bc8:	f000 f9fc 	bl	8009fc4 <__malloc_lock>
 8009bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd0:	461c      	mov	r4, r3
 8009bd2:	bb5c      	cbnz	r4, 8009c2c <_malloc_r+0x90>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	f7ff ffc0 	bl	8009b5c <sbrk_aligned>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	4604      	mov	r4, r0
 8009be0:	d155      	bne.n	8009c8e <_malloc_r+0xf2>
 8009be2:	f8d8 4000 	ldr.w	r4, [r8]
 8009be6:	4626      	mov	r6, r4
 8009be8:	2e00      	cmp	r6, #0
 8009bea:	d145      	bne.n	8009c78 <_malloc_r+0xdc>
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d048      	beq.n	8009c82 <_malloc_r+0xe6>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	eb04 0903 	add.w	r9, r4, r3
 8009bfa:	f000 fa39 	bl	800a070 <_sbrk_r>
 8009bfe:	4581      	cmp	r9, r0
 8009c00:	d13f      	bne.n	8009c82 <_malloc_r+0xe6>
 8009c02:	6821      	ldr	r1, [r4, #0]
 8009c04:	4638      	mov	r0, r7
 8009c06:	1a6d      	subs	r5, r5, r1
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7ff ffa7 	bl	8009b5c <sbrk_aligned>
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d037      	beq.n	8009c82 <_malloc_r+0xe6>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	442b      	add	r3, r5
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	f8d8 3000 	ldr.w	r3, [r8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d038      	beq.n	8009c92 <_malloc_r+0xf6>
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	42a2      	cmp	r2, r4
 8009c24:	d12b      	bne.n	8009c7e <_malloc_r+0xe2>
 8009c26:	2200      	movs	r2, #0
 8009c28:	605a      	str	r2, [r3, #4]
 8009c2a:	e00f      	b.n	8009c4c <_malloc_r+0xb0>
 8009c2c:	6822      	ldr	r2, [r4, #0]
 8009c2e:	1b52      	subs	r2, r2, r5
 8009c30:	d41f      	bmi.n	8009c72 <_malloc_r+0xd6>
 8009c32:	2a0b      	cmp	r2, #11
 8009c34:	d917      	bls.n	8009c66 <_malloc_r+0xca>
 8009c36:	1961      	adds	r1, r4, r5
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	6025      	str	r5, [r4, #0]
 8009c3c:	bf18      	it	ne
 8009c3e:	6059      	strne	r1, [r3, #4]
 8009c40:	6863      	ldr	r3, [r4, #4]
 8009c42:	bf08      	it	eq
 8009c44:	f8c8 1000 	streq.w	r1, [r8]
 8009c48:	5162      	str	r2, [r4, r5]
 8009c4a:	604b      	str	r3, [r1, #4]
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	f104 060b 	add.w	r6, r4, #11
 8009c52:	f000 f9bd 	bl	8009fd0 <__malloc_unlock>
 8009c56:	f026 0607 	bic.w	r6, r6, #7
 8009c5a:	1d23      	adds	r3, r4, #4
 8009c5c:	1af2      	subs	r2, r6, r3
 8009c5e:	d0ae      	beq.n	8009bbe <_malloc_r+0x22>
 8009c60:	1b9b      	subs	r3, r3, r6
 8009c62:	50a3      	str	r3, [r4, r2]
 8009c64:	e7ab      	b.n	8009bbe <_malloc_r+0x22>
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	6862      	ldr	r2, [r4, #4]
 8009c6a:	d1dd      	bne.n	8009c28 <_malloc_r+0x8c>
 8009c6c:	f8c8 2000 	str.w	r2, [r8]
 8009c70:	e7ec      	b.n	8009c4c <_malloc_r+0xb0>
 8009c72:	4623      	mov	r3, r4
 8009c74:	6864      	ldr	r4, [r4, #4]
 8009c76:	e7ac      	b.n	8009bd2 <_malloc_r+0x36>
 8009c78:	4634      	mov	r4, r6
 8009c7a:	6876      	ldr	r6, [r6, #4]
 8009c7c:	e7b4      	b.n	8009be8 <_malloc_r+0x4c>
 8009c7e:	4613      	mov	r3, r2
 8009c80:	e7cc      	b.n	8009c1c <_malloc_r+0x80>
 8009c82:	230c      	movs	r3, #12
 8009c84:	4638      	mov	r0, r7
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	f000 f9a2 	bl	8009fd0 <__malloc_unlock>
 8009c8c:	e797      	b.n	8009bbe <_malloc_r+0x22>
 8009c8e:	6025      	str	r5, [r4, #0]
 8009c90:	e7dc      	b.n	8009c4c <_malloc_r+0xb0>
 8009c92:	605b      	str	r3, [r3, #4]
 8009c94:	deff      	udf	#255	; 0xff
 8009c96:	bf00      	nop
 8009c98:	20002a68 	.word	0x20002a68

08009c9c <_printf_common>:
 8009c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	4699      	mov	r9, r3
 8009ca4:	688a      	ldr	r2, [r1, #8]
 8009ca6:	690b      	ldr	r3, [r1, #16]
 8009ca8:	4607      	mov	r7, r0
 8009caa:	4293      	cmp	r3, r2
 8009cac:	bfb8      	it	lt
 8009cae:	4613      	movlt	r3, r2
 8009cb0:	6033      	str	r3, [r6, #0]
 8009cb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cbc:	b10a      	cbz	r2, 8009cc2 <_printf_common+0x26>
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	6033      	str	r3, [r6, #0]
 8009cc2:	6823      	ldr	r3, [r4, #0]
 8009cc4:	0699      	lsls	r1, r3, #26
 8009cc6:	bf42      	ittt	mi
 8009cc8:	6833      	ldrmi	r3, [r6, #0]
 8009cca:	3302      	addmi	r3, #2
 8009ccc:	6033      	strmi	r3, [r6, #0]
 8009cce:	6825      	ldr	r5, [r4, #0]
 8009cd0:	f015 0506 	ands.w	r5, r5, #6
 8009cd4:	d106      	bne.n	8009ce4 <_printf_common+0x48>
 8009cd6:	f104 0a19 	add.w	sl, r4, #25
 8009cda:	68e3      	ldr	r3, [r4, #12]
 8009cdc:	6832      	ldr	r2, [r6, #0]
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	42ab      	cmp	r3, r5
 8009ce2:	dc2b      	bgt.n	8009d3c <_printf_common+0xa0>
 8009ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ce8:	1e13      	subs	r3, r2, #0
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	bf18      	it	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	0692      	lsls	r2, r2, #26
 8009cf2:	d430      	bmi.n	8009d56 <_printf_common+0xba>
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cfc:	47c0      	blx	r8
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d023      	beq.n	8009d4a <_printf_common+0xae>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	6922      	ldr	r2, [r4, #16]
 8009d06:	f003 0306 	and.w	r3, r3, #6
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	bf14      	ite	ne
 8009d0e:	2500      	movne	r5, #0
 8009d10:	6833      	ldreq	r3, [r6, #0]
 8009d12:	f04f 0600 	mov.w	r6, #0
 8009d16:	bf08      	it	eq
 8009d18:	68e5      	ldreq	r5, [r4, #12]
 8009d1a:	f104 041a 	add.w	r4, r4, #26
 8009d1e:	bf08      	it	eq
 8009d20:	1aed      	subeq	r5, r5, r3
 8009d22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009d26:	bf08      	it	eq
 8009d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	bfc4      	itt	gt
 8009d30:	1a9b      	subgt	r3, r3, r2
 8009d32:	18ed      	addgt	r5, r5, r3
 8009d34:	42b5      	cmp	r5, r6
 8009d36:	d11a      	bne.n	8009d6e <_printf_common+0xd2>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e008      	b.n	8009d4e <_printf_common+0xb2>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4652      	mov	r2, sl
 8009d40:	4649      	mov	r1, r9
 8009d42:	4638      	mov	r0, r7
 8009d44:	47c0      	blx	r8
 8009d46:	3001      	adds	r0, #1
 8009d48:	d103      	bne.n	8009d52 <_printf_common+0xb6>
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	3501      	adds	r5, #1
 8009d54:	e7c1      	b.n	8009cda <_printf_common+0x3e>
 8009d56:	2030      	movs	r0, #48	; 0x30
 8009d58:	18e1      	adds	r1, r4, r3
 8009d5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d64:	4422      	add	r2, r4
 8009d66:	3302      	adds	r3, #2
 8009d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d6c:	e7c2      	b.n	8009cf4 <_printf_common+0x58>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4622      	mov	r2, r4
 8009d72:	4649      	mov	r1, r9
 8009d74:	4638      	mov	r0, r7
 8009d76:	47c0      	blx	r8
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d0e6      	beq.n	8009d4a <_printf_common+0xae>
 8009d7c:	3601      	adds	r6, #1
 8009d7e:	e7d9      	b.n	8009d34 <_printf_common+0x98>

08009d80 <_printf_i>:
 8009d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d84:	7e0f      	ldrb	r7, [r1, #24]
 8009d86:	4691      	mov	r9, r2
 8009d88:	2f78      	cmp	r7, #120	; 0x78
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	469a      	mov	sl, r3
 8009d90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d96:	d807      	bhi.n	8009da8 <_printf_i+0x28>
 8009d98:	2f62      	cmp	r7, #98	; 0x62
 8009d9a:	d80a      	bhi.n	8009db2 <_printf_i+0x32>
 8009d9c:	2f00      	cmp	r7, #0
 8009d9e:	f000 80d5 	beq.w	8009f4c <_printf_i+0x1cc>
 8009da2:	2f58      	cmp	r7, #88	; 0x58
 8009da4:	f000 80c1 	beq.w	8009f2a <_printf_i+0x1aa>
 8009da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009db0:	e03a      	b.n	8009e28 <_printf_i+0xa8>
 8009db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009db6:	2b15      	cmp	r3, #21
 8009db8:	d8f6      	bhi.n	8009da8 <_printf_i+0x28>
 8009dba:	a101      	add	r1, pc, #4	; (adr r1, 8009dc0 <_printf_i+0x40>)
 8009dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e2d 	.word	0x08009e2d
 8009dc8:	08009da9 	.word	0x08009da9
 8009dcc:	08009da9 	.word	0x08009da9
 8009dd0:	08009da9 	.word	0x08009da9
 8009dd4:	08009da9 	.word	0x08009da9
 8009dd8:	08009e2d 	.word	0x08009e2d
 8009ddc:	08009da9 	.word	0x08009da9
 8009de0:	08009da9 	.word	0x08009da9
 8009de4:	08009da9 	.word	0x08009da9
 8009de8:	08009da9 	.word	0x08009da9
 8009dec:	08009f33 	.word	0x08009f33
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009eed 	.word	0x08009eed
 8009df8:	08009da9 	.word	0x08009da9
 8009dfc:	08009da9 	.word	0x08009da9
 8009e00:	08009f55 	.word	0x08009f55
 8009e04:	08009da9 	.word	0x08009da9
 8009e08:	08009e59 	.word	0x08009e59
 8009e0c:	08009da9 	.word	0x08009da9
 8009e10:	08009da9 	.word	0x08009da9
 8009e14:	08009ef5 	.word	0x08009ef5
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	1d1a      	adds	r2, r3, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	602a      	str	r2, [r5, #0]
 8009e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e0a0      	b.n	8009f6e <_printf_i+0x1ee>
 8009e2c:	6820      	ldr	r0, [r4, #0]
 8009e2e:	682b      	ldr	r3, [r5, #0]
 8009e30:	0607      	lsls	r7, r0, #24
 8009e32:	f103 0104 	add.w	r1, r3, #4
 8009e36:	6029      	str	r1, [r5, #0]
 8009e38:	d501      	bpl.n	8009e3e <_printf_i+0xbe>
 8009e3a:	681e      	ldr	r6, [r3, #0]
 8009e3c:	e003      	b.n	8009e46 <_printf_i+0xc6>
 8009e3e:	0646      	lsls	r6, r0, #25
 8009e40:	d5fb      	bpl.n	8009e3a <_printf_i+0xba>
 8009e42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	da03      	bge.n	8009e52 <_printf_i+0xd2>
 8009e4a:	232d      	movs	r3, #45	; 0x2d
 8009e4c:	4276      	negs	r6, r6
 8009e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e52:	230a      	movs	r3, #10
 8009e54:	4859      	ldr	r0, [pc, #356]	; (8009fbc <_printf_i+0x23c>)
 8009e56:	e012      	b.n	8009e7e <_printf_i+0xfe>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	1d19      	adds	r1, r3, #4
 8009e5e:	6029      	str	r1, [r5, #0]
 8009e60:	0605      	lsls	r5, r0, #24
 8009e62:	d501      	bpl.n	8009e68 <_printf_i+0xe8>
 8009e64:	681e      	ldr	r6, [r3, #0]
 8009e66:	e002      	b.n	8009e6e <_printf_i+0xee>
 8009e68:	0641      	lsls	r1, r0, #25
 8009e6a:	d5fb      	bpl.n	8009e64 <_printf_i+0xe4>
 8009e6c:	881e      	ldrh	r6, [r3, #0]
 8009e6e:	2f6f      	cmp	r7, #111	; 0x6f
 8009e70:	bf0c      	ite	eq
 8009e72:	2308      	moveq	r3, #8
 8009e74:	230a      	movne	r3, #10
 8009e76:	4851      	ldr	r0, [pc, #324]	; (8009fbc <_printf_i+0x23c>)
 8009e78:	2100      	movs	r1, #0
 8009e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e7e:	6865      	ldr	r5, [r4, #4]
 8009e80:	2d00      	cmp	r5, #0
 8009e82:	bfa8      	it	ge
 8009e84:	6821      	ldrge	r1, [r4, #0]
 8009e86:	60a5      	str	r5, [r4, #8]
 8009e88:	bfa4      	itt	ge
 8009e8a:	f021 0104 	bicge.w	r1, r1, #4
 8009e8e:	6021      	strge	r1, [r4, #0]
 8009e90:	b90e      	cbnz	r6, 8009e96 <_printf_i+0x116>
 8009e92:	2d00      	cmp	r5, #0
 8009e94:	d04b      	beq.n	8009f2e <_printf_i+0x1ae>
 8009e96:	4615      	mov	r5, r2
 8009e98:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e9c:	fb03 6711 	mls	r7, r3, r1, r6
 8009ea0:	5dc7      	ldrb	r7, [r0, r7]
 8009ea2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ea6:	4637      	mov	r7, r6
 8009ea8:	42bb      	cmp	r3, r7
 8009eaa:	460e      	mov	r6, r1
 8009eac:	d9f4      	bls.n	8009e98 <_printf_i+0x118>
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d10b      	bne.n	8009eca <_printf_i+0x14a>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	07de      	lsls	r6, r3, #31
 8009eb6:	d508      	bpl.n	8009eca <_printf_i+0x14a>
 8009eb8:	6923      	ldr	r3, [r4, #16]
 8009eba:	6861      	ldr	r1, [r4, #4]
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	bfde      	ittt	le
 8009ec0:	2330      	movle	r3, #48	; 0x30
 8009ec2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ec6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009eca:	1b52      	subs	r2, r2, r5
 8009ecc:	6122      	str	r2, [r4, #16]
 8009ece:	464b      	mov	r3, r9
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	f8cd a000 	str.w	sl, [sp]
 8009ed8:	aa03      	add	r2, sp, #12
 8009eda:	f7ff fedf 	bl	8009c9c <_printf_common>
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d14a      	bne.n	8009f78 <_printf_i+0x1f8>
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ee6:	b004      	add	sp, #16
 8009ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	f043 0320 	orr.w	r3, r3, #32
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	2778      	movs	r7, #120	; 0x78
 8009ef6:	4832      	ldr	r0, [pc, #200]	; (8009fc0 <_printf_i+0x240>)
 8009ef8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	6829      	ldr	r1, [r5, #0]
 8009f00:	061f      	lsls	r7, r3, #24
 8009f02:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f06:	d402      	bmi.n	8009f0e <_printf_i+0x18e>
 8009f08:	065f      	lsls	r7, r3, #25
 8009f0a:	bf48      	it	mi
 8009f0c:	b2b6      	uxthmi	r6, r6
 8009f0e:	07df      	lsls	r7, r3, #31
 8009f10:	bf48      	it	mi
 8009f12:	f043 0320 	orrmi.w	r3, r3, #32
 8009f16:	6029      	str	r1, [r5, #0]
 8009f18:	bf48      	it	mi
 8009f1a:	6023      	strmi	r3, [r4, #0]
 8009f1c:	b91e      	cbnz	r6, 8009f26 <_printf_i+0x1a6>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	f023 0320 	bic.w	r3, r3, #32
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	2310      	movs	r3, #16
 8009f28:	e7a6      	b.n	8009e78 <_printf_i+0xf8>
 8009f2a:	4824      	ldr	r0, [pc, #144]	; (8009fbc <_printf_i+0x23c>)
 8009f2c:	e7e4      	b.n	8009ef8 <_printf_i+0x178>
 8009f2e:	4615      	mov	r5, r2
 8009f30:	e7bd      	b.n	8009eae <_printf_i+0x12e>
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	6826      	ldr	r6, [r4, #0]
 8009f36:	1d18      	adds	r0, r3, #4
 8009f38:	6961      	ldr	r1, [r4, #20]
 8009f3a:	6028      	str	r0, [r5, #0]
 8009f3c:	0635      	lsls	r5, r6, #24
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	d501      	bpl.n	8009f46 <_printf_i+0x1c6>
 8009f42:	6019      	str	r1, [r3, #0]
 8009f44:	e002      	b.n	8009f4c <_printf_i+0x1cc>
 8009f46:	0670      	lsls	r0, r6, #25
 8009f48:	d5fb      	bpl.n	8009f42 <_printf_i+0x1c2>
 8009f4a:	8019      	strh	r1, [r3, #0]
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	4615      	mov	r5, r2
 8009f50:	6123      	str	r3, [r4, #16]
 8009f52:	e7bc      	b.n	8009ece <_printf_i+0x14e>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2100      	movs	r1, #0
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	602a      	str	r2, [r5, #0]
 8009f5c:	681d      	ldr	r5, [r3, #0]
 8009f5e:	6862      	ldr	r2, [r4, #4]
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 f895 	bl	800a090 <memchr>
 8009f66:	b108      	cbz	r0, 8009f6c <_printf_i+0x1ec>
 8009f68:	1b40      	subs	r0, r0, r5
 8009f6a:	6060      	str	r0, [r4, #4]
 8009f6c:	6863      	ldr	r3, [r4, #4]
 8009f6e:	6123      	str	r3, [r4, #16]
 8009f70:	2300      	movs	r3, #0
 8009f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f76:	e7aa      	b.n	8009ece <_printf_i+0x14e>
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	47d0      	blx	sl
 8009f82:	3001      	adds	r0, #1
 8009f84:	d0ad      	beq.n	8009ee2 <_printf_i+0x162>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	079b      	lsls	r3, r3, #30
 8009f8a:	d413      	bmi.n	8009fb4 <_printf_i+0x234>
 8009f8c:	68e0      	ldr	r0, [r4, #12]
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	4298      	cmp	r0, r3
 8009f92:	bfb8      	it	lt
 8009f94:	4618      	movlt	r0, r3
 8009f96:	e7a6      	b.n	8009ee6 <_printf_i+0x166>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4632      	mov	r2, r6
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	47d0      	blx	sl
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d09d      	beq.n	8009ee2 <_printf_i+0x162>
 8009fa6:	3501      	adds	r5, #1
 8009fa8:	68e3      	ldr	r3, [r4, #12]
 8009faa:	9903      	ldr	r1, [sp, #12]
 8009fac:	1a5b      	subs	r3, r3, r1
 8009fae:	42ab      	cmp	r3, r5
 8009fb0:	dcf2      	bgt.n	8009f98 <_printf_i+0x218>
 8009fb2:	e7eb      	b.n	8009f8c <_printf_i+0x20c>
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	f104 0619 	add.w	r6, r4, #25
 8009fba:	e7f5      	b.n	8009fa8 <_printf_i+0x228>
 8009fbc:	0800d049 	.word	0x0800d049
 8009fc0:	0800d05a 	.word	0x0800d05a

08009fc4 <__malloc_lock>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__malloc_lock+0x8>)
 8009fc6:	f7ff bc6f 	b.w	80098a8 <__retarget_lock_acquire_recursive>
 8009fca:	bf00      	nop
 8009fcc:	20002a64 	.word	0x20002a64

08009fd0 <__malloc_unlock>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__malloc_unlock+0x8>)
 8009fd2:	f7ff bc6a 	b.w	80098aa <__retarget_lock_release_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	20002a64 	.word	0x20002a64

08009fdc <_realloc_r>:
 8009fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	4614      	mov	r4, r2
 8009fe4:	460e      	mov	r6, r1
 8009fe6:	b921      	cbnz	r1, 8009ff2 <_realloc_r+0x16>
 8009fe8:	4611      	mov	r1, r2
 8009fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	f7ff bdd5 	b.w	8009b9c <_malloc_r>
 8009ff2:	b92a      	cbnz	r2, 800a000 <_realloc_r+0x24>
 8009ff4:	f000 f868 	bl	800a0c8 <_free_r>
 8009ff8:	4625      	mov	r5, r4
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a000:	f000 f8aa 	bl	800a158 <_malloc_usable_size_r>
 800a004:	4284      	cmp	r4, r0
 800a006:	4607      	mov	r7, r0
 800a008:	d802      	bhi.n	800a010 <_realloc_r+0x34>
 800a00a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a00e:	d812      	bhi.n	800a036 <_realloc_r+0x5a>
 800a010:	4621      	mov	r1, r4
 800a012:	4640      	mov	r0, r8
 800a014:	f7ff fdc2 	bl	8009b9c <_malloc_r>
 800a018:	4605      	mov	r5, r0
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d0ed      	beq.n	8009ffa <_realloc_r+0x1e>
 800a01e:	42bc      	cmp	r4, r7
 800a020:	4622      	mov	r2, r4
 800a022:	4631      	mov	r1, r6
 800a024:	bf28      	it	cs
 800a026:	463a      	movcs	r2, r7
 800a028:	f000 f840 	bl	800a0ac <memcpy>
 800a02c:	4631      	mov	r1, r6
 800a02e:	4640      	mov	r0, r8
 800a030:	f000 f84a 	bl	800a0c8 <_free_r>
 800a034:	e7e1      	b.n	8009ffa <_realloc_r+0x1e>
 800a036:	4635      	mov	r5, r6
 800a038:	e7df      	b.n	8009ffa <_realloc_r+0x1e>

0800a03a <memmove>:
 800a03a:	4288      	cmp	r0, r1
 800a03c:	b510      	push	{r4, lr}
 800a03e:	eb01 0402 	add.w	r4, r1, r2
 800a042:	d902      	bls.n	800a04a <memmove+0x10>
 800a044:	4284      	cmp	r4, r0
 800a046:	4623      	mov	r3, r4
 800a048:	d807      	bhi.n	800a05a <memmove+0x20>
 800a04a:	1e43      	subs	r3, r0, #1
 800a04c:	42a1      	cmp	r1, r4
 800a04e:	d008      	beq.n	800a062 <memmove+0x28>
 800a050:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a054:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a058:	e7f8      	b.n	800a04c <memmove+0x12>
 800a05a:	4601      	mov	r1, r0
 800a05c:	4402      	add	r2, r0
 800a05e:	428a      	cmp	r2, r1
 800a060:	d100      	bne.n	800a064 <memmove+0x2a>
 800a062:	bd10      	pop	{r4, pc}
 800a064:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a068:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a06c:	e7f7      	b.n	800a05e <memmove+0x24>
	...

0800a070 <_sbrk_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	2300      	movs	r3, #0
 800a074:	4d05      	ldr	r5, [pc, #20]	; (800a08c <_sbrk_r+0x1c>)
 800a076:	4604      	mov	r4, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7f7 fff2 	bl	8002064 <_sbrk>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_sbrk_r+0x1a>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_sbrk_r+0x1a>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	20002a70 	.word	0x20002a70

0800a090 <memchr>:
 800a090:	4603      	mov	r3, r0
 800a092:	b510      	push	{r4, lr}
 800a094:	b2c9      	uxtb	r1, r1
 800a096:	4402      	add	r2, r0
 800a098:	4293      	cmp	r3, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	d101      	bne.n	800a0a2 <memchr+0x12>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	e003      	b.n	800a0aa <memchr+0x1a>
 800a0a2:	7804      	ldrb	r4, [r0, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	428c      	cmp	r4, r1
 800a0a8:	d1f6      	bne.n	800a098 <memchr+0x8>
 800a0aa:	bd10      	pop	{r4, pc}

0800a0ac <memcpy>:
 800a0ac:	440a      	add	r2, r1
 800a0ae:	4291      	cmp	r1, r2
 800a0b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0b4:	d100      	bne.n	800a0b8 <memcpy+0xc>
 800a0b6:	4770      	bx	lr
 800a0b8:	b510      	push	{r4, lr}
 800a0ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0be:	4291      	cmp	r1, r2
 800a0c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0c4:	d1f9      	bne.n	800a0ba <memcpy+0xe>
 800a0c6:	bd10      	pop	{r4, pc}

0800a0c8 <_free_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d040      	beq.n	800a152 <_free_r+0x8a>
 800a0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d4:	1f0c      	subs	r4, r1, #4
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bfb8      	it	lt
 800a0da:	18e4      	addlt	r4, r4, r3
 800a0dc:	f7ff ff72 	bl	8009fc4 <__malloc_lock>
 800a0e0:	4a1c      	ldr	r2, [pc, #112]	; (800a154 <_free_r+0x8c>)
 800a0e2:	6813      	ldr	r3, [r2, #0]
 800a0e4:	b933      	cbnz	r3, 800a0f4 <_free_r+0x2c>
 800a0e6:	6063      	str	r3, [r4, #4]
 800a0e8:	6014      	str	r4, [r2, #0]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0f0:	f7ff bf6e 	b.w	8009fd0 <__malloc_unlock>
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d908      	bls.n	800a10a <_free_r+0x42>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	1821      	adds	r1, r4, r0
 800a0fc:	428b      	cmp	r3, r1
 800a0fe:	bf01      	itttt	eq
 800a100:	6819      	ldreq	r1, [r3, #0]
 800a102:	685b      	ldreq	r3, [r3, #4]
 800a104:	1809      	addeq	r1, r1, r0
 800a106:	6021      	streq	r1, [r4, #0]
 800a108:	e7ed      	b.n	800a0e6 <_free_r+0x1e>
 800a10a:	461a      	mov	r2, r3
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	b10b      	cbz	r3, 800a114 <_free_r+0x4c>
 800a110:	42a3      	cmp	r3, r4
 800a112:	d9fa      	bls.n	800a10a <_free_r+0x42>
 800a114:	6811      	ldr	r1, [r2, #0]
 800a116:	1850      	adds	r0, r2, r1
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d10b      	bne.n	800a134 <_free_r+0x6c>
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	4401      	add	r1, r0
 800a120:	1850      	adds	r0, r2, r1
 800a122:	4283      	cmp	r3, r0
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	d1e0      	bne.n	800a0ea <_free_r+0x22>
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4408      	add	r0, r1
 800a12e:	6010      	str	r0, [r2, #0]
 800a130:	6053      	str	r3, [r2, #4]
 800a132:	e7da      	b.n	800a0ea <_free_r+0x22>
 800a134:	d902      	bls.n	800a13c <_free_r+0x74>
 800a136:	230c      	movs	r3, #12
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	e7d6      	b.n	800a0ea <_free_r+0x22>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	1821      	adds	r1, r4, r0
 800a140:	428b      	cmp	r3, r1
 800a142:	bf01      	itttt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	1809      	addeq	r1, r1, r0
 800a14a:	6021      	streq	r1, [r4, #0]
 800a14c:	6063      	str	r3, [r4, #4]
 800a14e:	6054      	str	r4, [r2, #4]
 800a150:	e7cb      	b.n	800a0ea <_free_r+0x22>
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	20002a68 	.word	0x20002a68

0800a158 <_malloc_usable_size_r>:
 800a158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15c:	1f18      	subs	r0, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfbc      	itt	lt
 800a162:	580b      	ldrlt	r3, [r1, r0]
 800a164:	18c0      	addlt	r0, r0, r3
 800a166:	4770      	bx	lr

0800a168 <_init>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr

0800a174 <_fini>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr
